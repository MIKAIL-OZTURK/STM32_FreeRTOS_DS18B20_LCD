
AquaTempMonitor_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000841c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  080085b0  080085b0  000095b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800897c  0800897c  0000a1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800897c  0800897c  0000997c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008984  08008984  0000a1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008984  08008984  00009984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008988  08008988  00009988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800898c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a1d8  2**0
                  CONTENTS
 10 .bss          0000420c  200001d8  200001d8  0000a1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200043e4  200043e4  0000a1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001473e  00000000  00000000  0000a208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033d9  00000000  00000000  0001e946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001398  00000000  00000000  00021d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f24  00000000  00000000  000230b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000243ee  00000000  00000000  00023fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000171b9  00000000  00000000  000483ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6436  00000000  00000000  0005f583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001359b9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000062e4  00000000  00000000  001359fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  0013bce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008594 	.word	0x08008594

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08008594 	.word	0x08008594

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <delay_us>:
#include "ds18b20.h"
#include "stm32f4xx_hal.h"
#include "cmsis_os.h"

void delay_us(uint16_t us) {
 8000ed4:	b590      	push	{r4, r7, lr}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	80fb      	strh	r3, [r7, #6]
    uint32_t start = DWT->CYCCNT;
 8000ede:	4b0d      	ldr	r3, [pc, #52]	@ (8000f14 <delay_us+0x40>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	60fb      	str	r3, [r7, #12]
    uint32_t delayTicks = us * (HAL_RCC_GetHCLKFreq() / 1000000);
 8000ee4:	88fc      	ldrh	r4, [r7, #6]
 8000ee6:	f002 fa31 	bl	800334c <HAL_RCC_GetHCLKFreq>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4a0a      	ldr	r2, [pc, #40]	@ (8000f18 <delay_us+0x44>)
 8000eee:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef2:	0c9b      	lsrs	r3, r3, #18
 8000ef4:	fb04 f303 	mul.w	r3, r4, r3
 8000ef8:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < delayTicks);
 8000efa:	bf00      	nop
 8000efc:	4b05      	ldr	r3, [pc, #20]	@ (8000f14 <delay_us+0x40>)
 8000efe:	685a      	ldr	r2, [r3, #4]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	68ba      	ldr	r2, [r7, #8]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d8f8      	bhi.n	8000efc <delay_us+0x28>
}
 8000f0a:	bf00      	nop
 8000f0c:	bf00      	nop
 8000f0e:	3714      	adds	r7, #20
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd90      	pop	{r4, r7, pc}
 8000f14:	e0001000 	.word	0xe0001000
 8000f18:	431bde83 	.word	0x431bde83

08000f1c <Set_Pin_Output>:
    // DWT Delay aktif et (1us çözünürlük)
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
}

void Set_Pin_Output(void) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = DS18B20_PIN;
 8000f30:	2302      	movs	r3, #2
 8000f32:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f34:	2301      	movs	r3, #1
 8000f36:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DS18B20_PORT, &GPIO_InitStruct);
 8000f3c:	1d3b      	adds	r3, r7, #4
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4803      	ldr	r0, [pc, #12]	@ (8000f50 <Set_Pin_Output+0x34>)
 8000f42:	f000 ff33 	bl	8001dac <HAL_GPIO_Init>
}
 8000f46:	bf00      	nop
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40020000 	.word	0x40020000

08000f54 <Set_Pin_Input>:

void Set_Pin_Input(void) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = DS18B20_PIN;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DS18B20_PORT, &GPIO_InitStruct);
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	4619      	mov	r1, r3
 8000f78:	4803      	ldr	r0, [pc, #12]	@ (8000f88 <Set_Pin_Input+0x34>)
 8000f7a:	f000 ff17 	bl	8001dac <HAL_GPIO_Init>
}
 8000f7e:	bf00      	nop
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40020000 	.word	0x40020000

08000f8c <DS18B20_Start>:

uint8_t DS18B20_Start(void) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
    uint8_t response = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	71fb      	strb	r3, [r7, #7]
    Set_Pin_Output();
 8000f96:	f7ff ffc1 	bl	8000f1c <Set_Pin_Output>
    HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2102      	movs	r1, #2
 8000f9e:	4810      	ldr	r0, [pc, #64]	@ (8000fe0 <DS18B20_Start+0x54>)
 8000fa0:	f001 f8b8 	bl	8002114 <HAL_GPIO_WritePin>
    delay_us(480);
 8000fa4:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8000fa8:	f7ff ff94 	bl	8000ed4 <delay_us>
    Set_Pin_Input();
 8000fac:	f7ff ffd2 	bl	8000f54 <Set_Pin_Input>
    delay_us(80);
 8000fb0:	2050      	movs	r0, #80	@ 0x50
 8000fb2:	f7ff ff8f 	bl	8000ed4 <delay_us>

    if (!(HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN))) response = 1;
 8000fb6:	2102      	movs	r1, #2
 8000fb8:	4809      	ldr	r0, [pc, #36]	@ (8000fe0 <DS18B20_Start+0x54>)
 8000fba:	f001 f893 	bl	80020e4 <HAL_GPIO_ReadPin>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d102      	bne.n	8000fca <DS18B20_Start+0x3e>
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	71fb      	strb	r3, [r7, #7]
 8000fc8:	e001      	b.n	8000fce <DS18B20_Start+0x42>
    else response = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	71fb      	strb	r3, [r7, #7]

    delay_us(400);
 8000fce:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000fd2:	f7ff ff7f 	bl	8000ed4 <delay_us>
    return response;
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40020000 	.word	0x40020000

08000fe4 <DS18B20_Write>:

void DS18B20_Write(uint8_t data) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
    Set_Pin_Output();
 8000fee:	f7ff ff95 	bl	8000f1c <Set_Pin_Output>
    for (int i = 0; i < 8; i++) {
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	e028      	b.n	800104a <DS18B20_Write+0x66>
        if ((data & (1 << i)) != 0) {
 8000ff8:	79fa      	ldrb	r2, [r7, #7]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	fa42 f303 	asr.w	r3, r2, r3
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	2b00      	cmp	r3, #0
 8001006:	d010      	beq.n	800102a <DS18B20_Write+0x46>
            HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_RESET);
 8001008:	2200      	movs	r2, #0
 800100a:	2102      	movs	r1, #2
 800100c:	4813      	ldr	r0, [pc, #76]	@ (800105c <DS18B20_Write+0x78>)
 800100e:	f001 f881 	bl	8002114 <HAL_GPIO_WritePin>
            delay_us(1);
 8001012:	2001      	movs	r0, #1
 8001014:	f7ff ff5e 	bl	8000ed4 <delay_us>
            HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_SET);
 8001018:	2201      	movs	r2, #1
 800101a:	2102      	movs	r1, #2
 800101c:	480f      	ldr	r0, [pc, #60]	@ (800105c <DS18B20_Write+0x78>)
 800101e:	f001 f879 	bl	8002114 <HAL_GPIO_WritePin>
            delay_us(60);
 8001022:	203c      	movs	r0, #60	@ 0x3c
 8001024:	f7ff ff56 	bl	8000ed4 <delay_us>
 8001028:	e00c      	b.n	8001044 <DS18B20_Write+0x60>
        } else {
            HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	2102      	movs	r1, #2
 800102e:	480b      	ldr	r0, [pc, #44]	@ (800105c <DS18B20_Write+0x78>)
 8001030:	f001 f870 	bl	8002114 <HAL_GPIO_WritePin>
            delay_us(60);
 8001034:	203c      	movs	r0, #60	@ 0x3c
 8001036:	f7ff ff4d 	bl	8000ed4 <delay_us>
            HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_SET);
 800103a:	2201      	movs	r2, #1
 800103c:	2102      	movs	r1, #2
 800103e:	4807      	ldr	r0, [pc, #28]	@ (800105c <DS18B20_Write+0x78>)
 8001040:	f001 f868 	bl	8002114 <HAL_GPIO_WritePin>
    for (int i = 0; i < 8; i++) {
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3301      	adds	r3, #1
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	2b07      	cmp	r3, #7
 800104e:	ddd3      	ble.n	8000ff8 <DS18B20_Write+0x14>
        }
    }
}
 8001050:	bf00      	nop
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40020000 	.word	0x40020000

08001060 <DS18B20_Read>:

uint8_t DS18B20_Read(void) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
    uint8_t value = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	71fb      	strb	r3, [r7, #7]
    Set_Pin_Input();
 800106a:	f7ff ff73 	bl	8000f54 <Set_Pin_Input>
    for (int i = 0; i < 8; i++) {
 800106e:	2300      	movs	r3, #0
 8001070:	603b      	str	r3, [r7, #0]
 8001072:	e022      	b.n	80010ba <DS18B20_Read+0x5a>
        Set_Pin_Output();
 8001074:	f7ff ff52 	bl	8000f1c <Set_Pin_Output>
        HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	2102      	movs	r1, #2
 800107c:	4813      	ldr	r0, [pc, #76]	@ (80010cc <DS18B20_Read+0x6c>)
 800107e:	f001 f849 	bl	8002114 <HAL_GPIO_WritePin>
        delay_us(1);
 8001082:	2001      	movs	r0, #1
 8001084:	f7ff ff26 	bl	8000ed4 <delay_us>
        Set_Pin_Input();
 8001088:	f7ff ff64 	bl	8000f54 <Set_Pin_Input>
        if (HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN)) {
 800108c:	2102      	movs	r1, #2
 800108e:	480f      	ldr	r0, [pc, #60]	@ (80010cc <DS18B20_Read+0x6c>)
 8001090:	f001 f828 	bl	80020e4 <HAL_GPIO_ReadPin>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d009      	beq.n	80010ae <DS18B20_Read+0x4e>
            value |= 1 << i;
 800109a:	2201      	movs	r2, #1
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	b25a      	sxtb	r2, r3
 80010a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	b25b      	sxtb	r3, r3
 80010ac:	71fb      	strb	r3, [r7, #7]
        }
        delay_us(60);
 80010ae:	203c      	movs	r0, #60	@ 0x3c
 80010b0:	f7ff ff10 	bl	8000ed4 <delay_us>
    for (int i = 0; i < 8; i++) {
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	3301      	adds	r3, #1
 80010b8:	603b      	str	r3, [r7, #0]
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	2b07      	cmp	r3, #7
 80010be:	ddd9      	ble.n	8001074 <DS18B20_Read+0x14>
    }
    return value;
 80010c0:	79fb      	ldrb	r3, [r7, #7]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40020000 	.word	0x40020000

080010d0 <DS18B20_GetTemp>:

float DS18B20_GetTemp(void) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
    uint8_t temp_l, temp_h;
    int16_t temp;
    float temperature = 0;
 80010d6:	f04f 0300 	mov.w	r3, #0
 80010da:	607b      	str	r3, [r7, #4]

    DS18B20_Start();
 80010dc:	f7ff ff56 	bl	8000f8c <DS18B20_Start>
    DS18B20_Write(0xCC); // Skip ROM
 80010e0:	20cc      	movs	r0, #204	@ 0xcc
 80010e2:	f7ff ff7f 	bl	8000fe4 <DS18B20_Write>
    DS18B20_Write(0x44); // Convert T
 80010e6:	2044      	movs	r0, #68	@ 0x44
 80010e8:	f7ff ff7c 	bl	8000fe4 <DS18B20_Write>
    osDelay(750);        // Bekle
 80010ec:	f240 20ee 	movw	r0, #750	@ 0x2ee
 80010f0:	f002 fc1a 	bl	8003928 <osDelay>

    DS18B20_Start();
 80010f4:	f7ff ff4a 	bl	8000f8c <DS18B20_Start>
    DS18B20_Write(0xCC); // Skip ROM
 80010f8:	20cc      	movs	r0, #204	@ 0xcc
 80010fa:	f7ff ff73 	bl	8000fe4 <DS18B20_Write>
    DS18B20_Write(0xBE); // Read Scratchpad
 80010fe:	20be      	movs	r0, #190	@ 0xbe
 8001100:	f7ff ff70 	bl	8000fe4 <DS18B20_Write>

    temp_l = DS18B20_Read();
 8001104:	f7ff ffac 	bl	8001060 <DS18B20_Read>
 8001108:	4603      	mov	r3, r0
 800110a:	70fb      	strb	r3, [r7, #3]
    temp_h = DS18B20_Read();
 800110c:	f7ff ffa8 	bl	8001060 <DS18B20_Read>
 8001110:	4603      	mov	r3, r0
 8001112:	70bb      	strb	r3, [r7, #2]

    temp = (temp_h << 8) | temp_l;
 8001114:	78bb      	ldrb	r3, [r7, #2]
 8001116:	b21b      	sxth	r3, r3
 8001118:	021b      	lsls	r3, r3, #8
 800111a:	b21a      	sxth	r2, r3
 800111c:	78fb      	ldrb	r3, [r7, #3]
 800111e:	b21b      	sxth	r3, r3
 8001120:	4313      	orrs	r3, r2
 8001122:	803b      	strh	r3, [r7, #0]
    temperature = (float) temp / 16.0;
 8001124:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001128:	ee07 3a90 	vmov	s15, r3
 800112c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001130:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001134:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001138:	edc7 7a01 	vstr	s15, [r7, #4]

    return temperature;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	ee07 3a90 	vmov	s15, r3
}
 8001142:	eeb0 0a67 	vmov.f32	s0, s15
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4a07      	ldr	r2, [pc, #28]	@ (8001178 <vApplicationGetIdleTaskMemory+0x2c>)
 800115c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	4a06      	ldr	r2, [pc, #24]	@ (800117c <vApplicationGetIdleTaskMemory+0x30>)
 8001162:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2280      	movs	r2, #128	@ 0x80
 8001168:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800116a:	bf00      	nop
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	200001f4 	.word	0x200001f4
 800117c:	20000294 	.word	0x20000294

08001180 <lcd_init>:
static void lcd_send(uint8_t data, uint8_t mode);
static void lcd_write4bits(uint8_t data);
static void lcd_pulse_enable(uint8_t data);
static void lcd_write(uint8_t data);

void lcd_init(I2C_HandleTypeDef *hi2c) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
    _lcd_i2c = hi2c;
 8001188:	4a16      	ldr	r2, [pc, #88]	@ (80011e4 <lcd_init+0x64>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6013      	str	r3, [r2, #0]
    HAL_Delay(50);
 800118e:	2032      	movs	r0, #50	@ 0x32
 8001190:	f000 fd06 	bl	8001ba0 <HAL_Delay>

    lcd_write4bits(0x30);
 8001194:	2030      	movs	r0, #48	@ 0x30
 8001196:	f000 f8b2 	bl	80012fe <lcd_write4bits>
    HAL_Delay(5);
 800119a:	2005      	movs	r0, #5
 800119c:	f000 fd00 	bl	8001ba0 <HAL_Delay>
    lcd_write4bits(0x30);
 80011a0:	2030      	movs	r0, #48	@ 0x30
 80011a2:	f000 f8ac 	bl	80012fe <lcd_write4bits>
    HAL_Delay(1);
 80011a6:	2001      	movs	r0, #1
 80011a8:	f000 fcfa 	bl	8001ba0 <HAL_Delay>
    lcd_write4bits(0x30);
 80011ac:	2030      	movs	r0, #48	@ 0x30
 80011ae:	f000 f8a6 	bl	80012fe <lcd_write4bits>
    HAL_Delay(10);
 80011b2:	200a      	movs	r0, #10
 80011b4:	f000 fcf4 	bl	8001ba0 <HAL_Delay>
    lcd_write4bits(0x20); // 4-bit mode
 80011b8:	2020      	movs	r0, #32
 80011ba:	f000 f8a0 	bl	80012fe <lcd_write4bits>

    lcd_send_cmd(LCD_FUNCTIONSET | LCD_2LINE | LCD_5x8DOTS | LCD_4BITMODE);
 80011be:	2028      	movs	r0, #40	@ 0x28
 80011c0:	f000 f812 	bl	80011e8 <lcd_send_cmd>
    lcd_send_cmd(LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 80011c4:	200c      	movs	r0, #12
 80011c6:	f000 f80f 	bl	80011e8 <lcd_send_cmd>
    lcd_send_cmd(LCD_CLEARDISPLAY);
 80011ca:	2001      	movs	r0, #1
 80011cc:	f000 f80c 	bl	80011e8 <lcd_send_cmd>
    HAL_Delay(2);
 80011d0:	2002      	movs	r0, #2
 80011d2:	f000 fce5 	bl	8001ba0 <HAL_Delay>
    lcd_send_cmd(LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 80011d6:	2006      	movs	r0, #6
 80011d8:	f000 f806 	bl	80011e8 <lcd_send_cmd>
}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000494 	.word	0x20000494

080011e8 <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
    lcd_send(cmd, 0);
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	2100      	movs	r1, #0
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 f850 	bl	800129c <lcd_send>
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <lcd_send_data>:

void lcd_send_data(uint8_t data) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
    lcd_send(data, 1);
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	2101      	movs	r1, #1
 8001212:	4618      	mov	r0, r3
 8001214:	f000 f842 	bl	800129c <lcd_send>
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <lcd_send_string>:

void lcd_send_string(char *str) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
    while (*str) {
 8001228:	e006      	b.n	8001238 <lcd_send_string+0x18>
        lcd_send_data(*str++);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	1c5a      	adds	r2, r3, #1
 800122e:	607a      	str	r2, [r7, #4]
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ffe6 	bl	8001204 <lcd_send_data>
    while (*str) {
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d1f4      	bne.n	800122a <lcd_send_string+0xa>
    }
}
 8001240:	bf00      	nop
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <lcd_clear>:

void lcd_clear(void) {
 800124a:	b580      	push	{r7, lr}
 800124c:	af00      	add	r7, sp, #0
    lcd_send_cmd(LCD_CLEARDISPLAY);
 800124e:	2001      	movs	r0, #1
 8001250:	f7ff ffca 	bl	80011e8 <lcd_send_cmd>
    HAL_Delay(2);
 8001254:	2002      	movs	r0, #2
 8001256:	f000 fca3 	bl	8001ba0 <HAL_Delay>
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}

0800125e <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t col) {
 800125e:	b580      	push	{r7, lr}
 8001260:	b084      	sub	sp, #16
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	460a      	mov	r2, r1
 8001268:	71fb      	strb	r3, [r7, #7]
 800126a:	4613      	mov	r3, r2
 800126c:	71bb      	strb	r3, [r7, #6]
    uint8_t addr = (row == 0) ? 0x00 : 0x40;
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d101      	bne.n	8001278 <lcd_set_cursor+0x1a>
 8001274:	2300      	movs	r3, #0
 8001276:	e000      	b.n	800127a <lcd_set_cursor+0x1c>
 8001278:	2340      	movs	r3, #64	@ 0x40
 800127a:	73fb      	strb	r3, [r7, #15]
    lcd_send_cmd(LCD_SETDDRAMADDR | (addr + col));
 800127c:	7bfa      	ldrb	r2, [r7, #15]
 800127e:	79bb      	ldrb	r3, [r7, #6]
 8001280:	4413      	add	r3, r2
 8001282:	b2db      	uxtb	r3, r3
 8001284:	b25b      	sxtb	r3, r3
 8001286:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800128a:	b25b      	sxtb	r3, r3
 800128c:	b2db      	uxtb	r3, r3
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff ffaa 	bl	80011e8 <lcd_send_cmd>
}
 8001294:	bf00      	nop
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <lcd_send>:

static void lcd_send(uint8_t data, uint8_t mode) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	460a      	mov	r2, r1
 80012a6:	71fb      	strb	r3, [r7, #7]
 80012a8:	4613      	mov	r3, r2
 80012aa:	71bb      	strb	r3, [r7, #6]
    uint8_t high = data & 0xF0;
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	f023 030f 	bic.w	r3, r3, #15
 80012b2:	73fb      	strb	r3, [r7, #15]
    uint8_t low = (data << 4) & 0xF0;
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	011b      	lsls	r3, r3, #4
 80012b8:	73bb      	strb	r3, [r7, #14]
    lcd_write4bits(high | (mode ? 0x01 : 0x00));
 80012ba:	79bb      	ldrb	r3, [r7, #6]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	bf14      	ite	ne
 80012c0:	2301      	movne	r3, #1
 80012c2:	2300      	moveq	r3, #0
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	b25a      	sxtb	r2, r3
 80012c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	b25b      	sxtb	r3, r3
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 f813 	bl	80012fe <lcd_write4bits>
    lcd_write4bits(low | (mode ? 0x01 : 0x00));
 80012d8:	79bb      	ldrb	r3, [r7, #6]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	bf14      	ite	ne
 80012de:	2301      	movne	r3, #1
 80012e0:	2300      	moveq	r3, #0
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	b25a      	sxtb	r2, r3
 80012e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	b25b      	sxtb	r3, r3
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	4618      	mov	r0, r3
 80012f2:	f000 f804 	bl	80012fe <lcd_write4bits>
}
 80012f6:	bf00      	nop
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <lcd_write4bits>:

static void lcd_write4bits(uint8_t data) {
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	71fb      	strb	r3, [r7, #7]
    lcd_write(data | 0x08);  // Backlight ON
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	f043 0308 	orr.w	r3, r3, #8
 800130e:	b2db      	uxtb	r3, r3
 8001310:	4618      	mov	r0, r3
 8001312:	f000 f829 	bl	8001368 <lcd_write>
    lcd_pulse_enable(data | 0x08);
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	f043 0308 	orr.w	r3, r3, #8
 800131c:	b2db      	uxtb	r3, r3
 800131e:	4618      	mov	r0, r3
 8001320:	f000 f804 	bl	800132c <lcd_pulse_enable>
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <lcd_pulse_enable>:

static void lcd_pulse_enable(uint8_t data) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
    lcd_write(data | 0x04);  // En = 1
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	f043 0304 	orr.w	r3, r3, #4
 800133c:	b2db      	uxtb	r3, r3
 800133e:	4618      	mov	r0, r3
 8001340:	f000 f812 	bl	8001368 <lcd_write>
    HAL_Delay(1);
 8001344:	2001      	movs	r0, #1
 8001346:	f000 fc2b 	bl	8001ba0 <HAL_Delay>
    lcd_write(data & ~0x04); // En = 0
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	f023 0304 	bic.w	r3, r3, #4
 8001350:	b2db      	uxtb	r3, r3
 8001352:	4618      	mov	r0, r3
 8001354:	f000 f808 	bl	8001368 <lcd_write>
    HAL_Delay(1);
 8001358:	2001      	movs	r0, #1
 800135a:	f000 fc21 	bl	8001ba0 <HAL_Delay>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <lcd_write>:

static void lcd_write(uint8_t data) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af02      	add	r7, sp, #8
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(_lcd_i2c, LCD_I2C_ADDR, &data, 1, 10);
 8001372:	4b06      	ldr	r3, [pc, #24]	@ (800138c <lcd_write+0x24>)
 8001374:	6818      	ldr	r0, [r3, #0]
 8001376:	1dfa      	adds	r2, r7, #7
 8001378:	230a      	movs	r3, #10
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	2301      	movs	r3, #1
 800137e:	214e      	movs	r1, #78	@ 0x4e
 8001380:	f001 f826 	bl	80023d0 <HAL_I2C_Master_Transmit>
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000494 	.word	0x20000494

08001390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001396:	f000 fbc1 	bl	8001b1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800139a:	f000 f84d 	bl	8001438 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800139e:	f000 f8e3 	bl	8001568 <MX_GPIO_Init>
  MX_I2C1_Init();
 80013a2:	f000 f8b3 	bl	800150c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  lcd_init(&hi2c1);
 80013a6:	481c      	ldr	r0, [pc, #112]	@ (8001418 <main+0x88>)
 80013a8:	f7ff feea 	bl	8001180 <lcd_init>
  lcd_clear();
 80013ac:	f7ff ff4d 	bl	800124a <lcd_clear>
  lcd_set_cursor(0, 0);
 80013b0:	2100      	movs	r1, #0
 80013b2:	2000      	movs	r0, #0
 80013b4:	f7ff ff53 	bl	800125e <lcd_set_cursor>

  xTempQueue = xQueueCreate(5, sizeof(float)); // 5 elemanlık, float türünde kuyruk
 80013b8:	2200      	movs	r2, #0
 80013ba:	2104      	movs	r1, #4
 80013bc:	2005      	movs	r0, #5
 80013be:	f002 fbe5 	bl	8003b8c <xQueueGenericCreate>
 80013c2:	4603      	mov	r3, r0
 80013c4:	4a15      	ldr	r2, [pc, #84]	@ (800141c <main+0x8c>)
 80013c6:	6013      	str	r3, [r2, #0]
  if (xTempQueue == NULL) {
 80013c8:	4b14      	ldr	r3, [pc, #80]	@ (800141c <main+0x8c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d101      	bne.n	80013d4 <main+0x44>
      Error_Handler();
 80013d0:	f000 f986 	bl	80016e0 <Error_Handler>
  }

  xTaskCreate(Task_ReadTemperature, "TempRead", 128, NULL, 2, NULL);
 80013d4:	2300      	movs	r3, #0
 80013d6:	9301      	str	r3, [sp, #4]
 80013d8:	2302      	movs	r3, #2
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	2300      	movs	r3, #0
 80013de:	2280      	movs	r2, #128	@ 0x80
 80013e0:	490f      	ldr	r1, [pc, #60]	@ (8001420 <main+0x90>)
 80013e2:	4810      	ldr	r0, [pc, #64]	@ (8001424 <main+0x94>)
 80013e4:	f002 ff80 	bl	80042e8 <xTaskCreate>
  xTaskCreate(Task_SendToQueue, "QueueWrite", 128, NULL, 2, NULL);
 80013e8:	2300      	movs	r3, #0
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	2302      	movs	r3, #2
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	2300      	movs	r3, #0
 80013f2:	2280      	movs	r2, #128	@ 0x80
 80013f4:	490c      	ldr	r1, [pc, #48]	@ (8001428 <main+0x98>)
 80013f6:	480d      	ldr	r0, [pc, #52]	@ (800142c <main+0x9c>)
 80013f8:	f002 ff76 	bl	80042e8 <xTaskCreate>
  xTaskCreate(Task_DisplayTemperature, "LCDDisplay", 128, NULL, 1, NULL);
 80013fc:	2300      	movs	r3, #0
 80013fe:	9301      	str	r3, [sp, #4]
 8001400:	2301      	movs	r3, #1
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	2300      	movs	r3, #0
 8001406:	2280      	movs	r2, #128	@ 0x80
 8001408:	4909      	ldr	r1, [pc, #36]	@ (8001430 <main+0xa0>)
 800140a:	480a      	ldr	r0, [pc, #40]	@ (8001434 <main+0xa4>)
 800140c:	f002 ff6c 	bl	80042e8 <xTaskCreate>

  vTaskStartScheduler();
 8001410:	f003 f8f0 	bl	80045f4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* USER CODE BEGIN WHILE */
  while (1)
 8001414:	bf00      	nop
 8001416:	e7fd      	b.n	8001414 <main+0x84>
 8001418:	2000049c 	.word	0x2000049c
 800141c:	20000498 	.word	0x20000498
 8001420:	080085b0 	.word	0x080085b0
 8001424:	08001609 	.word	0x08001609
 8001428:	080085bc 	.word	0x080085bc
 800142c:	08001631 	.word	0x08001631
 8001430:	080085c8 	.word	0x080085c8
 8001434:	08001665 	.word	0x08001665

08001438 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b094      	sub	sp, #80	@ 0x50
 800143c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800143e:	f107 0320 	add.w	r3, r7, #32
 8001442:	2230      	movs	r2, #48	@ 0x30
 8001444:	2100      	movs	r1, #0
 8001446:	4618      	mov	r0, r3
 8001448:	f004 ff79 	bl	800633e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800144c:	f107 030c 	add.w	r3, r7, #12
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800145c:	2300      	movs	r3, #0
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	4b28      	ldr	r3, [pc, #160]	@ (8001504 <SystemClock_Config+0xcc>)
 8001462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001464:	4a27      	ldr	r2, [pc, #156]	@ (8001504 <SystemClock_Config+0xcc>)
 8001466:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800146a:	6413      	str	r3, [r2, #64]	@ 0x40
 800146c:	4b25      	ldr	r3, [pc, #148]	@ (8001504 <SystemClock_Config+0xcc>)
 800146e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001470:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001478:	2300      	movs	r3, #0
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	4b22      	ldr	r3, [pc, #136]	@ (8001508 <SystemClock_Config+0xd0>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a21      	ldr	r2, [pc, #132]	@ (8001508 <SystemClock_Config+0xd0>)
 8001482:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	4b1f      	ldr	r3, [pc, #124]	@ (8001508 <SystemClock_Config+0xd0>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001494:	2301      	movs	r3, #1
 8001496:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001498:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800149c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800149e:	2302      	movs	r3, #2
 80014a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80014a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014a8:	2308      	movs	r3, #8
 80014aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014ac:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80014b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014b2:	2302      	movs	r3, #2
 80014b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014b6:	2307      	movs	r3, #7
 80014b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ba:	f107 0320 	add.w	r3, r7, #32
 80014be:	4618      	mov	r0, r3
 80014c0:	f001 fae0 	bl	8002a84 <HAL_RCC_OscConfig>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <SystemClock_Config+0x96>
  {
    Error_Handler();
 80014ca:	f000 f909 	bl	80016e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ce:	230f      	movs	r3, #15
 80014d0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014d2:	2302      	movs	r3, #2
 80014d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014da:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80014de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014e6:	f107 030c 	add.w	r3, r7, #12
 80014ea:	2105      	movs	r1, #5
 80014ec:	4618      	mov	r0, r3
 80014ee:	f001 fd41 	bl	8002f74 <HAL_RCC_ClockConfig>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80014f8:	f000 f8f2 	bl	80016e0 <Error_Handler>
  }
}
 80014fc:	bf00      	nop
 80014fe:	3750      	adds	r7, #80	@ 0x50
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40023800 	.word	0x40023800
 8001508:	40007000 	.word	0x40007000

0800150c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001510:	4b12      	ldr	r3, [pc, #72]	@ (800155c <MX_I2C1_Init+0x50>)
 8001512:	4a13      	ldr	r2, [pc, #76]	@ (8001560 <MX_I2C1_Init+0x54>)
 8001514:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001516:	4b11      	ldr	r3, [pc, #68]	@ (800155c <MX_I2C1_Init+0x50>)
 8001518:	4a12      	ldr	r2, [pc, #72]	@ (8001564 <MX_I2C1_Init+0x58>)
 800151a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800151c:	4b0f      	ldr	r3, [pc, #60]	@ (800155c <MX_I2C1_Init+0x50>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001522:	4b0e      	ldr	r3, [pc, #56]	@ (800155c <MX_I2C1_Init+0x50>)
 8001524:	2200      	movs	r2, #0
 8001526:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001528:	4b0c      	ldr	r3, [pc, #48]	@ (800155c <MX_I2C1_Init+0x50>)
 800152a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800152e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001530:	4b0a      	ldr	r3, [pc, #40]	@ (800155c <MX_I2C1_Init+0x50>)
 8001532:	2200      	movs	r2, #0
 8001534:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001536:	4b09      	ldr	r3, [pc, #36]	@ (800155c <MX_I2C1_Init+0x50>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800153c:	4b07      	ldr	r3, [pc, #28]	@ (800155c <MX_I2C1_Init+0x50>)
 800153e:	2200      	movs	r2, #0
 8001540:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001542:	4b06      	ldr	r3, [pc, #24]	@ (800155c <MX_I2C1_Init+0x50>)
 8001544:	2200      	movs	r2, #0
 8001546:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001548:	4804      	ldr	r0, [pc, #16]	@ (800155c <MX_I2C1_Init+0x50>)
 800154a:	f000 fdfd 	bl	8002148 <HAL_I2C_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001554:	f000 f8c4 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}
 800155c:	2000049c 	.word	0x2000049c
 8001560:	40005400 	.word	0x40005400
 8001564:	000186a0 	.word	0x000186a0

08001568 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156e:	f107 030c 	add.w	r3, r7, #12
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
 800157c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	4b1f      	ldr	r3, [pc, #124]	@ (8001600 <MX_GPIO_Init+0x98>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	4a1e      	ldr	r2, [pc, #120]	@ (8001600 <MX_GPIO_Init+0x98>)
 8001588:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800158c:	6313      	str	r3, [r2, #48]	@ 0x30
 800158e:	4b1c      	ldr	r3, [pc, #112]	@ (8001600 <MX_GPIO_Init+0x98>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	4b18      	ldr	r3, [pc, #96]	@ (8001600 <MX_GPIO_Init+0x98>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	4a17      	ldr	r2, [pc, #92]	@ (8001600 <MX_GPIO_Init+0x98>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015aa:	4b15      	ldr	r3, [pc, #84]	@ (8001600 <MX_GPIO_Init+0x98>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	603b      	str	r3, [r7, #0]
 80015ba:	4b11      	ldr	r3, [pc, #68]	@ (8001600 <MX_GPIO_Init+0x98>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	4a10      	ldr	r2, [pc, #64]	@ (8001600 <MX_GPIO_Init+0x98>)
 80015c0:	f043 0302 	orr.w	r3, r3, #2
 80015c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001600 <MX_GPIO_Init+0x98>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	603b      	str	r3, [r7, #0]
 80015d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2102      	movs	r1, #2
 80015d6:	480b      	ldr	r0, [pc, #44]	@ (8001604 <MX_GPIO_Init+0x9c>)
 80015d8:	f000 fd9c 	bl	8002114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015dc:	2302      	movs	r3, #2
 80015de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e0:	2301      	movs	r3, #1
 80015e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ec:	f107 030c 	add.w	r3, r7, #12
 80015f0:	4619      	mov	r1, r3
 80015f2:	4804      	ldr	r0, [pc, #16]	@ (8001604 <MX_GPIO_Init+0x9c>)
 80015f4:	f000 fbda 	bl	8001dac <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80015f8:	bf00      	nop
 80015fa:	3720      	adds	r7, #32
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40023800 	.word	0x40023800
 8001604:	40020000 	.word	0x40020000

08001608 <Task_ReadTemperature>:

/* USER CODE BEGIN 4 */
float latestTemp = 0;

void Task_ReadTemperature(void *params) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
    for (;;) {
        latestTemp = DS18B20_GetTemp(); // Daha önce yazdığımız sürücü fonksiyonu
 8001610:	f7ff fd5e 	bl	80010d0 <DS18B20_GetTemp>
 8001614:	eef0 7a40 	vmov.f32	s15, s0
 8001618:	4b04      	ldr	r3, [pc, #16]	@ (800162c <Task_ReadTemperature+0x24>)
 800161a:	edc3 7a00 	vstr	s15, [r3]
        vTaskDelay(pdMS_TO_TICKS(1000)); // 1 saniye bekle
 800161e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001622:	f002 ffb1 	bl	8004588 <vTaskDelay>
        latestTemp = DS18B20_GetTemp(); // Daha önce yazdığımız sürücü fonksiyonu
 8001626:	bf00      	nop
 8001628:	e7f2      	b.n	8001610 <Task_ReadTemperature+0x8>
 800162a:	bf00      	nop
 800162c:	200004f0 	.word	0x200004f0

08001630 <Task_SendToQueue>:
    }
}
extern float latestTemp;

void Task_SendToQueue(void *params) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
    for (;;) {
        float tempToSend = latestTemp;
 8001638:	4b08      	ldr	r3, [pc, #32]	@ (800165c <Task_SendToQueue+0x2c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	60fb      	str	r3, [r7, #12]
        xQueueSend(xTempQueue, &tempToSend, portMAX_DELAY);
 800163e:	4b08      	ldr	r3, [pc, #32]	@ (8001660 <Task_SendToQueue+0x30>)
 8001640:	6818      	ldr	r0, [r3, #0]
 8001642:	f107 010c 	add.w	r1, r7, #12
 8001646:	2300      	movs	r3, #0
 8001648:	f04f 32ff 	mov.w	r2, #4294967295
 800164c:	f002 faf8 	bl	8003c40 <xQueueGenericSend>
        vTaskDelay(pdMS_TO_TICKS(1000)); // Aynı periyotla
 8001650:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001654:	f002 ff98 	bl	8004588 <vTaskDelay>
    for (;;) {
 8001658:	bf00      	nop
 800165a:	e7ed      	b.n	8001638 <Task_SendToQueue+0x8>
 800165c:	200004f0 	.word	0x200004f0
 8001660:	20000498 	.word	0x20000498

08001664 <Task_DisplayTemperature>:
    }
}
void Task_DisplayTemperature(void *params) {
 8001664:	b580      	push	{r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
    float tempFromQueue;
    char lcdBuffer[16];

    for (;;) {
        if (xQueueReceive(xTempQueue, &tempFromQueue, portMAX_DELAY) == pdPASS) {
 800166c:	4b11      	ldr	r3, [pc, #68]	@ (80016b4 <Task_DisplayTemperature+0x50>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f107 011c 	add.w	r1, r7, #28
 8001674:	f04f 32ff 	mov.w	r2, #4294967295
 8001678:	4618      	mov	r0, r3
 800167a:	f002 fbe3 	bl	8003e44 <xQueueReceive>
 800167e:	4603      	mov	r3, r0
 8001680:	2b01      	cmp	r3, #1
 8001682:	d1f3      	bne.n	800166c <Task_DisplayTemperature+0x8>
            sprintf(lcdBuffer, "Temp: %.2f C", tempFromQueue);
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	4618      	mov	r0, r3
 8001688:	f7fe ff5e 	bl	8000548 <__aeabi_f2d>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	f107 000c 	add.w	r0, r7, #12
 8001694:	4908      	ldr	r1, [pc, #32]	@ (80016b8 <Task_DisplayTemperature+0x54>)
 8001696:	f004 fded 	bl	8006274 <siprintf>
            lcd_set_cursor(0, 0);
 800169a:	2100      	movs	r1, #0
 800169c:	2000      	movs	r0, #0
 800169e:	f7ff fdde 	bl	800125e <lcd_set_cursor>
            lcd_clear();
 80016a2:	f7ff fdd2 	bl	800124a <lcd_clear>
            lcd_send_string(lcdBuffer);
 80016a6:	f107 030c 	add.w	r3, r7, #12
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fdb8 	bl	8001220 <lcd_send_string>
        if (xQueueReceive(xTempQueue, &tempFromQueue, portMAX_DELAY) == pdPASS) {
 80016b0:	e7dc      	b.n	800166c <Task_DisplayTemperature+0x8>
 80016b2:	bf00      	nop
 80016b4:	20000498 	.word	0x20000498
 80016b8:	080085d4 	.word	0x080085d4

080016bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a04      	ldr	r2, [pc, #16]	@ (80016dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d101      	bne.n	80016d2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80016ce:	f000 fa47 	bl	8001b60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40000800 	.word	0x40000800

080016e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e4:	b672      	cpsid	i
}
 80016e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e8:	bf00      	nop
 80016ea:	e7fd      	b.n	80016e8 <Error_Handler+0x8>

080016ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	607b      	str	r3, [r7, #4]
 80016f6:	4b12      	ldr	r3, [pc, #72]	@ (8001740 <HAL_MspInit+0x54>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fa:	4a11      	ldr	r2, [pc, #68]	@ (8001740 <HAL_MspInit+0x54>)
 80016fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001700:	6453      	str	r3, [r2, #68]	@ 0x44
 8001702:	4b0f      	ldr	r3, [pc, #60]	@ (8001740 <HAL_MspInit+0x54>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001706:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	603b      	str	r3, [r7, #0]
 8001712:	4b0b      	ldr	r3, [pc, #44]	@ (8001740 <HAL_MspInit+0x54>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001716:	4a0a      	ldr	r2, [pc, #40]	@ (8001740 <HAL_MspInit+0x54>)
 8001718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800171c:	6413      	str	r3, [r2, #64]	@ 0x40
 800171e:	4b08      	ldr	r3, [pc, #32]	@ (8001740 <HAL_MspInit+0x54>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001726:	603b      	str	r3, [r7, #0]
 8001728:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800172a:	2200      	movs	r2, #0
 800172c:	210f      	movs	r1, #15
 800172e:	f06f 0001 	mvn.w	r0, #1
 8001732:	f000 fb11 	bl	8001d58 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40023800 	.word	0x40023800

08001744 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08a      	sub	sp, #40	@ 0x28
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a19      	ldr	r2, [pc, #100]	@ (80017c8 <HAL_I2C_MspInit+0x84>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d12b      	bne.n	80017be <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	4b18      	ldr	r3, [pc, #96]	@ (80017cc <HAL_I2C_MspInit+0x88>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176e:	4a17      	ldr	r2, [pc, #92]	@ (80017cc <HAL_I2C_MspInit+0x88>)
 8001770:	f043 0302 	orr.w	r3, r3, #2
 8001774:	6313      	str	r3, [r2, #48]	@ 0x30
 8001776:	4b15      	ldr	r3, [pc, #84]	@ (80017cc <HAL_I2C_MspInit+0x88>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001782:	23c0      	movs	r3, #192	@ 0xc0
 8001784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001786:	2312      	movs	r3, #18
 8001788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178e:	2303      	movs	r3, #3
 8001790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001792:	2304      	movs	r3, #4
 8001794:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001796:	f107 0314 	add.w	r3, r7, #20
 800179a:	4619      	mov	r1, r3
 800179c:	480c      	ldr	r0, [pc, #48]	@ (80017d0 <HAL_I2C_MspInit+0x8c>)
 800179e:	f000 fb05 	bl	8001dac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	4b09      	ldr	r3, [pc, #36]	@ (80017cc <HAL_I2C_MspInit+0x88>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017aa:	4a08      	ldr	r2, [pc, #32]	@ (80017cc <HAL_I2C_MspInit+0x88>)
 80017ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017b2:	4b06      	ldr	r3, [pc, #24]	@ (80017cc <HAL_I2C_MspInit+0x88>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80017be:	bf00      	nop
 80017c0:	3728      	adds	r7, #40	@ 0x28
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40005400 	.word	0x40005400
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40020400 	.word	0x40020400

080017d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08e      	sub	sp, #56	@ 0x38
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80017dc:	2300      	movs	r3, #0
 80017de:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80017e4:	2300      	movs	r3, #0
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	4b33      	ldr	r3, [pc, #204]	@ (80018b8 <HAL_InitTick+0xe4>)
 80017ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ec:	4a32      	ldr	r2, [pc, #200]	@ (80018b8 <HAL_InitTick+0xe4>)
 80017ee:	f043 0304 	orr.w	r3, r3, #4
 80017f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80017f4:	4b30      	ldr	r3, [pc, #192]	@ (80018b8 <HAL_InitTick+0xe4>)
 80017f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001800:	f107 0210 	add.w	r2, r7, #16
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	4611      	mov	r1, r2
 800180a:	4618      	mov	r0, r3
 800180c:	f001 fdbe 	bl	800338c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001810:	6a3b      	ldr	r3, [r7, #32]
 8001812:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001816:	2b00      	cmp	r3, #0
 8001818:	d103      	bne.n	8001822 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800181a:	f001 fda3 	bl	8003364 <HAL_RCC_GetPCLK1Freq>
 800181e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001820:	e004      	b.n	800182c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001822:	f001 fd9f 	bl	8003364 <HAL_RCC_GetPCLK1Freq>
 8001826:	4603      	mov	r3, r0
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800182c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800182e:	4a23      	ldr	r2, [pc, #140]	@ (80018bc <HAL_InitTick+0xe8>)
 8001830:	fba2 2303 	umull	r2, r3, r2, r3
 8001834:	0c9b      	lsrs	r3, r3, #18
 8001836:	3b01      	subs	r3, #1
 8001838:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800183a:	4b21      	ldr	r3, [pc, #132]	@ (80018c0 <HAL_InitTick+0xec>)
 800183c:	4a21      	ldr	r2, [pc, #132]	@ (80018c4 <HAL_InitTick+0xf0>)
 800183e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001840:	4b1f      	ldr	r3, [pc, #124]	@ (80018c0 <HAL_InitTick+0xec>)
 8001842:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001846:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001848:	4a1d      	ldr	r2, [pc, #116]	@ (80018c0 <HAL_InitTick+0xec>)
 800184a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800184c:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800184e:	4b1c      	ldr	r3, [pc, #112]	@ (80018c0 <HAL_InitTick+0xec>)
 8001850:	2200      	movs	r2, #0
 8001852:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001854:	4b1a      	ldr	r3, [pc, #104]	@ (80018c0 <HAL_InitTick+0xec>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800185a:	4b19      	ldr	r3, [pc, #100]	@ (80018c0 <HAL_InitTick+0xec>)
 800185c:	2200      	movs	r2, #0
 800185e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001860:	4817      	ldr	r0, [pc, #92]	@ (80018c0 <HAL_InitTick+0xec>)
 8001862:	f001 fdc5 	bl	80033f0 <HAL_TIM_Base_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800186c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001870:	2b00      	cmp	r3, #0
 8001872:	d11b      	bne.n	80018ac <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001874:	4812      	ldr	r0, [pc, #72]	@ (80018c0 <HAL_InitTick+0xec>)
 8001876:	f001 fe15 	bl	80034a4 <HAL_TIM_Base_Start_IT>
 800187a:	4603      	mov	r3, r0
 800187c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001880:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001884:	2b00      	cmp	r3, #0
 8001886:	d111      	bne.n	80018ac <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001888:	201e      	movs	r0, #30
 800188a:	f000 fa81 	bl	8001d90 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b0f      	cmp	r3, #15
 8001892:	d808      	bhi.n	80018a6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001894:	2200      	movs	r2, #0
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	201e      	movs	r0, #30
 800189a:	f000 fa5d 	bl	8001d58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800189e:	4a0a      	ldr	r2, [pc, #40]	@ (80018c8 <HAL_InitTick+0xf4>)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6013      	str	r3, [r2, #0]
 80018a4:	e002      	b.n	80018ac <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80018ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3738      	adds	r7, #56	@ 0x38
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40023800 	.word	0x40023800
 80018bc:	431bde83 	.word	0x431bde83
 80018c0:	200004f4 	.word	0x200004f4
 80018c4:	40000800 	.word	0x40000800
 80018c8:	20000004 	.word	0x20000004

080018cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018d0:	bf00      	nop
 80018d2:	e7fd      	b.n	80018d0 <NMI_Handler+0x4>

080018d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018d8:	bf00      	nop
 80018da:	e7fd      	b.n	80018d8 <HardFault_Handler+0x4>

080018dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e0:	bf00      	nop
 80018e2:	e7fd      	b.n	80018e0 <MemManage_Handler+0x4>

080018e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018e8:	bf00      	nop
 80018ea:	e7fd      	b.n	80018e8 <BusFault_Handler+0x4>

080018ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f0:	bf00      	nop
 80018f2:	e7fd      	b.n	80018f0 <UsageFault_Handler+0x4>

080018f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
	...

08001904 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001908:	4802      	ldr	r0, [pc, #8]	@ (8001914 <TIM4_IRQHandler+0x10>)
 800190a:	f001 fe3b 	bl	8003584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200004f4 	.word	0x200004f4

08001918 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return 1;
 800191c:	2301      	movs	r3, #1
}
 800191e:	4618      	mov	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <_kill>:

int _kill(int pid, int sig)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001932:	f004 fdb5 	bl	80064a0 <__errno>
 8001936:	4603      	mov	r3, r0
 8001938:	2216      	movs	r2, #22
 800193a:	601a      	str	r2, [r3, #0]
  return -1;
 800193c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001940:	4618      	mov	r0, r3
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <_exit>:

void _exit (int status)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001950:	f04f 31ff 	mov.w	r1, #4294967295
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff ffe7 	bl	8001928 <_kill>
  while (1) {}    /* Make sure we hang here */
 800195a:	bf00      	nop
 800195c:	e7fd      	b.n	800195a <_exit+0x12>

0800195e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b086      	sub	sp, #24
 8001962:	af00      	add	r7, sp, #0
 8001964:	60f8      	str	r0, [r7, #12]
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
 800196e:	e00a      	b.n	8001986 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001970:	f3af 8000 	nop.w
 8001974:	4601      	mov	r1, r0
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	1c5a      	adds	r2, r3, #1
 800197a:	60ba      	str	r2, [r7, #8]
 800197c:	b2ca      	uxtb	r2, r1
 800197e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	3301      	adds	r3, #1
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	697a      	ldr	r2, [r7, #20]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	429a      	cmp	r2, r3
 800198c:	dbf0      	blt.n	8001970 <_read+0x12>
  }

  return len;
 800198e:	687b      	ldr	r3, [r7, #4]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	e009      	b.n	80019be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	1c5a      	adds	r2, r3, #1
 80019ae:	60ba      	str	r2, [r7, #8]
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	3301      	adds	r3, #1
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	dbf1      	blt.n	80019aa <_write+0x12>
  }
  return len;
 80019c6:	687b      	ldr	r3, [r7, #4]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <_close>:

int _close(int file)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019dc:	4618      	mov	r0, r3
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019f8:	605a      	str	r2, [r3, #4]
  return 0;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <_isatty>:

int _isatty(int file)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a10:	2301      	movs	r3, #1
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b085      	sub	sp, #20
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	60f8      	str	r0, [r7, #12]
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a40:	4a14      	ldr	r2, [pc, #80]	@ (8001a94 <_sbrk+0x5c>)
 8001a42:	4b15      	ldr	r3, [pc, #84]	@ (8001a98 <_sbrk+0x60>)
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a4c:	4b13      	ldr	r3, [pc, #76]	@ (8001a9c <_sbrk+0x64>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d102      	bne.n	8001a5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a54:	4b11      	ldr	r3, [pc, #68]	@ (8001a9c <_sbrk+0x64>)
 8001a56:	4a12      	ldr	r2, [pc, #72]	@ (8001aa0 <_sbrk+0x68>)
 8001a58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a5a:	4b10      	ldr	r3, [pc, #64]	@ (8001a9c <_sbrk+0x64>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d207      	bcs.n	8001a78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a68:	f004 fd1a 	bl	80064a0 <__errno>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	220c      	movs	r2, #12
 8001a70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a72:	f04f 33ff 	mov.w	r3, #4294967295
 8001a76:	e009      	b.n	8001a8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a78:	4b08      	ldr	r3, [pc, #32]	@ (8001a9c <_sbrk+0x64>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a7e:	4b07      	ldr	r3, [pc, #28]	@ (8001a9c <_sbrk+0x64>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4413      	add	r3, r2
 8001a86:	4a05      	ldr	r2, [pc, #20]	@ (8001a9c <_sbrk+0x64>)
 8001a88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20020000 	.word	0x20020000
 8001a98:	00000400 	.word	0x00000400
 8001a9c:	2000053c 	.word	0x2000053c
 8001aa0:	200043e8 	.word	0x200043e8

08001aa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aa8:	4b06      	ldr	r3, [pc, #24]	@ (8001ac4 <SystemInit+0x20>)
 8001aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aae:	4a05      	ldr	r2, [pc, #20]	@ (8001ac4 <SystemInit+0x20>)
 8001ab0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ab4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ac8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b00 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001acc:	f7ff ffea 	bl	8001aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ad0:	480c      	ldr	r0, [pc, #48]	@ (8001b04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ad2:	490d      	ldr	r1, [pc, #52]	@ (8001b08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ad4:	4a0d      	ldr	r2, [pc, #52]	@ (8001b0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ad8:	e002      	b.n	8001ae0 <LoopCopyDataInit>

08001ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ade:	3304      	adds	r3, #4

08001ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ae4:	d3f9      	bcc.n	8001ada <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8001b10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ae8:	4c0a      	ldr	r4, [pc, #40]	@ (8001b14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aec:	e001      	b.n	8001af2 <LoopFillZerobss>

08001aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001af0:	3204      	adds	r2, #4

08001af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001af4:	d3fb      	bcc.n	8001aee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001af6:	f004 fcd9 	bl	80064ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001afa:	f7ff fc49 	bl	8001390 <main>
  bx  lr    
 8001afe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b08:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001b0c:	0800898c 	.word	0x0800898c
  ldr r2, =_sbss
 8001b10:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001b14:	200043e4 	.word	0x200043e4

08001b18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b18:	e7fe      	b.n	8001b18 <ADC_IRQHandler>
	...

08001b1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b20:	4b0e      	ldr	r3, [pc, #56]	@ (8001b5c <HAL_Init+0x40>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a0d      	ldr	r2, [pc, #52]	@ (8001b5c <HAL_Init+0x40>)
 8001b26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b5c <HAL_Init+0x40>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a0a      	ldr	r2, [pc, #40]	@ (8001b5c <HAL_Init+0x40>)
 8001b32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b38:	4b08      	ldr	r3, [pc, #32]	@ (8001b5c <HAL_Init+0x40>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a07      	ldr	r2, [pc, #28]	@ (8001b5c <HAL_Init+0x40>)
 8001b3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b44:	2003      	movs	r0, #3
 8001b46:	f000 f8fc 	bl	8001d42 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b4a:	200f      	movs	r0, #15
 8001b4c:	f7ff fe42 	bl	80017d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b50:	f7ff fdcc 	bl	80016ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40023c00 	.word	0x40023c00

08001b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b64:	4b06      	ldr	r3, [pc, #24]	@ (8001b80 <HAL_IncTick+0x20>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4b06      	ldr	r3, [pc, #24]	@ (8001b84 <HAL_IncTick+0x24>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4413      	add	r3, r2
 8001b70:	4a04      	ldr	r2, [pc, #16]	@ (8001b84 <HAL_IncTick+0x24>)
 8001b72:	6013      	str	r3, [r2, #0]
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	20000008 	.word	0x20000008
 8001b84:	20000540 	.word	0x20000540

08001b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b8c:	4b03      	ldr	r3, [pc, #12]	@ (8001b9c <HAL_GetTick+0x14>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	20000540 	.word	0x20000540

08001ba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ba8:	f7ff ffee 	bl	8001b88 <HAL_GetTick>
 8001bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb8:	d005      	beq.n	8001bc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bba:	4b0a      	ldr	r3, [pc, #40]	@ (8001be4 <HAL_Delay+0x44>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bc6:	bf00      	nop
 8001bc8:	f7ff ffde 	bl	8001b88 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d8f7      	bhi.n	8001bc8 <HAL_Delay+0x28>
  {
  }
}
 8001bd8:	bf00      	nop
 8001bda:	bf00      	nop
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000008 	.word	0x20000008

08001be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c2c <__NVIC_SetPriorityGrouping+0x44>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c04:	4013      	ands	r3, r2
 8001c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c1a:	4a04      	ldr	r2, [pc, #16]	@ (8001c2c <__NVIC_SetPriorityGrouping+0x44>)
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	60d3      	str	r3, [r2, #12]
}
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c34:	4b04      	ldr	r3, [pc, #16]	@ (8001c48 <__NVIC_GetPriorityGrouping+0x18>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	0a1b      	lsrs	r3, r3, #8
 8001c3a:	f003 0307 	and.w	r3, r3, #7
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	db0b      	blt.n	8001c76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	f003 021f 	and.w	r2, r3, #31
 8001c64:	4907      	ldr	r1, [pc, #28]	@ (8001c84 <__NVIC_EnableIRQ+0x38>)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	095b      	lsrs	r3, r3, #5
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	e000e100 	.word	0xe000e100

08001c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	6039      	str	r1, [r7, #0]
 8001c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	db0a      	blt.n	8001cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	490c      	ldr	r1, [pc, #48]	@ (8001cd4 <__NVIC_SetPriority+0x4c>)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	0112      	lsls	r2, r2, #4
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	440b      	add	r3, r1
 8001cac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb0:	e00a      	b.n	8001cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	4908      	ldr	r1, [pc, #32]	@ (8001cd8 <__NVIC_SetPriority+0x50>)
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	3b04      	subs	r3, #4
 8001cc0:	0112      	lsls	r2, r2, #4
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	761a      	strb	r2, [r3, #24]
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	e000e100 	.word	0xe000e100
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b089      	sub	sp, #36	@ 0x24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f1c3 0307 	rsb	r3, r3, #7
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	bf28      	it	cs
 8001cfa:	2304      	movcs	r3, #4
 8001cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	3304      	adds	r3, #4
 8001d02:	2b06      	cmp	r3, #6
 8001d04:	d902      	bls.n	8001d0c <NVIC_EncodePriority+0x30>
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3b03      	subs	r3, #3
 8001d0a:	e000      	b.n	8001d0e <NVIC_EncodePriority+0x32>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d10:	f04f 32ff 	mov.w	r2, #4294967295
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43da      	mvns	r2, r3
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	401a      	ands	r2, r3
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d24:	f04f 31ff 	mov.w	r1, #4294967295
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2e:	43d9      	mvns	r1, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d34:	4313      	orrs	r3, r2
         );
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3724      	adds	r7, #36	@ 0x24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff ff4c 	bl	8001be8 <__NVIC_SetPriorityGrouping>
}
 8001d50:	bf00      	nop
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
 8001d64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d6a:	f7ff ff61 	bl	8001c30 <__NVIC_GetPriorityGrouping>
 8001d6e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	68b9      	ldr	r1, [r7, #8]
 8001d74:	6978      	ldr	r0, [r7, #20]
 8001d76:	f7ff ffb1 	bl	8001cdc <NVIC_EncodePriority>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d80:	4611      	mov	r1, r2
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff ff80 	bl	8001c88 <__NVIC_SetPriority>
}
 8001d88:	bf00      	nop
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff ff54 	bl	8001c4c <__NVIC_EnableIRQ>
}
 8001da4:	bf00      	nop
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b089      	sub	sp, #36	@ 0x24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61fb      	str	r3, [r7, #28]
 8001dc6:	e16b      	b.n	80020a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dc8:	2201      	movs	r2, #1
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	f040 815a 	bne.w	800209a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f003 0303 	and.w	r3, r3, #3
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d005      	beq.n	8001dfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d130      	bne.n	8001e60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	2203      	movs	r2, #3
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4013      	ands	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e34:	2201      	movs	r2, #1
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4013      	ands	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	091b      	lsrs	r3, r3, #4
 8001e4a:	f003 0201 	and.w	r2, r3, #1
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f003 0303 	and.w	r3, r3, #3
 8001e68:	2b03      	cmp	r3, #3
 8001e6a:	d017      	beq.n	8001e9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	2203      	movs	r2, #3
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d123      	bne.n	8001ef0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	08da      	lsrs	r2, r3, #3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3208      	adds	r2, #8
 8001eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	220f      	movs	r2, #15
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	691a      	ldr	r2, [r3, #16]
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	08da      	lsrs	r2, r3, #3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	3208      	adds	r2, #8
 8001eea:	69b9      	ldr	r1, [r7, #24]
 8001eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	2203      	movs	r2, #3
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4013      	ands	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 0203 	and.w	r2, r3, #3
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 80b4 	beq.w	800209a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	4b60      	ldr	r3, [pc, #384]	@ (80020b8 <HAL_GPIO_Init+0x30c>)
 8001f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3a:	4a5f      	ldr	r2, [pc, #380]	@ (80020b8 <HAL_GPIO_Init+0x30c>)
 8001f3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f40:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f42:	4b5d      	ldr	r3, [pc, #372]	@ (80020b8 <HAL_GPIO_Init+0x30c>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f4e:	4a5b      	ldr	r2, [pc, #364]	@ (80020bc <HAL_GPIO_Init+0x310>)
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	089b      	lsrs	r3, r3, #2
 8001f54:	3302      	adds	r3, #2
 8001f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f003 0303 	and.w	r3, r3, #3
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	220f      	movs	r2, #15
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a52      	ldr	r2, [pc, #328]	@ (80020c0 <HAL_GPIO_Init+0x314>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d02b      	beq.n	8001fd2 <HAL_GPIO_Init+0x226>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a51      	ldr	r2, [pc, #324]	@ (80020c4 <HAL_GPIO_Init+0x318>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d025      	beq.n	8001fce <HAL_GPIO_Init+0x222>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a50      	ldr	r2, [pc, #320]	@ (80020c8 <HAL_GPIO_Init+0x31c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d01f      	beq.n	8001fca <HAL_GPIO_Init+0x21e>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a4f      	ldr	r2, [pc, #316]	@ (80020cc <HAL_GPIO_Init+0x320>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d019      	beq.n	8001fc6 <HAL_GPIO_Init+0x21a>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a4e      	ldr	r2, [pc, #312]	@ (80020d0 <HAL_GPIO_Init+0x324>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d013      	beq.n	8001fc2 <HAL_GPIO_Init+0x216>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a4d      	ldr	r2, [pc, #308]	@ (80020d4 <HAL_GPIO_Init+0x328>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d00d      	beq.n	8001fbe <HAL_GPIO_Init+0x212>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a4c      	ldr	r2, [pc, #304]	@ (80020d8 <HAL_GPIO_Init+0x32c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d007      	beq.n	8001fba <HAL_GPIO_Init+0x20e>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a4b      	ldr	r2, [pc, #300]	@ (80020dc <HAL_GPIO_Init+0x330>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d101      	bne.n	8001fb6 <HAL_GPIO_Init+0x20a>
 8001fb2:	2307      	movs	r3, #7
 8001fb4:	e00e      	b.n	8001fd4 <HAL_GPIO_Init+0x228>
 8001fb6:	2308      	movs	r3, #8
 8001fb8:	e00c      	b.n	8001fd4 <HAL_GPIO_Init+0x228>
 8001fba:	2306      	movs	r3, #6
 8001fbc:	e00a      	b.n	8001fd4 <HAL_GPIO_Init+0x228>
 8001fbe:	2305      	movs	r3, #5
 8001fc0:	e008      	b.n	8001fd4 <HAL_GPIO_Init+0x228>
 8001fc2:	2304      	movs	r3, #4
 8001fc4:	e006      	b.n	8001fd4 <HAL_GPIO_Init+0x228>
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e004      	b.n	8001fd4 <HAL_GPIO_Init+0x228>
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e002      	b.n	8001fd4 <HAL_GPIO_Init+0x228>
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e000      	b.n	8001fd4 <HAL_GPIO_Init+0x228>
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	69fa      	ldr	r2, [r7, #28]
 8001fd6:	f002 0203 	and.w	r2, r2, #3
 8001fda:	0092      	lsls	r2, r2, #2
 8001fdc:	4093      	lsls	r3, r2
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fe4:	4935      	ldr	r1, [pc, #212]	@ (80020bc <HAL_GPIO_Init+0x310>)
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	089b      	lsrs	r3, r3, #2
 8001fea:	3302      	adds	r3, #2
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ff2:	4b3b      	ldr	r3, [pc, #236]	@ (80020e0 <HAL_GPIO_Init+0x334>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4013      	ands	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002016:	4a32      	ldr	r2, [pc, #200]	@ (80020e0 <HAL_GPIO_Init+0x334>)
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800201c:	4b30      	ldr	r3, [pc, #192]	@ (80020e0 <HAL_GPIO_Init+0x334>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	43db      	mvns	r3, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4013      	ands	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	4313      	orrs	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002040:	4a27      	ldr	r2, [pc, #156]	@ (80020e0 <HAL_GPIO_Init+0x334>)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002046:	4b26      	ldr	r3, [pc, #152]	@ (80020e0 <HAL_GPIO_Init+0x334>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	43db      	mvns	r3, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4013      	ands	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4313      	orrs	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800206a:	4a1d      	ldr	r2, [pc, #116]	@ (80020e0 <HAL_GPIO_Init+0x334>)
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002070:	4b1b      	ldr	r3, [pc, #108]	@ (80020e0 <HAL_GPIO_Init+0x334>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	43db      	mvns	r3, r3
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4013      	ands	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002094:	4a12      	ldr	r2, [pc, #72]	@ (80020e0 <HAL_GPIO_Init+0x334>)
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3301      	adds	r3, #1
 800209e:	61fb      	str	r3, [r7, #28]
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	2b0f      	cmp	r3, #15
 80020a4:	f67f ae90 	bls.w	8001dc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020a8:	bf00      	nop
 80020aa:	bf00      	nop
 80020ac:	3724      	adds	r7, #36	@ 0x24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40013800 	.word	0x40013800
 80020c0:	40020000 	.word	0x40020000
 80020c4:	40020400 	.word	0x40020400
 80020c8:	40020800 	.word	0x40020800
 80020cc:	40020c00 	.word	0x40020c00
 80020d0:	40021000 	.word	0x40021000
 80020d4:	40021400 	.word	0x40021400
 80020d8:	40021800 	.word	0x40021800
 80020dc:	40021c00 	.word	0x40021c00
 80020e0:	40013c00 	.word	0x40013c00

080020e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691a      	ldr	r2, [r3, #16]
 80020f4:	887b      	ldrh	r3, [r7, #2]
 80020f6:	4013      	ands	r3, r2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d002      	beq.n	8002102 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020fc:	2301      	movs	r3, #1
 80020fe:	73fb      	strb	r3, [r7, #15]
 8002100:	e001      	b.n	8002106 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002102:	2300      	movs	r3, #0
 8002104:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002106:	7bfb      	ldrb	r3, [r7, #15]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	807b      	strh	r3, [r7, #2]
 8002120:	4613      	mov	r3, r2
 8002122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002124:	787b      	ldrb	r3, [r7, #1]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800212a:	887a      	ldrh	r2, [r7, #2]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002130:	e003      	b.n	800213a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002132:	887b      	ldrh	r3, [r7, #2]
 8002134:	041a      	lsls	r2, r3, #16
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	619a      	str	r2, [r3, #24]
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
	...

08002148 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e12b      	b.n	80023b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d106      	bne.n	8002174 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff fae8 	bl	8001744 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2224      	movs	r2, #36	@ 0x24
 8002178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 0201 	bic.w	r2, r2, #1
 800218a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800219a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021ac:	f001 f8da 	bl	8003364 <HAL_RCC_GetPCLK1Freq>
 80021b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	4a81      	ldr	r2, [pc, #516]	@ (80023bc <HAL_I2C_Init+0x274>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d807      	bhi.n	80021cc <HAL_I2C_Init+0x84>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4a80      	ldr	r2, [pc, #512]	@ (80023c0 <HAL_I2C_Init+0x278>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	bf94      	ite	ls
 80021c4:	2301      	movls	r3, #1
 80021c6:	2300      	movhi	r3, #0
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	e006      	b.n	80021da <HAL_I2C_Init+0x92>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4a7d      	ldr	r2, [pc, #500]	@ (80023c4 <HAL_I2C_Init+0x27c>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	bf94      	ite	ls
 80021d4:	2301      	movls	r3, #1
 80021d6:	2300      	movhi	r3, #0
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e0e7      	b.n	80023b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	4a78      	ldr	r2, [pc, #480]	@ (80023c8 <HAL_I2C_Init+0x280>)
 80021e6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ea:	0c9b      	lsrs	r3, r3, #18
 80021ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68ba      	ldr	r2, [r7, #8]
 80021fe:	430a      	orrs	r2, r1
 8002200:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	4a6a      	ldr	r2, [pc, #424]	@ (80023bc <HAL_I2C_Init+0x274>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d802      	bhi.n	800221c <HAL_I2C_Init+0xd4>
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	3301      	adds	r3, #1
 800221a:	e009      	b.n	8002230 <HAL_I2C_Init+0xe8>
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002222:	fb02 f303 	mul.w	r3, r2, r3
 8002226:	4a69      	ldr	r2, [pc, #420]	@ (80023cc <HAL_I2C_Init+0x284>)
 8002228:	fba2 2303 	umull	r2, r3, r2, r3
 800222c:	099b      	lsrs	r3, r3, #6
 800222e:	3301      	adds	r3, #1
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	6812      	ldr	r2, [r2, #0]
 8002234:	430b      	orrs	r3, r1
 8002236:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002242:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	495c      	ldr	r1, [pc, #368]	@ (80023bc <HAL_I2C_Init+0x274>)
 800224c:	428b      	cmp	r3, r1
 800224e:	d819      	bhi.n	8002284 <HAL_I2C_Init+0x13c>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	1e59      	subs	r1, r3, #1
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	fbb1 f3f3 	udiv	r3, r1, r3
 800225e:	1c59      	adds	r1, r3, #1
 8002260:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002264:	400b      	ands	r3, r1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00a      	beq.n	8002280 <HAL_I2C_Init+0x138>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	1e59      	subs	r1, r3, #1
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	fbb1 f3f3 	udiv	r3, r1, r3
 8002278:	3301      	adds	r3, #1
 800227a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800227e:	e051      	b.n	8002324 <HAL_I2C_Init+0x1dc>
 8002280:	2304      	movs	r3, #4
 8002282:	e04f      	b.n	8002324 <HAL_I2C_Init+0x1dc>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d111      	bne.n	80022b0 <HAL_I2C_Init+0x168>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	1e58      	subs	r0, r3, #1
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6859      	ldr	r1, [r3, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	440b      	add	r3, r1
 800229a:	fbb0 f3f3 	udiv	r3, r0, r3
 800229e:	3301      	adds	r3, #1
 80022a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	bf0c      	ite	eq
 80022a8:	2301      	moveq	r3, #1
 80022aa:	2300      	movne	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	e012      	b.n	80022d6 <HAL_I2C_Init+0x18e>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	1e58      	subs	r0, r3, #1
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6859      	ldr	r1, [r3, #4]
 80022b8:	460b      	mov	r3, r1
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	440b      	add	r3, r1
 80022be:	0099      	lsls	r1, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022c6:	3301      	adds	r3, #1
 80022c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	bf0c      	ite	eq
 80022d0:	2301      	moveq	r3, #1
 80022d2:	2300      	movne	r3, #0
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_I2C_Init+0x196>
 80022da:	2301      	movs	r3, #1
 80022dc:	e022      	b.n	8002324 <HAL_I2C_Init+0x1dc>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10e      	bne.n	8002304 <HAL_I2C_Init+0x1bc>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	1e58      	subs	r0, r3, #1
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6859      	ldr	r1, [r3, #4]
 80022ee:	460b      	mov	r3, r1
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	440b      	add	r3, r1
 80022f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80022f8:	3301      	adds	r3, #1
 80022fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002302:	e00f      	b.n	8002324 <HAL_I2C_Init+0x1dc>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	1e58      	subs	r0, r3, #1
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6859      	ldr	r1, [r3, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	440b      	add	r3, r1
 8002312:	0099      	lsls	r1, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	fbb0 f3f3 	udiv	r3, r0, r3
 800231a:	3301      	adds	r3, #1
 800231c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002320:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	6809      	ldr	r1, [r1, #0]
 8002328:	4313      	orrs	r3, r2
 800232a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69da      	ldr	r2, [r3, #28]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002352:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	6911      	ldr	r1, [r2, #16]
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	68d2      	ldr	r2, [r2, #12]
 800235e:	4311      	orrs	r1, r2
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	6812      	ldr	r2, [r2, #0]
 8002364:	430b      	orrs	r3, r1
 8002366:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	695a      	ldr	r2, [r3, #20]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	431a      	orrs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	430a      	orrs	r2, r1
 8002382:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0201 	orr.w	r2, r2, #1
 8002392:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2220      	movs	r2, #32
 800239e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	000186a0 	.word	0x000186a0
 80023c0:	001e847f 	.word	0x001e847f
 80023c4:	003d08ff 	.word	0x003d08ff
 80023c8:	431bde83 	.word	0x431bde83
 80023cc:	10624dd3 	.word	0x10624dd3

080023d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b088      	sub	sp, #32
 80023d4:	af02      	add	r7, sp, #8
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	607a      	str	r2, [r7, #4]
 80023da:	461a      	mov	r2, r3
 80023dc:	460b      	mov	r3, r1
 80023de:	817b      	strh	r3, [r7, #10]
 80023e0:	4613      	mov	r3, r2
 80023e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023e4:	f7ff fbd0 	bl	8001b88 <HAL_GetTick>
 80023e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b20      	cmp	r3, #32
 80023f4:	f040 80e0 	bne.w	80025b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	2319      	movs	r3, #25
 80023fe:	2201      	movs	r2, #1
 8002400:	4970      	ldr	r1, [pc, #448]	@ (80025c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f000 f964 	bl	80026d0 <I2C_WaitOnFlagUntilTimeout>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800240e:	2302      	movs	r3, #2
 8002410:	e0d3      	b.n	80025ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002418:	2b01      	cmp	r3, #1
 800241a:	d101      	bne.n	8002420 <HAL_I2C_Master_Transmit+0x50>
 800241c:	2302      	movs	r3, #2
 800241e:	e0cc      	b.n	80025ba <HAL_I2C_Master_Transmit+0x1ea>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b01      	cmp	r3, #1
 8002434:	d007      	beq.n	8002446 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f042 0201 	orr.w	r2, r2, #1
 8002444:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002454:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2221      	movs	r2, #33	@ 0x21
 800245a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2210      	movs	r2, #16
 8002462:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	893a      	ldrh	r2, [r7, #8]
 8002476:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800247c:	b29a      	uxth	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	4a50      	ldr	r2, [pc, #320]	@ (80025c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002486:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002488:	8979      	ldrh	r1, [r7, #10]
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	6a3a      	ldr	r2, [r7, #32]
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f000 f89c 	bl	80025cc <I2C_MasterRequestWrite>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e08d      	b.n	80025ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800249e:	2300      	movs	r3, #0
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	613b      	str	r3, [r7, #16]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	613b      	str	r3, [r7, #16]
 80024b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024b4:	e066      	b.n	8002584 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	6a39      	ldr	r1, [r7, #32]
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f000 fa22 	bl	8002904 <I2C_WaitOnTXEFlagUntilTimeout>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00d      	beq.n	80024e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d107      	bne.n	80024de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e06b      	b.n	80025ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e6:	781a      	ldrb	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f2:	1c5a      	adds	r2, r3, #1
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	3b01      	subs	r3, #1
 8002500:	b29a      	uxth	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800250a:	3b01      	subs	r3, #1
 800250c:	b29a      	uxth	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b04      	cmp	r3, #4
 800251e:	d11b      	bne.n	8002558 <HAL_I2C_Master_Transmit+0x188>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002524:	2b00      	cmp	r3, #0
 8002526:	d017      	beq.n	8002558 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252c:	781a      	ldrb	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002538:	1c5a      	adds	r2, r3, #1
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002542:	b29b      	uxth	r3, r3
 8002544:	3b01      	subs	r3, #1
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002550:	3b01      	subs	r3, #1
 8002552:	b29a      	uxth	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	6a39      	ldr	r1, [r7, #32]
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f000 fa19 	bl	8002994 <I2C_WaitOnBTFFlagUntilTimeout>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00d      	beq.n	8002584 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256c:	2b04      	cmp	r3, #4
 800256e:	d107      	bne.n	8002580 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800257e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e01a      	b.n	80025ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002588:	2b00      	cmp	r3, #0
 800258a:	d194      	bne.n	80024b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800259a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2220      	movs	r2, #32
 80025a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	e000      	b.n	80025ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025b8:	2302      	movs	r3, #2
  }
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	00100002 	.word	0x00100002
 80025c8:	ffff0000 	.word	0xffff0000

080025cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af02      	add	r7, sp, #8
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	607a      	str	r2, [r7, #4]
 80025d6:	603b      	str	r3, [r7, #0]
 80025d8:	460b      	mov	r3, r1
 80025da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	2b08      	cmp	r3, #8
 80025e6:	d006      	beq.n	80025f6 <I2C_MasterRequestWrite+0x2a>
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d003      	beq.n	80025f6 <I2C_MasterRequestWrite+0x2a>
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80025f4:	d108      	bne.n	8002608 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	e00b      	b.n	8002620 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260c:	2b12      	cmp	r3, #18
 800260e:	d107      	bne.n	8002620 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800261e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f000 f84f 	bl	80026d0 <I2C_WaitOnFlagUntilTimeout>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00d      	beq.n	8002654 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002642:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002646:	d103      	bne.n	8002650 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800264e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e035      	b.n	80026c0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800265c:	d108      	bne.n	8002670 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800265e:	897b      	ldrh	r3, [r7, #10]
 8002660:	b2db      	uxtb	r3, r3
 8002662:	461a      	mov	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800266c:	611a      	str	r2, [r3, #16]
 800266e:	e01b      	b.n	80026a8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002670:	897b      	ldrh	r3, [r7, #10]
 8002672:	11db      	asrs	r3, r3, #7
 8002674:	b2db      	uxtb	r3, r3
 8002676:	f003 0306 	and.w	r3, r3, #6
 800267a:	b2db      	uxtb	r3, r3
 800267c:	f063 030f 	orn	r3, r3, #15
 8002680:	b2da      	uxtb	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	490e      	ldr	r1, [pc, #56]	@ (80026c8 <I2C_MasterRequestWrite+0xfc>)
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 f898 	bl	80027c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e010      	b.n	80026c0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800269e:	897b      	ldrh	r3, [r7, #10]
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	4907      	ldr	r1, [pc, #28]	@ (80026cc <I2C_MasterRequestWrite+0x100>)
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 f888 	bl	80027c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e000      	b.n	80026c0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	00010008 	.word	0x00010008
 80026cc:	00010002 	.word	0x00010002

080026d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	603b      	str	r3, [r7, #0]
 80026dc:	4613      	mov	r3, r2
 80026de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026e0:	e048      	b.n	8002774 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e8:	d044      	beq.n	8002774 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ea:	f7ff fa4d 	bl	8001b88 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d302      	bcc.n	8002700 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d139      	bne.n	8002774 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	0c1b      	lsrs	r3, r3, #16
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b01      	cmp	r3, #1
 8002708:	d10d      	bne.n	8002726 <I2C_WaitOnFlagUntilTimeout+0x56>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	43da      	mvns	r2, r3
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	4013      	ands	r3, r2
 8002716:	b29b      	uxth	r3, r3
 8002718:	2b00      	cmp	r3, #0
 800271a:	bf0c      	ite	eq
 800271c:	2301      	moveq	r3, #1
 800271e:	2300      	movne	r3, #0
 8002720:	b2db      	uxtb	r3, r3
 8002722:	461a      	mov	r2, r3
 8002724:	e00c      	b.n	8002740 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	43da      	mvns	r2, r3
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	4013      	ands	r3, r2
 8002732:	b29b      	uxth	r3, r3
 8002734:	2b00      	cmp	r3, #0
 8002736:	bf0c      	ite	eq
 8002738:	2301      	moveq	r3, #1
 800273a:	2300      	movne	r3, #0
 800273c:	b2db      	uxtb	r3, r3
 800273e:	461a      	mov	r2, r3
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	429a      	cmp	r2, r3
 8002744:	d116      	bne.n	8002774 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2220      	movs	r2, #32
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002760:	f043 0220 	orr.w	r2, r3, #32
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e023      	b.n	80027bc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	0c1b      	lsrs	r3, r3, #16
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b01      	cmp	r3, #1
 800277c:	d10d      	bne.n	800279a <I2C_WaitOnFlagUntilTimeout+0xca>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	43da      	mvns	r2, r3
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	4013      	ands	r3, r2
 800278a:	b29b      	uxth	r3, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	bf0c      	ite	eq
 8002790:	2301      	moveq	r3, #1
 8002792:	2300      	movne	r3, #0
 8002794:	b2db      	uxtb	r3, r3
 8002796:	461a      	mov	r2, r3
 8002798:	e00c      	b.n	80027b4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	43da      	mvns	r2, r3
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	4013      	ands	r3, r2
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	bf0c      	ite	eq
 80027ac:	2301      	moveq	r3, #1
 80027ae:	2300      	movne	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	461a      	mov	r2, r3
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d093      	beq.n	80026e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
 80027d0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027d2:	e071      	b.n	80028b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027e2:	d123      	bne.n	800282c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027f2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80027fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2220      	movs	r2, #32
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002818:	f043 0204 	orr.w	r2, r3, #4
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e067      	b.n	80028fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002832:	d041      	beq.n	80028b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002834:	f7ff f9a8 	bl	8001b88 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	429a      	cmp	r2, r3
 8002842:	d302      	bcc.n	800284a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d136      	bne.n	80028b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	0c1b      	lsrs	r3, r3, #16
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b01      	cmp	r3, #1
 8002852:	d10c      	bne.n	800286e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	43da      	mvns	r2, r3
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	4013      	ands	r3, r2
 8002860:	b29b      	uxth	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	bf14      	ite	ne
 8002866:	2301      	movne	r3, #1
 8002868:	2300      	moveq	r3, #0
 800286a:	b2db      	uxtb	r3, r3
 800286c:	e00b      	b.n	8002886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	43da      	mvns	r2, r3
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	4013      	ands	r3, r2
 800287a:	b29b      	uxth	r3, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	bf14      	ite	ne
 8002880:	2301      	movne	r3, #1
 8002882:	2300      	moveq	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d016      	beq.n	80028b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2220      	movs	r2, #32
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a4:	f043 0220 	orr.w	r2, r3, #32
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e021      	b.n	80028fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	0c1b      	lsrs	r3, r3, #16
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d10c      	bne.n	80028dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	43da      	mvns	r2, r3
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	4013      	ands	r3, r2
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	bf14      	ite	ne
 80028d4:	2301      	movne	r3, #1
 80028d6:	2300      	moveq	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	e00b      	b.n	80028f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	43da      	mvns	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	4013      	ands	r3, r2
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	bf14      	ite	ne
 80028ee:	2301      	movne	r3, #1
 80028f0:	2300      	moveq	r3, #0
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f47f af6d 	bne.w	80027d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002910:	e034      	b.n	800297c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 f886 	bl	8002a24 <I2C_IsAcknowledgeFailed>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e034      	b.n	800298c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002928:	d028      	beq.n	800297c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800292a:	f7ff f92d 	bl	8001b88 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	429a      	cmp	r2, r3
 8002938:	d302      	bcc.n	8002940 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d11d      	bne.n	800297c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800294a:	2b80      	cmp	r3, #128	@ 0x80
 800294c:	d016      	beq.n	800297c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2220      	movs	r2, #32
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002968:	f043 0220 	orr.w	r2, r3, #32
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e007      	b.n	800298c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002986:	2b80      	cmp	r3, #128	@ 0x80
 8002988:	d1c3      	bne.n	8002912 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029a0:	e034      	b.n	8002a0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 f83e 	bl	8002a24 <I2C_IsAcknowledgeFailed>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e034      	b.n	8002a1c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b8:	d028      	beq.n	8002a0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ba:	f7ff f8e5 	bl	8001b88 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d302      	bcc.n	80029d0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d11d      	bne.n	8002a0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	f003 0304 	and.w	r3, r3, #4
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d016      	beq.n	8002a0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2220      	movs	r2, #32
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f8:	f043 0220 	orr.w	r2, r3, #32
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e007      	b.n	8002a1c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d1c3      	bne.n	80029a2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a3a:	d11b      	bne.n	8002a74 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a44:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a60:	f043 0204 	orr.w	r2, r3, #4
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e000      	b.n	8002a76 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
	...

08002a84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e267      	b.n	8002f66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d075      	beq.n	8002b8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002aa2:	4b88      	ldr	r3, [pc, #544]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d00c      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aae:	4b85      	ldr	r3, [pc, #532]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002ab6:	2b08      	cmp	r3, #8
 8002ab8:	d112      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aba:	4b82      	ldr	r3, [pc, #520]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ac2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ac6:	d10b      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac8:	4b7e      	ldr	r3, [pc, #504]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d05b      	beq.n	8002b8c <HAL_RCC_OscConfig+0x108>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d157      	bne.n	8002b8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e242      	b.n	8002f66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ae8:	d106      	bne.n	8002af8 <HAL_RCC_OscConfig+0x74>
 8002aea:	4b76      	ldr	r3, [pc, #472]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a75      	ldr	r2, [pc, #468]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002af0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	e01d      	b.n	8002b34 <HAL_RCC_OscConfig+0xb0>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b00:	d10c      	bne.n	8002b1c <HAL_RCC_OscConfig+0x98>
 8002b02:	4b70      	ldr	r3, [pc, #448]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a6f      	ldr	r2, [pc, #444]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002b08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b0c:	6013      	str	r3, [r2, #0]
 8002b0e:	4b6d      	ldr	r3, [pc, #436]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a6c      	ldr	r2, [pc, #432]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002b14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	e00b      	b.n	8002b34 <HAL_RCC_OscConfig+0xb0>
 8002b1c:	4b69      	ldr	r3, [pc, #420]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a68      	ldr	r2, [pc, #416]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002b22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b26:	6013      	str	r3, [r2, #0]
 8002b28:	4b66      	ldr	r3, [pc, #408]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a65      	ldr	r2, [pc, #404]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002b2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d013      	beq.n	8002b64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3c:	f7ff f824 	bl	8001b88 <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b44:	f7ff f820 	bl	8001b88 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b64      	cmp	r3, #100	@ 0x64
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e207      	b.n	8002f66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b56:	4b5b      	ldr	r3, [pc, #364]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0f0      	beq.n	8002b44 <HAL_RCC_OscConfig+0xc0>
 8002b62:	e014      	b.n	8002b8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b64:	f7ff f810 	bl	8001b88 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b6c:	f7ff f80c 	bl	8001b88 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b64      	cmp	r3, #100	@ 0x64
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e1f3      	b.n	8002f66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b7e:	4b51      	ldr	r3, [pc, #324]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1f0      	bne.n	8002b6c <HAL_RCC_OscConfig+0xe8>
 8002b8a:	e000      	b.n	8002b8e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d063      	beq.n	8002c62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b9a:	4b4a      	ldr	r3, [pc, #296]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 030c 	and.w	r3, r3, #12
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00b      	beq.n	8002bbe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ba6:	4b47      	ldr	r3, [pc, #284]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002bae:	2b08      	cmp	r3, #8
 8002bb0:	d11c      	bne.n	8002bec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bb2:	4b44      	ldr	r3, [pc, #272]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d116      	bne.n	8002bec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bbe:	4b41      	ldr	r3, [pc, #260]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d005      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x152>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d001      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e1c7      	b.n	8002f66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd6:	4b3b      	ldr	r3, [pc, #236]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	4937      	ldr	r1, [pc, #220]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bea:	e03a      	b.n	8002c62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d020      	beq.n	8002c36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bf4:	4b34      	ldr	r3, [pc, #208]	@ (8002cc8 <HAL_RCC_OscConfig+0x244>)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfa:	f7fe ffc5 	bl	8001b88 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c02:	f7fe ffc1 	bl	8001b88 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e1a8      	b.n	8002f66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c14:	4b2b      	ldr	r3, [pc, #172]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0f0      	beq.n	8002c02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c20:	4b28      	ldr	r3, [pc, #160]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	4925      	ldr	r1, [pc, #148]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	600b      	str	r3, [r1, #0]
 8002c34:	e015      	b.n	8002c62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c36:	4b24      	ldr	r3, [pc, #144]	@ (8002cc8 <HAL_RCC_OscConfig+0x244>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3c:	f7fe ffa4 	bl	8001b88 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c44:	f7fe ffa0 	bl	8001b88 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e187      	b.n	8002f66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c56:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d036      	beq.n	8002cdc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d016      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c76:	4b15      	ldr	r3, [pc, #84]	@ (8002ccc <HAL_RCC_OscConfig+0x248>)
 8002c78:	2201      	movs	r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7c:	f7fe ff84 	bl	8001b88 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c84:	f7fe ff80 	bl	8001b88 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e167      	b.n	8002f66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c96:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002c98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0f0      	beq.n	8002c84 <HAL_RCC_OscConfig+0x200>
 8002ca2:	e01b      	b.n	8002cdc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ca4:	4b09      	ldr	r3, [pc, #36]	@ (8002ccc <HAL_RCC_OscConfig+0x248>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002caa:	f7fe ff6d 	bl	8001b88 <HAL_GetTick>
 8002cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb0:	e00e      	b.n	8002cd0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb2:	f7fe ff69 	bl	8001b88 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d907      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e150      	b.n	8002f66 <HAL_RCC_OscConfig+0x4e2>
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	42470000 	.word	0x42470000
 8002ccc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cd0:	4b88      	ldr	r3, [pc, #544]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002cd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1ea      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 8097 	beq.w	8002e18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cea:	2300      	movs	r3, #0
 8002cec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cee:	4b81      	ldr	r3, [pc, #516]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10f      	bne.n	8002d1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60bb      	str	r3, [r7, #8]
 8002cfe:	4b7d      	ldr	r3, [pc, #500]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d02:	4a7c      	ldr	r2, [pc, #496]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002d04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d08:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d0a:	4b7a      	ldr	r3, [pc, #488]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d12:	60bb      	str	r3, [r7, #8]
 8002d14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d16:	2301      	movs	r3, #1
 8002d18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1a:	4b77      	ldr	r3, [pc, #476]	@ (8002ef8 <HAL_RCC_OscConfig+0x474>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d118      	bne.n	8002d58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d26:	4b74      	ldr	r3, [pc, #464]	@ (8002ef8 <HAL_RCC_OscConfig+0x474>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a73      	ldr	r2, [pc, #460]	@ (8002ef8 <HAL_RCC_OscConfig+0x474>)
 8002d2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d32:	f7fe ff29 	bl	8001b88 <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d3a:	f7fe ff25 	bl	8001b88 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e10c      	b.n	8002f66 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d4c:	4b6a      	ldr	r3, [pc, #424]	@ (8002ef8 <HAL_RCC_OscConfig+0x474>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0f0      	beq.n	8002d3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d106      	bne.n	8002d6e <HAL_RCC_OscConfig+0x2ea>
 8002d60:	4b64      	ldr	r3, [pc, #400]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d64:	4a63      	ldr	r2, [pc, #396]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002d66:	f043 0301 	orr.w	r3, r3, #1
 8002d6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d6c:	e01c      	b.n	8002da8 <HAL_RCC_OscConfig+0x324>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	2b05      	cmp	r3, #5
 8002d74:	d10c      	bne.n	8002d90 <HAL_RCC_OscConfig+0x30c>
 8002d76:	4b5f      	ldr	r3, [pc, #380]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d7a:	4a5e      	ldr	r2, [pc, #376]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002d7c:	f043 0304 	orr.w	r3, r3, #4
 8002d80:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d82:	4b5c      	ldr	r3, [pc, #368]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d86:	4a5b      	ldr	r2, [pc, #364]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d8e:	e00b      	b.n	8002da8 <HAL_RCC_OscConfig+0x324>
 8002d90:	4b58      	ldr	r3, [pc, #352]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d94:	4a57      	ldr	r2, [pc, #348]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002d96:	f023 0301 	bic.w	r3, r3, #1
 8002d9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d9c:	4b55      	ldr	r3, [pc, #340]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002da0:	4a54      	ldr	r2, [pc, #336]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002da2:	f023 0304 	bic.w	r3, r3, #4
 8002da6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d015      	beq.n	8002ddc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db0:	f7fe feea 	bl	8001b88 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db6:	e00a      	b.n	8002dce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db8:	f7fe fee6 	bl	8001b88 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e0cb      	b.n	8002f66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dce:	4b49      	ldr	r3, [pc, #292]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0ee      	beq.n	8002db8 <HAL_RCC_OscConfig+0x334>
 8002dda:	e014      	b.n	8002e06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ddc:	f7fe fed4 	bl	8001b88 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de2:	e00a      	b.n	8002dfa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de4:	f7fe fed0 	bl	8001b88 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e0b5      	b.n	8002f66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dfa:	4b3e      	ldr	r3, [pc, #248]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1ee      	bne.n	8002de4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e06:	7dfb      	ldrb	r3, [r7, #23]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d105      	bne.n	8002e18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e0c:	4b39      	ldr	r3, [pc, #228]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e10:	4a38      	ldr	r2, [pc, #224]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002e12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e16:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 80a1 	beq.w	8002f64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e22:	4b34      	ldr	r3, [pc, #208]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 030c 	and.w	r3, r3, #12
 8002e2a:	2b08      	cmp	r3, #8
 8002e2c:	d05c      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d141      	bne.n	8002eba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e36:	4b31      	ldr	r3, [pc, #196]	@ (8002efc <HAL_RCC_OscConfig+0x478>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3c:	f7fe fea4 	bl	8001b88 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e44:	f7fe fea0 	bl	8001b88 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e087      	b.n	8002f66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e56:	4b27      	ldr	r3, [pc, #156]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f0      	bne.n	8002e44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69da      	ldr	r2, [r3, #28]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e70:	019b      	lsls	r3, r3, #6
 8002e72:	431a      	orrs	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e78:	085b      	lsrs	r3, r3, #1
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	041b      	lsls	r3, r3, #16
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e84:	061b      	lsls	r3, r3, #24
 8002e86:	491b      	ldr	r1, [pc, #108]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002efc <HAL_RCC_OscConfig+0x478>)
 8002e8e:	2201      	movs	r2, #1
 8002e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e92:	f7fe fe79 	bl	8001b88 <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e98:	e008      	b.n	8002eac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e9a:	f7fe fe75 	bl	8001b88 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e05c      	b.n	8002f66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eac:	4b11      	ldr	r3, [pc, #68]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0f0      	beq.n	8002e9a <HAL_RCC_OscConfig+0x416>
 8002eb8:	e054      	b.n	8002f64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eba:	4b10      	ldr	r3, [pc, #64]	@ (8002efc <HAL_RCC_OscConfig+0x478>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec0:	f7fe fe62 	bl	8001b88 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec8:	f7fe fe5e 	bl	8001b88 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e045      	b.n	8002f66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eda:	4b06      	ldr	r3, [pc, #24]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f0      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x444>
 8002ee6:	e03d      	b.n	8002f64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d107      	bne.n	8002f00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e038      	b.n	8002f66 <HAL_RCC_OscConfig+0x4e2>
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	40007000 	.word	0x40007000
 8002efc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f00:	4b1b      	ldr	r3, [pc, #108]	@ (8002f70 <HAL_RCC_OscConfig+0x4ec>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d028      	beq.n	8002f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d121      	bne.n	8002f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d11a      	bne.n	8002f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f30:	4013      	ands	r3, r2
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d111      	bne.n	8002f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f46:	085b      	lsrs	r3, r3, #1
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d107      	bne.n	8002f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d001      	beq.n	8002f64 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e000      	b.n	8002f66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3718      	adds	r7, #24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	40023800 	.word	0x40023800

08002f74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e0cc      	b.n	8003122 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f88:	4b68      	ldr	r3, [pc, #416]	@ (800312c <HAL_RCC_ClockConfig+0x1b8>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d90c      	bls.n	8002fb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f96:	4b65      	ldr	r3, [pc, #404]	@ (800312c <HAL_RCC_ClockConfig+0x1b8>)
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9e:	4b63      	ldr	r3, [pc, #396]	@ (800312c <HAL_RCC_ClockConfig+0x1b8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d001      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e0b8      	b.n	8003122 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d020      	beq.n	8002ffe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d005      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fc8:	4b59      	ldr	r3, [pc, #356]	@ (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	4a58      	ldr	r2, [pc, #352]	@ (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8002fce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002fd2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0308 	and.w	r3, r3, #8
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d005      	beq.n	8002fec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fe0:	4b53      	ldr	r3, [pc, #332]	@ (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	4a52      	ldr	r2, [pc, #328]	@ (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002fea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fec:	4b50      	ldr	r3, [pc, #320]	@ (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	494d      	ldr	r1, [pc, #308]	@ (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	d044      	beq.n	8003094 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d107      	bne.n	8003022 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003012:	4b47      	ldr	r3, [pc, #284]	@ (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d119      	bne.n	8003052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e07f      	b.n	8003122 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b02      	cmp	r3, #2
 8003028:	d003      	beq.n	8003032 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800302e:	2b03      	cmp	r3, #3
 8003030:	d107      	bne.n	8003042 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003032:	4b3f      	ldr	r3, [pc, #252]	@ (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d109      	bne.n	8003052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e06f      	b.n	8003122 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003042:	4b3b      	ldr	r3, [pc, #236]	@ (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e067      	b.n	8003122 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003052:	4b37      	ldr	r3, [pc, #220]	@ (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f023 0203 	bic.w	r2, r3, #3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	4934      	ldr	r1, [pc, #208]	@ (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8003060:	4313      	orrs	r3, r2
 8003062:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003064:	f7fe fd90 	bl	8001b88 <HAL_GetTick>
 8003068:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306a:	e00a      	b.n	8003082 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800306c:	f7fe fd8c 	bl	8001b88 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	f241 3288 	movw	r2, #5000	@ 0x1388
 800307a:	4293      	cmp	r3, r2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e04f      	b.n	8003122 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003082:	4b2b      	ldr	r3, [pc, #172]	@ (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 020c 	and.w	r2, r3, #12
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	429a      	cmp	r2, r3
 8003092:	d1eb      	bne.n	800306c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003094:	4b25      	ldr	r3, [pc, #148]	@ (800312c <HAL_RCC_ClockConfig+0x1b8>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d20c      	bcs.n	80030bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a2:	4b22      	ldr	r3, [pc, #136]	@ (800312c <HAL_RCC_ClockConfig+0x1b8>)
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	b2d2      	uxtb	r2, r2
 80030a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030aa:	4b20      	ldr	r3, [pc, #128]	@ (800312c <HAL_RCC_ClockConfig+0x1b8>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0307 	and.w	r3, r3, #7
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d001      	beq.n	80030bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e032      	b.n	8003122 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d008      	beq.n	80030da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030c8:	4b19      	ldr	r3, [pc, #100]	@ (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	4916      	ldr	r1, [pc, #88]	@ (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0308 	and.w	r3, r3, #8
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d009      	beq.n	80030fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030e6:	4b12      	ldr	r3, [pc, #72]	@ (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	490e      	ldr	r1, [pc, #56]	@ (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030fa:	f000 f821 	bl	8003140 <HAL_RCC_GetSysClockFreq>
 80030fe:	4602      	mov	r2, r0
 8003100:	4b0b      	ldr	r3, [pc, #44]	@ (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	091b      	lsrs	r3, r3, #4
 8003106:	f003 030f 	and.w	r3, r3, #15
 800310a:	490a      	ldr	r1, [pc, #40]	@ (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 800310c:	5ccb      	ldrb	r3, [r1, r3]
 800310e:	fa22 f303 	lsr.w	r3, r2, r3
 8003112:	4a09      	ldr	r2, [pc, #36]	@ (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8003114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003116:	4b09      	ldr	r3, [pc, #36]	@ (800313c <HAL_RCC_ClockConfig+0x1c8>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f7fe fb5a 	bl	80017d4 <HAL_InitTick>

  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	40023c00 	.word	0x40023c00
 8003130:	40023800 	.word	0x40023800
 8003134:	080085ec 	.word	0x080085ec
 8003138:	20000000 	.word	0x20000000
 800313c:	20000004 	.word	0x20000004

08003140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003140:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003144:	b094      	sub	sp, #80	@ 0x50
 8003146:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003148:	2300      	movs	r3, #0
 800314a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800314c:	2300      	movs	r3, #0
 800314e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003150:	2300      	movs	r3, #0
 8003152:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003154:	2300      	movs	r3, #0
 8003156:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003158:	4b79      	ldr	r3, [pc, #484]	@ (8003340 <HAL_RCC_GetSysClockFreq+0x200>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 030c 	and.w	r3, r3, #12
 8003160:	2b08      	cmp	r3, #8
 8003162:	d00d      	beq.n	8003180 <HAL_RCC_GetSysClockFreq+0x40>
 8003164:	2b08      	cmp	r3, #8
 8003166:	f200 80e1 	bhi.w	800332c <HAL_RCC_GetSysClockFreq+0x1ec>
 800316a:	2b00      	cmp	r3, #0
 800316c:	d002      	beq.n	8003174 <HAL_RCC_GetSysClockFreq+0x34>
 800316e:	2b04      	cmp	r3, #4
 8003170:	d003      	beq.n	800317a <HAL_RCC_GetSysClockFreq+0x3a>
 8003172:	e0db      	b.n	800332c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003174:	4b73      	ldr	r3, [pc, #460]	@ (8003344 <HAL_RCC_GetSysClockFreq+0x204>)
 8003176:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003178:	e0db      	b.n	8003332 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800317a:	4b73      	ldr	r3, [pc, #460]	@ (8003348 <HAL_RCC_GetSysClockFreq+0x208>)
 800317c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800317e:	e0d8      	b.n	8003332 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003180:	4b6f      	ldr	r3, [pc, #444]	@ (8003340 <HAL_RCC_GetSysClockFreq+0x200>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003188:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800318a:	4b6d      	ldr	r3, [pc, #436]	@ (8003340 <HAL_RCC_GetSysClockFreq+0x200>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d063      	beq.n	800325e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003196:	4b6a      	ldr	r3, [pc, #424]	@ (8003340 <HAL_RCC_GetSysClockFreq+0x200>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	099b      	lsrs	r3, r3, #6
 800319c:	2200      	movs	r2, #0
 800319e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80031a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80031a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80031aa:	2300      	movs	r3, #0
 80031ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80031ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80031b2:	4622      	mov	r2, r4
 80031b4:	462b      	mov	r3, r5
 80031b6:	f04f 0000 	mov.w	r0, #0
 80031ba:	f04f 0100 	mov.w	r1, #0
 80031be:	0159      	lsls	r1, r3, #5
 80031c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031c4:	0150      	lsls	r0, r2, #5
 80031c6:	4602      	mov	r2, r0
 80031c8:	460b      	mov	r3, r1
 80031ca:	4621      	mov	r1, r4
 80031cc:	1a51      	subs	r1, r2, r1
 80031ce:	6139      	str	r1, [r7, #16]
 80031d0:	4629      	mov	r1, r5
 80031d2:	eb63 0301 	sbc.w	r3, r3, r1
 80031d6:	617b      	str	r3, [r7, #20]
 80031d8:	f04f 0200 	mov.w	r2, #0
 80031dc:	f04f 0300 	mov.w	r3, #0
 80031e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031e4:	4659      	mov	r1, fp
 80031e6:	018b      	lsls	r3, r1, #6
 80031e8:	4651      	mov	r1, sl
 80031ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031ee:	4651      	mov	r1, sl
 80031f0:	018a      	lsls	r2, r1, #6
 80031f2:	4651      	mov	r1, sl
 80031f4:	ebb2 0801 	subs.w	r8, r2, r1
 80031f8:	4659      	mov	r1, fp
 80031fa:	eb63 0901 	sbc.w	r9, r3, r1
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	f04f 0300 	mov.w	r3, #0
 8003206:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800320a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800320e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003212:	4690      	mov	r8, r2
 8003214:	4699      	mov	r9, r3
 8003216:	4623      	mov	r3, r4
 8003218:	eb18 0303 	adds.w	r3, r8, r3
 800321c:	60bb      	str	r3, [r7, #8]
 800321e:	462b      	mov	r3, r5
 8003220:	eb49 0303 	adc.w	r3, r9, r3
 8003224:	60fb      	str	r3, [r7, #12]
 8003226:	f04f 0200 	mov.w	r2, #0
 800322a:	f04f 0300 	mov.w	r3, #0
 800322e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003232:	4629      	mov	r1, r5
 8003234:	024b      	lsls	r3, r1, #9
 8003236:	4621      	mov	r1, r4
 8003238:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800323c:	4621      	mov	r1, r4
 800323e:	024a      	lsls	r2, r1, #9
 8003240:	4610      	mov	r0, r2
 8003242:	4619      	mov	r1, r3
 8003244:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003246:	2200      	movs	r2, #0
 8003248:	62bb      	str	r3, [r7, #40]	@ 0x28
 800324a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800324c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003250:	f7fd fcaa 	bl	8000ba8 <__aeabi_uldivmod>
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	4613      	mov	r3, r2
 800325a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800325c:	e058      	b.n	8003310 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800325e:	4b38      	ldr	r3, [pc, #224]	@ (8003340 <HAL_RCC_GetSysClockFreq+0x200>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	099b      	lsrs	r3, r3, #6
 8003264:	2200      	movs	r2, #0
 8003266:	4618      	mov	r0, r3
 8003268:	4611      	mov	r1, r2
 800326a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800326e:	623b      	str	r3, [r7, #32]
 8003270:	2300      	movs	r3, #0
 8003272:	627b      	str	r3, [r7, #36]	@ 0x24
 8003274:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003278:	4642      	mov	r2, r8
 800327a:	464b      	mov	r3, r9
 800327c:	f04f 0000 	mov.w	r0, #0
 8003280:	f04f 0100 	mov.w	r1, #0
 8003284:	0159      	lsls	r1, r3, #5
 8003286:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800328a:	0150      	lsls	r0, r2, #5
 800328c:	4602      	mov	r2, r0
 800328e:	460b      	mov	r3, r1
 8003290:	4641      	mov	r1, r8
 8003292:	ebb2 0a01 	subs.w	sl, r2, r1
 8003296:	4649      	mov	r1, r9
 8003298:	eb63 0b01 	sbc.w	fp, r3, r1
 800329c:	f04f 0200 	mov.w	r2, #0
 80032a0:	f04f 0300 	mov.w	r3, #0
 80032a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032b0:	ebb2 040a 	subs.w	r4, r2, sl
 80032b4:	eb63 050b 	sbc.w	r5, r3, fp
 80032b8:	f04f 0200 	mov.w	r2, #0
 80032bc:	f04f 0300 	mov.w	r3, #0
 80032c0:	00eb      	lsls	r3, r5, #3
 80032c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032c6:	00e2      	lsls	r2, r4, #3
 80032c8:	4614      	mov	r4, r2
 80032ca:	461d      	mov	r5, r3
 80032cc:	4643      	mov	r3, r8
 80032ce:	18e3      	adds	r3, r4, r3
 80032d0:	603b      	str	r3, [r7, #0]
 80032d2:	464b      	mov	r3, r9
 80032d4:	eb45 0303 	adc.w	r3, r5, r3
 80032d8:	607b      	str	r3, [r7, #4]
 80032da:	f04f 0200 	mov.w	r2, #0
 80032de:	f04f 0300 	mov.w	r3, #0
 80032e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032e6:	4629      	mov	r1, r5
 80032e8:	028b      	lsls	r3, r1, #10
 80032ea:	4621      	mov	r1, r4
 80032ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032f0:	4621      	mov	r1, r4
 80032f2:	028a      	lsls	r2, r1, #10
 80032f4:	4610      	mov	r0, r2
 80032f6:	4619      	mov	r1, r3
 80032f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032fa:	2200      	movs	r2, #0
 80032fc:	61bb      	str	r3, [r7, #24]
 80032fe:	61fa      	str	r2, [r7, #28]
 8003300:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003304:	f7fd fc50 	bl	8000ba8 <__aeabi_uldivmod>
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	4613      	mov	r3, r2
 800330e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003310:	4b0b      	ldr	r3, [pc, #44]	@ (8003340 <HAL_RCC_GetSysClockFreq+0x200>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	0c1b      	lsrs	r3, r3, #16
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	3301      	adds	r3, #1
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003320:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003322:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003324:	fbb2 f3f3 	udiv	r3, r2, r3
 8003328:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800332a:	e002      	b.n	8003332 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800332c:	4b05      	ldr	r3, [pc, #20]	@ (8003344 <HAL_RCC_GetSysClockFreq+0x204>)
 800332e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003330:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003332:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003334:	4618      	mov	r0, r3
 8003336:	3750      	adds	r7, #80	@ 0x50
 8003338:	46bd      	mov	sp, r7
 800333a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800333e:	bf00      	nop
 8003340:	40023800 	.word	0x40023800
 8003344:	00f42400 	.word	0x00f42400
 8003348:	007a1200 	.word	0x007a1200

0800334c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003350:	4b03      	ldr	r3, [pc, #12]	@ (8003360 <HAL_RCC_GetHCLKFreq+0x14>)
 8003352:	681b      	ldr	r3, [r3, #0]
}
 8003354:	4618      	mov	r0, r3
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	20000000 	.word	0x20000000

08003364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003368:	f7ff fff0 	bl	800334c <HAL_RCC_GetHCLKFreq>
 800336c:	4602      	mov	r2, r0
 800336e:	4b05      	ldr	r3, [pc, #20]	@ (8003384 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	0a9b      	lsrs	r3, r3, #10
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	4903      	ldr	r1, [pc, #12]	@ (8003388 <HAL_RCC_GetPCLK1Freq+0x24>)
 800337a:	5ccb      	ldrb	r3, [r1, r3]
 800337c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003380:	4618      	mov	r0, r3
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40023800 	.word	0x40023800
 8003388:	080085fc 	.word	0x080085fc

0800338c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	220f      	movs	r2, #15
 800339a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800339c:	4b12      	ldr	r3, [pc, #72]	@ (80033e8 <HAL_RCC_GetClockConfig+0x5c>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f003 0203 	and.w	r2, r3, #3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80033a8:	4b0f      	ldr	r3, [pc, #60]	@ (80033e8 <HAL_RCC_GetClockConfig+0x5c>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80033b4:	4b0c      	ldr	r3, [pc, #48]	@ (80033e8 <HAL_RCC_GetClockConfig+0x5c>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80033c0:	4b09      	ldr	r3, [pc, #36]	@ (80033e8 <HAL_RCC_GetClockConfig+0x5c>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	08db      	lsrs	r3, r3, #3
 80033c6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80033ce:	4b07      	ldr	r3, [pc, #28]	@ (80033ec <HAL_RCC_GetClockConfig+0x60>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0207 	and.w	r2, r3, #7
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	601a      	str	r2, [r3, #0]
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	40023800 	.word	0x40023800
 80033ec:	40023c00 	.word	0x40023c00

080033f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e041      	b.n	8003486 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d106      	bne.n	800341c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f839 	bl	800348e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2202      	movs	r2, #2
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	3304      	adds	r3, #4
 800342c:	4619      	mov	r1, r3
 800342e:	4610      	mov	r0, r2
 8003430:	f000 f9c0 	bl	80037b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
	...

080034a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d001      	beq.n	80034bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e04e      	b.n	800355a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2202      	movs	r2, #2
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0201 	orr.w	r2, r2, #1
 80034d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a23      	ldr	r2, [pc, #140]	@ (8003568 <HAL_TIM_Base_Start_IT+0xc4>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d022      	beq.n	8003524 <HAL_TIM_Base_Start_IT+0x80>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034e6:	d01d      	beq.n	8003524 <HAL_TIM_Base_Start_IT+0x80>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a1f      	ldr	r2, [pc, #124]	@ (800356c <HAL_TIM_Base_Start_IT+0xc8>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d018      	beq.n	8003524 <HAL_TIM_Base_Start_IT+0x80>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a1e      	ldr	r2, [pc, #120]	@ (8003570 <HAL_TIM_Base_Start_IT+0xcc>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d013      	beq.n	8003524 <HAL_TIM_Base_Start_IT+0x80>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a1c      	ldr	r2, [pc, #112]	@ (8003574 <HAL_TIM_Base_Start_IT+0xd0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d00e      	beq.n	8003524 <HAL_TIM_Base_Start_IT+0x80>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a1b      	ldr	r2, [pc, #108]	@ (8003578 <HAL_TIM_Base_Start_IT+0xd4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d009      	beq.n	8003524 <HAL_TIM_Base_Start_IT+0x80>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a19      	ldr	r2, [pc, #100]	@ (800357c <HAL_TIM_Base_Start_IT+0xd8>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d004      	beq.n	8003524 <HAL_TIM_Base_Start_IT+0x80>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a18      	ldr	r2, [pc, #96]	@ (8003580 <HAL_TIM_Base_Start_IT+0xdc>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d111      	bne.n	8003548 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2b06      	cmp	r3, #6
 8003534:	d010      	beq.n	8003558 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f042 0201 	orr.w	r2, r2, #1
 8003544:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003546:	e007      	b.n	8003558 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f042 0201 	orr.w	r2, r2, #1
 8003556:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3714      	adds	r7, #20
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	40010000 	.word	0x40010000
 800356c:	40000400 	.word	0x40000400
 8003570:	40000800 	.word	0x40000800
 8003574:	40000c00 	.word	0x40000c00
 8003578:	40010400 	.word	0x40010400
 800357c:	40014000 	.word	0x40014000
 8003580:	40001800 	.word	0x40001800

08003584 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d020      	beq.n	80035e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d01b      	beq.n	80035e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f06f 0202 	mvn.w	r2, #2
 80035b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f8d2 	bl	8003778 <HAL_TIM_IC_CaptureCallback>
 80035d4:	e005      	b.n	80035e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f8c4 	bl	8003764 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f8d5 	bl	800378c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f003 0304 	and.w	r3, r3, #4
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d020      	beq.n	8003634 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d01b      	beq.n	8003634 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f06f 0204 	mvn.w	r2, #4
 8003604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2202      	movs	r2, #2
 800360a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f8ac 	bl	8003778 <HAL_TIM_IC_CaptureCallback>
 8003620:	e005      	b.n	800362e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f89e 	bl	8003764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 f8af 	bl	800378c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	2b00      	cmp	r3, #0
 800363c:	d020      	beq.n	8003680 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f003 0308 	and.w	r3, r3, #8
 8003644:	2b00      	cmp	r3, #0
 8003646:	d01b      	beq.n	8003680 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f06f 0208 	mvn.w	r2, #8
 8003650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2204      	movs	r2, #4
 8003656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f886 	bl	8003778 <HAL_TIM_IC_CaptureCallback>
 800366c:	e005      	b.n	800367a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f878 	bl	8003764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f889 	bl	800378c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	f003 0310 	and.w	r3, r3, #16
 8003686:	2b00      	cmp	r3, #0
 8003688:	d020      	beq.n	80036cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f003 0310 	and.w	r3, r3, #16
 8003690:	2b00      	cmp	r3, #0
 8003692:	d01b      	beq.n	80036cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f06f 0210 	mvn.w	r2, #16
 800369c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2208      	movs	r2, #8
 80036a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f860 	bl	8003778 <HAL_TIM_IC_CaptureCallback>
 80036b8:	e005      	b.n	80036c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f852 	bl	8003764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f863 	bl	800378c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00c      	beq.n	80036f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d007      	beq.n	80036f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f06f 0201 	mvn.w	r2, #1
 80036e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7fd ffe6 	bl	80016bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00c      	beq.n	8003714 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003700:	2b00      	cmp	r3, #0
 8003702:	d007      	beq.n	8003714 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800370c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f900 	bl	8003914 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00c      	beq.n	8003738 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003724:	2b00      	cmp	r3, #0
 8003726:	d007      	beq.n	8003738 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f834 	bl	80037a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	f003 0320 	and.w	r3, r3, #32
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00c      	beq.n	800375c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f003 0320 	and.w	r3, r3, #32
 8003748:	2b00      	cmp	r3, #0
 800374a:	d007      	beq.n	800375c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f06f 0220 	mvn.w	r2, #32
 8003754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f8d2 	bl	8003900 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800375c:	bf00      	nop
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a43      	ldr	r2, [pc, #268]	@ (80038d4 <TIM_Base_SetConfig+0x120>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d013      	beq.n	80037f4 <TIM_Base_SetConfig+0x40>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037d2:	d00f      	beq.n	80037f4 <TIM_Base_SetConfig+0x40>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a40      	ldr	r2, [pc, #256]	@ (80038d8 <TIM_Base_SetConfig+0x124>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d00b      	beq.n	80037f4 <TIM_Base_SetConfig+0x40>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a3f      	ldr	r2, [pc, #252]	@ (80038dc <TIM_Base_SetConfig+0x128>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d007      	beq.n	80037f4 <TIM_Base_SetConfig+0x40>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a3e      	ldr	r2, [pc, #248]	@ (80038e0 <TIM_Base_SetConfig+0x12c>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d003      	beq.n	80037f4 <TIM_Base_SetConfig+0x40>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a3d      	ldr	r2, [pc, #244]	@ (80038e4 <TIM_Base_SetConfig+0x130>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d108      	bne.n	8003806 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	4313      	orrs	r3, r2
 8003804:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a32      	ldr	r2, [pc, #200]	@ (80038d4 <TIM_Base_SetConfig+0x120>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d02b      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003814:	d027      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a2f      	ldr	r2, [pc, #188]	@ (80038d8 <TIM_Base_SetConfig+0x124>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d023      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a2e      	ldr	r2, [pc, #184]	@ (80038dc <TIM_Base_SetConfig+0x128>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d01f      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a2d      	ldr	r2, [pc, #180]	@ (80038e0 <TIM_Base_SetConfig+0x12c>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d01b      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a2c      	ldr	r2, [pc, #176]	@ (80038e4 <TIM_Base_SetConfig+0x130>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d017      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a2b      	ldr	r2, [pc, #172]	@ (80038e8 <TIM_Base_SetConfig+0x134>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d013      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a2a      	ldr	r2, [pc, #168]	@ (80038ec <TIM_Base_SetConfig+0x138>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d00f      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a29      	ldr	r2, [pc, #164]	@ (80038f0 <TIM_Base_SetConfig+0x13c>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d00b      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a28      	ldr	r2, [pc, #160]	@ (80038f4 <TIM_Base_SetConfig+0x140>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d007      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a27      	ldr	r2, [pc, #156]	@ (80038f8 <TIM_Base_SetConfig+0x144>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d003      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a26      	ldr	r2, [pc, #152]	@ (80038fc <TIM_Base_SetConfig+0x148>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d108      	bne.n	8003878 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800386c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	4313      	orrs	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	4313      	orrs	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a0e      	ldr	r2, [pc, #56]	@ (80038d4 <TIM_Base_SetConfig+0x120>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d003      	beq.n	80038a6 <TIM_Base_SetConfig+0xf2>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a10      	ldr	r2, [pc, #64]	@ (80038e4 <TIM_Base_SetConfig+0x130>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d103      	bne.n	80038ae <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	691a      	ldr	r2, [r3, #16]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f043 0204 	orr.w	r2, r3, #4
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	601a      	str	r2, [r3, #0]
}
 80038c6:	bf00      	nop
 80038c8:	3714      	adds	r7, #20
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	40010000 	.word	0x40010000
 80038d8:	40000400 	.word	0x40000400
 80038dc:	40000800 	.word	0x40000800
 80038e0:	40000c00 	.word	0x40000c00
 80038e4:	40010400 	.word	0x40010400
 80038e8:	40014000 	.word	0x40014000
 80038ec:	40014400 	.word	0x40014400
 80038f0:	40014800 	.word	0x40014800
 80038f4:	40001800 	.word	0x40001800
 80038f8:	40001c00 	.word	0x40001c00
 80038fc:	40002000 	.word	0x40002000

08003900 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <osDelay+0x16>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	e000      	b.n	8003940 <osDelay+0x18>
 800393e:	2301      	movs	r3, #1
 8003940:	4618      	mov	r0, r3
 8003942:	f000 fe21 	bl	8004588 <vTaskDelay>
  
  return osOK;
 8003946:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f103 0208 	add.w	r2, r3, #8
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f04f 32ff 	mov.w	r2, #4294967295
 8003968:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f103 0208 	add.w	r2, r3, #8
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f103 0208 	add.w	r2, r3, #8
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039aa:	b480      	push	{r7}
 80039ac:	b085      	sub	sp, #20
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
 80039b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	601a      	str	r2, [r3, #0]
}
 80039e6:	bf00      	nop
 80039e8:	3714      	adds	r7, #20
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039f2:	b480      	push	{r7}
 80039f4:	b085      	sub	sp, #20
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a08:	d103      	bne.n	8003a12 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	e00c      	b.n	8003a2c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	3308      	adds	r3, #8
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	e002      	b.n	8003a20 <vListInsert+0x2e>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	60fb      	str	r3, [r7, #12]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d2f6      	bcs.n	8003a1a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	1c5a      	adds	r2, r3, #1
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	601a      	str	r2, [r3, #0]
}
 8003a58:	bf00      	nop
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6892      	ldr	r2, [r2, #8]
 8003a7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6852      	ldr	r2, [r2, #4]
 8003a84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d103      	bne.n	8003a98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	1e5a      	subs	r2, r3, #1
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3714      	adds	r7, #20
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10b      	bne.n	8003ae4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ad0:	f383 8811 	msr	BASEPRI, r3
 8003ad4:	f3bf 8f6f 	isb	sy
 8003ad8:	f3bf 8f4f 	dsb	sy
 8003adc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003ade:	bf00      	nop
 8003ae0:	bf00      	nop
 8003ae2:	e7fd      	b.n	8003ae0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003ae4:	f001 fbe0 	bl	80052a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003af0:	68f9      	ldr	r1, [r7, #12]
 8003af2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003af4:	fb01 f303 	mul.w	r3, r1, r3
 8003af8:	441a      	add	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b14:	3b01      	subs	r3, #1
 8003b16:	68f9      	ldr	r1, [r7, #12]
 8003b18:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003b1a:	fb01 f303 	mul.w	r3, r1, r3
 8003b1e:	441a      	add	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	22ff      	movs	r2, #255	@ 0xff
 8003b28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	22ff      	movs	r2, #255	@ 0xff
 8003b30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d114      	bne.n	8003b64 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d01a      	beq.n	8003b78 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	3310      	adds	r3, #16
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 ffae 	bl	8004aa8 <xTaskRemoveFromEventList>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d012      	beq.n	8003b78 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003b52:	4b0d      	ldr	r3, [pc, #52]	@ (8003b88 <xQueueGenericReset+0xd0>)
 8003b54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	f3bf 8f4f 	dsb	sy
 8003b5e:	f3bf 8f6f 	isb	sy
 8003b62:	e009      	b.n	8003b78 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	3310      	adds	r3, #16
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7ff fef1 	bl	8003950 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	3324      	adds	r3, #36	@ 0x24
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7ff feec 	bl	8003950 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003b78:	f001 fbc8 	bl	800530c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003b7c:	2301      	movs	r3, #1
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	e000ed04 	.word	0xe000ed04

08003b8c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b08a      	sub	sp, #40	@ 0x28
 8003b90:	af02      	add	r7, sp, #8
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	4613      	mov	r3, r2
 8003b98:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10b      	bne.n	8003bb8 <xQueueGenericCreate+0x2c>
	__asm volatile
 8003ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ba4:	f383 8811 	msr	BASEPRI, r3
 8003ba8:	f3bf 8f6f 	isb	sy
 8003bac:	f3bf 8f4f 	dsb	sy
 8003bb0:	613b      	str	r3, [r7, #16]
}
 8003bb2:	bf00      	nop
 8003bb4:	bf00      	nop
 8003bb6:	e7fd      	b.n	8003bb4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	fb02 f303 	mul.w	r3, r2, r3
 8003bc0:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	3348      	adds	r3, #72	@ 0x48
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f001 fc4e 	bl	8005468 <pvPortMalloc>
 8003bcc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d011      	beq.n	8003bf8 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	3348      	adds	r3, #72	@ 0x48
 8003bdc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003be6:	79fa      	ldrb	r2, [r7, #7]
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	4613      	mov	r3, r2
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	68b9      	ldr	r1, [r7, #8]
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 f805 	bl	8003c02 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003bf8:	69bb      	ldr	r3, [r7, #24]
	}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3720      	adds	r7, #32
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b084      	sub	sp, #16
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	607a      	str	r2, [r7, #4]
 8003c0e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d103      	bne.n	8003c1e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	e002      	b.n	8003c24 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003c30:	2101      	movs	r1, #1
 8003c32:	69b8      	ldr	r0, [r7, #24]
 8003c34:	f7ff ff40 	bl	8003ab8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003c38:	bf00      	nop
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b08e      	sub	sp, #56	@ 0x38
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
 8003c4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10b      	bne.n	8003c74 <xQueueGenericSend+0x34>
	__asm volatile
 8003c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c60:	f383 8811 	msr	BASEPRI, r3
 8003c64:	f3bf 8f6f 	isb	sy
 8003c68:	f3bf 8f4f 	dsb	sy
 8003c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003c6e:	bf00      	nop
 8003c70:	bf00      	nop
 8003c72:	e7fd      	b.n	8003c70 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d103      	bne.n	8003c82 <xQueueGenericSend+0x42>
 8003c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <xQueueGenericSend+0x46>
 8003c82:	2301      	movs	r3, #1
 8003c84:	e000      	b.n	8003c88 <xQueueGenericSend+0x48>
 8003c86:	2300      	movs	r3, #0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d10b      	bne.n	8003ca4 <xQueueGenericSend+0x64>
	__asm volatile
 8003c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c90:	f383 8811 	msr	BASEPRI, r3
 8003c94:	f3bf 8f6f 	isb	sy
 8003c98:	f3bf 8f4f 	dsb	sy
 8003c9c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003c9e:	bf00      	nop
 8003ca0:	bf00      	nop
 8003ca2:	e7fd      	b.n	8003ca0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d103      	bne.n	8003cb2 <xQueueGenericSend+0x72>
 8003caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d101      	bne.n	8003cb6 <xQueueGenericSend+0x76>
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e000      	b.n	8003cb8 <xQueueGenericSend+0x78>
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d10b      	bne.n	8003cd4 <xQueueGenericSend+0x94>
	__asm volatile
 8003cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cc0:	f383 8811 	msr	BASEPRI, r3
 8003cc4:	f3bf 8f6f 	isb	sy
 8003cc8:	f3bf 8f4f 	dsb	sy
 8003ccc:	623b      	str	r3, [r7, #32]
}
 8003cce:	bf00      	nop
 8003cd0:	bf00      	nop
 8003cd2:	e7fd      	b.n	8003cd0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003cd4:	f001 f8ae 	bl	8004e34 <xTaskGetSchedulerState>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d102      	bne.n	8003ce4 <xQueueGenericSend+0xa4>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d101      	bne.n	8003ce8 <xQueueGenericSend+0xa8>
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e000      	b.n	8003cea <xQueueGenericSend+0xaa>
 8003ce8:	2300      	movs	r3, #0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10b      	bne.n	8003d06 <xQueueGenericSend+0xc6>
	__asm volatile
 8003cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cf2:	f383 8811 	msr	BASEPRI, r3
 8003cf6:	f3bf 8f6f 	isb	sy
 8003cfa:	f3bf 8f4f 	dsb	sy
 8003cfe:	61fb      	str	r3, [r7, #28]
}
 8003d00:	bf00      	nop
 8003d02:	bf00      	nop
 8003d04:	e7fd      	b.n	8003d02 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d06:	f001 facf 	bl	80052a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d302      	bcc.n	8003d1c <xQueueGenericSend+0xdc>
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d129      	bne.n	8003d70 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	68b9      	ldr	r1, [r7, #8]
 8003d20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d22:	f000 f971 	bl	8004008 <prvCopyDataToQueue>
 8003d26:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d010      	beq.n	8003d52 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d32:	3324      	adds	r3, #36	@ 0x24
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 feb7 	bl	8004aa8 <xTaskRemoveFromEventList>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d013      	beq.n	8003d68 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003d40:	4b3f      	ldr	r3, [pc, #252]	@ (8003e40 <xQueueGenericSend+0x200>)
 8003d42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d46:	601a      	str	r2, [r3, #0]
 8003d48:	f3bf 8f4f 	dsb	sy
 8003d4c:	f3bf 8f6f 	isb	sy
 8003d50:	e00a      	b.n	8003d68 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d007      	beq.n	8003d68 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003d58:	4b39      	ldr	r3, [pc, #228]	@ (8003e40 <xQueueGenericSend+0x200>)
 8003d5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	f3bf 8f4f 	dsb	sy
 8003d64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003d68:	f001 fad0 	bl	800530c <vPortExitCritical>
				return pdPASS;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e063      	b.n	8003e38 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d103      	bne.n	8003d7e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d76:	f001 fac9 	bl	800530c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	e05c      	b.n	8003e38 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d106      	bne.n	8003d92 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d84:	f107 0314 	add.w	r3, r7, #20
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f000 fef1 	bl	8004b70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d92:	f001 fabb 	bl	800530c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d96:	f000 fc97 	bl	80046c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d9a:	f001 fa85 	bl	80052a8 <vPortEnterCritical>
 8003d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003da4:	b25b      	sxtb	r3, r3
 8003da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003daa:	d103      	bne.n	8003db4 <xQueueGenericSend+0x174>
 8003dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003dba:	b25b      	sxtb	r3, r3
 8003dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc0:	d103      	bne.n	8003dca <xQueueGenericSend+0x18a>
 8003dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003dca:	f001 fa9f 	bl	800530c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003dce:	1d3a      	adds	r2, r7, #4
 8003dd0:	f107 0314 	add.w	r3, r7, #20
 8003dd4:	4611      	mov	r1, r2
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 fee0 	bl	8004b9c <xTaskCheckForTimeOut>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d124      	bne.n	8003e2c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003de2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003de4:	f000 fa08 	bl	80041f8 <prvIsQueueFull>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d018      	beq.n	8003e20 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df0:	3310      	adds	r3, #16
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	4611      	mov	r1, r2
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 fe30 	bl	8004a5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003dfc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003dfe:	f000 f993 	bl	8004128 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003e02:	f000 fc6f 	bl	80046e4 <xTaskResumeAll>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f47f af7c 	bne.w	8003d06 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8003e40 <xQueueGenericSend+0x200>)
 8003e10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	f3bf 8f4f 	dsb	sy
 8003e1a:	f3bf 8f6f 	isb	sy
 8003e1e:	e772      	b.n	8003d06 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003e20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e22:	f000 f981 	bl	8004128 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e26:	f000 fc5d 	bl	80046e4 <xTaskResumeAll>
 8003e2a:	e76c      	b.n	8003d06 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003e2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e2e:	f000 f97b 	bl	8004128 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e32:	f000 fc57 	bl	80046e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003e36:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3738      	adds	r7, #56	@ 0x38
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	e000ed04 	.word	0xe000ed04

08003e44 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b08c      	sub	sp, #48	@ 0x30
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003e50:	2300      	movs	r3, #0
 8003e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10b      	bne.n	8003e76 <xQueueReceive+0x32>
	__asm volatile
 8003e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e62:	f383 8811 	msr	BASEPRI, r3
 8003e66:	f3bf 8f6f 	isb	sy
 8003e6a:	f3bf 8f4f 	dsb	sy
 8003e6e:	623b      	str	r3, [r7, #32]
}
 8003e70:	bf00      	nop
 8003e72:	bf00      	nop
 8003e74:	e7fd      	b.n	8003e72 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d103      	bne.n	8003e84 <xQueueReceive+0x40>
 8003e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <xQueueReceive+0x44>
 8003e84:	2301      	movs	r3, #1
 8003e86:	e000      	b.n	8003e8a <xQueueReceive+0x46>
 8003e88:	2300      	movs	r3, #0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10b      	bne.n	8003ea6 <xQueueReceive+0x62>
	__asm volatile
 8003e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e92:	f383 8811 	msr	BASEPRI, r3
 8003e96:	f3bf 8f6f 	isb	sy
 8003e9a:	f3bf 8f4f 	dsb	sy
 8003e9e:	61fb      	str	r3, [r7, #28]
}
 8003ea0:	bf00      	nop
 8003ea2:	bf00      	nop
 8003ea4:	e7fd      	b.n	8003ea2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ea6:	f000 ffc5 	bl	8004e34 <xTaskGetSchedulerState>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d102      	bne.n	8003eb6 <xQueueReceive+0x72>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <xQueueReceive+0x76>
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e000      	b.n	8003ebc <xQueueReceive+0x78>
 8003eba:	2300      	movs	r3, #0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10b      	bne.n	8003ed8 <xQueueReceive+0x94>
	__asm volatile
 8003ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ec4:	f383 8811 	msr	BASEPRI, r3
 8003ec8:	f3bf 8f6f 	isb	sy
 8003ecc:	f3bf 8f4f 	dsb	sy
 8003ed0:	61bb      	str	r3, [r7, #24]
}
 8003ed2:	bf00      	nop
 8003ed4:	bf00      	nop
 8003ed6:	e7fd      	b.n	8003ed4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ed8:	f001 f9e6 	bl	80052a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d01f      	beq.n	8003f28 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ee8:	68b9      	ldr	r1, [r7, #8]
 8003eea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003eec:	f000 f8f6 	bl	80040dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef2:	1e5a      	subs	r2, r3, #1
 8003ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00f      	beq.n	8003f20 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f02:	3310      	adds	r3, #16
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 fdcf 	bl	8004aa8 <xTaskRemoveFromEventList>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d007      	beq.n	8003f20 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003f10:	4b3c      	ldr	r3, [pc, #240]	@ (8004004 <xQueueReceive+0x1c0>)
 8003f12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	f3bf 8f4f 	dsb	sy
 8003f1c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003f20:	f001 f9f4 	bl	800530c <vPortExitCritical>
				return pdPASS;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e069      	b.n	8003ffc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d103      	bne.n	8003f36 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f2e:	f001 f9ed 	bl	800530c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003f32:	2300      	movs	r3, #0
 8003f34:	e062      	b.n	8003ffc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d106      	bne.n	8003f4a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f3c:	f107 0310 	add.w	r3, r7, #16
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 fe15 	bl	8004b70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f46:	2301      	movs	r3, #1
 8003f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f4a:	f001 f9df 	bl	800530c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f4e:	f000 fbbb 	bl	80046c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f52:	f001 f9a9 	bl	80052a8 <vPortEnterCritical>
 8003f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f5c:	b25b      	sxtb	r3, r3
 8003f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f62:	d103      	bne.n	8003f6c <xQueueReceive+0x128>
 8003f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f72:	b25b      	sxtb	r3, r3
 8003f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f78:	d103      	bne.n	8003f82 <xQueueReceive+0x13e>
 8003f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f82:	f001 f9c3 	bl	800530c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f86:	1d3a      	adds	r2, r7, #4
 8003f88:	f107 0310 	add.w	r3, r7, #16
 8003f8c:	4611      	mov	r1, r2
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 fe04 	bl	8004b9c <xTaskCheckForTimeOut>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d123      	bne.n	8003fe2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f9c:	f000 f916 	bl	80041cc <prvIsQueueEmpty>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d017      	beq.n	8003fd6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fa8:	3324      	adds	r3, #36	@ 0x24
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	4611      	mov	r1, r2
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 fd54 	bl	8004a5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003fb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fb6:	f000 f8b7 	bl	8004128 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003fba:	f000 fb93 	bl	80046e4 <xTaskResumeAll>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d189      	bne.n	8003ed8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8004004 <xQueueReceive+0x1c0>)
 8003fc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	f3bf 8f6f 	isb	sy
 8003fd4:	e780      	b.n	8003ed8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003fd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fd8:	f000 f8a6 	bl	8004128 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003fdc:	f000 fb82 	bl	80046e4 <xTaskResumeAll>
 8003fe0:	e77a      	b.n	8003ed8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003fe2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fe4:	f000 f8a0 	bl	8004128 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003fe8:	f000 fb7c 	bl	80046e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003fec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fee:	f000 f8ed 	bl	80041cc <prvIsQueueEmpty>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f43f af6f 	beq.w	8003ed8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003ffa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3730      	adds	r7, #48	@ 0x30
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	e000ed04 	.word	0xe000ed04

08004008 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004014:	2300      	movs	r3, #0
 8004016:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800401c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10d      	bne.n	8004042 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d14d      	bne.n	80040ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	4618      	mov	r0, r3
 8004034:	f000 ff1c 	bl	8004e70 <xTaskPriorityDisinherit>
 8004038:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	609a      	str	r2, [r3, #8]
 8004040:	e043      	b.n	80040ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d119      	bne.n	800407c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6858      	ldr	r0, [r3, #4]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004050:	461a      	mov	r2, r3
 8004052:	68b9      	ldr	r1, [r7, #8]
 8004054:	f002 fa51 	bl	80064fa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004060:	441a      	add	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	685a      	ldr	r2, [r3, #4]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	429a      	cmp	r2, r3
 8004070:	d32b      	bcc.n	80040ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	605a      	str	r2, [r3, #4]
 800407a:	e026      	b.n	80040ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	68d8      	ldr	r0, [r3, #12]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004084:	461a      	mov	r2, r3
 8004086:	68b9      	ldr	r1, [r7, #8]
 8004088:	f002 fa37 	bl	80064fa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	68da      	ldr	r2, [r3, #12]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004094:	425b      	negs	r3, r3
 8004096:	441a      	add	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	68da      	ldr	r2, [r3, #12]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d207      	bcs.n	80040b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b0:	425b      	negs	r3, r3
 80040b2:	441a      	add	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d105      	bne.n	80040ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d002      	beq.n	80040ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	3b01      	subs	r3, #1
 80040c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1c5a      	adds	r2, r3, #1
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80040d2:	697b      	ldr	r3, [r7, #20]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3718      	adds	r7, #24
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d018      	beq.n	8004120 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f6:	441a      	add	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68da      	ldr	r2, [r3, #12]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	429a      	cmp	r2, r3
 8004106:	d303      	bcc.n	8004110 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68d9      	ldr	r1, [r3, #12]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004118:	461a      	mov	r2, r3
 800411a:	6838      	ldr	r0, [r7, #0]
 800411c:	f002 f9ed 	bl	80064fa <memcpy>
	}
}
 8004120:	bf00      	nop
 8004122:	3708      	adds	r7, #8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004130:	f001 f8ba 	bl	80052a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800413a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800413c:	e011      	b.n	8004162 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004142:	2b00      	cmp	r3, #0
 8004144:	d012      	beq.n	800416c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	3324      	adds	r3, #36	@ 0x24
 800414a:	4618      	mov	r0, r3
 800414c:	f000 fcac 	bl	8004aa8 <xTaskRemoveFromEventList>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004156:	f000 fd85 	bl	8004c64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800415a:	7bfb      	ldrb	r3, [r7, #15]
 800415c:	3b01      	subs	r3, #1
 800415e:	b2db      	uxtb	r3, r3
 8004160:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004166:	2b00      	cmp	r3, #0
 8004168:	dce9      	bgt.n	800413e <prvUnlockQueue+0x16>
 800416a:	e000      	b.n	800416e <prvUnlockQueue+0x46>
					break;
 800416c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	22ff      	movs	r2, #255	@ 0xff
 8004172:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004176:	f001 f8c9 	bl	800530c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800417a:	f001 f895 	bl	80052a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004184:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004186:	e011      	b.n	80041ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d012      	beq.n	80041b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3310      	adds	r3, #16
 8004194:	4618      	mov	r0, r3
 8004196:	f000 fc87 	bl	8004aa8 <xTaskRemoveFromEventList>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80041a0:	f000 fd60 	bl	8004c64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80041a4:	7bbb      	ldrb	r3, [r7, #14]
 80041a6:	3b01      	subs	r3, #1
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	dce9      	bgt.n	8004188 <prvUnlockQueue+0x60>
 80041b4:	e000      	b.n	80041b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80041b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	22ff      	movs	r2, #255	@ 0xff
 80041bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80041c0:	f001 f8a4 	bl	800530c <vPortExitCritical>
}
 80041c4:	bf00      	nop
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041d4:	f001 f868 	bl	80052a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d102      	bne.n	80041e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80041e0:	2301      	movs	r3, #1
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	e001      	b.n	80041ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80041e6:	2300      	movs	r3, #0
 80041e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041ea:	f001 f88f 	bl	800530c <vPortExitCritical>

	return xReturn;
 80041ee:	68fb      	ldr	r3, [r7, #12]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004200:	f001 f852 	bl	80052a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800420c:	429a      	cmp	r2, r3
 800420e:	d102      	bne.n	8004216 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004210:	2301      	movs	r3, #1
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	e001      	b.n	800421a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004216:	2300      	movs	r3, #0
 8004218:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800421a:	f001 f877 	bl	800530c <vPortExitCritical>

	return xReturn;
 800421e:	68fb      	ldr	r3, [r7, #12]
}
 8004220:	4618      	mov	r0, r3
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004228:	b580      	push	{r7, lr}
 800422a:	b08e      	sub	sp, #56	@ 0x38
 800422c:	af04      	add	r7, sp, #16
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10b      	bne.n	8004254 <xTaskCreateStatic+0x2c>
	__asm volatile
 800423c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004240:	f383 8811 	msr	BASEPRI, r3
 8004244:	f3bf 8f6f 	isb	sy
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	623b      	str	r3, [r7, #32]
}
 800424e:	bf00      	nop
 8004250:	bf00      	nop
 8004252:	e7fd      	b.n	8004250 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10b      	bne.n	8004272 <xTaskCreateStatic+0x4a>
	__asm volatile
 800425a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800425e:	f383 8811 	msr	BASEPRI, r3
 8004262:	f3bf 8f6f 	isb	sy
 8004266:	f3bf 8f4f 	dsb	sy
 800426a:	61fb      	str	r3, [r7, #28]
}
 800426c:	bf00      	nop
 800426e:	bf00      	nop
 8004270:	e7fd      	b.n	800426e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004272:	23a0      	movs	r3, #160	@ 0xa0
 8004274:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	2ba0      	cmp	r3, #160	@ 0xa0
 800427a:	d00b      	beq.n	8004294 <xTaskCreateStatic+0x6c>
	__asm volatile
 800427c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004280:	f383 8811 	msr	BASEPRI, r3
 8004284:	f3bf 8f6f 	isb	sy
 8004288:	f3bf 8f4f 	dsb	sy
 800428c:	61bb      	str	r3, [r7, #24]
}
 800428e:	bf00      	nop
 8004290:	bf00      	nop
 8004292:	e7fd      	b.n	8004290 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004294:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004298:	2b00      	cmp	r3, #0
 800429a:	d01e      	beq.n	80042da <xTaskCreateStatic+0xb2>
 800429c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d01b      	beq.n	80042da <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042a4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80042a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80042aa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80042ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ae:	2202      	movs	r2, #2
 80042b0:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80042b4:	2300      	movs	r3, #0
 80042b6:	9303      	str	r3, [sp, #12]
 80042b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ba:	9302      	str	r3, [sp, #8]
 80042bc:	f107 0314 	add.w	r3, r7, #20
 80042c0:	9301      	str	r3, [sp, #4]
 80042c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	68b9      	ldr	r1, [r7, #8]
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f000 f851 	bl	8004374 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80042d4:	f000 f8ee 	bl	80044b4 <prvAddNewTaskToReadyList>
 80042d8:	e001      	b.n	80042de <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80042da:	2300      	movs	r3, #0
 80042dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80042de:	697b      	ldr	r3, [r7, #20]
	}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3728      	adds	r7, #40	@ 0x28
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b08c      	sub	sp, #48	@ 0x30
 80042ec:	af04      	add	r7, sp, #16
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	603b      	str	r3, [r7, #0]
 80042f4:	4613      	mov	r3, r2
 80042f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80042f8:	88fb      	ldrh	r3, [r7, #6]
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4618      	mov	r0, r3
 80042fe:	f001 f8b3 	bl	8005468 <pvPortMalloc>
 8004302:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00e      	beq.n	8004328 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800430a:	20a0      	movs	r0, #160	@ 0xa0
 800430c:	f001 f8ac 	bl	8005468 <pvPortMalloc>
 8004310:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d003      	beq.n	8004320 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	631a      	str	r2, [r3, #48]	@ 0x30
 800431e:	e005      	b.n	800432c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004320:	6978      	ldr	r0, [r7, #20]
 8004322:	f001 f96f 	bl	8005604 <vPortFree>
 8004326:	e001      	b.n	800432c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004328:	2300      	movs	r3, #0
 800432a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d017      	beq.n	8004362 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800433a:	88fa      	ldrh	r2, [r7, #6]
 800433c:	2300      	movs	r3, #0
 800433e:	9303      	str	r3, [sp, #12]
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	9302      	str	r3, [sp, #8]
 8004344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004346:	9301      	str	r3, [sp, #4]
 8004348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	68b9      	ldr	r1, [r7, #8]
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 f80f 	bl	8004374 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004356:	69f8      	ldr	r0, [r7, #28]
 8004358:	f000 f8ac 	bl	80044b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800435c:	2301      	movs	r3, #1
 800435e:	61bb      	str	r3, [r7, #24]
 8004360:	e002      	b.n	8004368 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004362:	f04f 33ff 	mov.w	r3, #4294967295
 8004366:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004368:	69bb      	ldr	r3, [r7, #24]
	}
 800436a:	4618      	mov	r0, r3
 800436c:	3720      	adds	r7, #32
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
	...

08004374 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b088      	sub	sp, #32
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
 8004380:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004384:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800438c:	3b01      	subs	r3, #1
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4413      	add	r3, r2
 8004392:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	f023 0307 	bic.w	r3, r3, #7
 800439a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	f003 0307 	and.w	r3, r3, #7
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00b      	beq.n	80043be <prvInitialiseNewTask+0x4a>
	__asm volatile
 80043a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043aa:	f383 8811 	msr	BASEPRI, r3
 80043ae:	f3bf 8f6f 	isb	sy
 80043b2:	f3bf 8f4f 	dsb	sy
 80043b6:	617b      	str	r3, [r7, #20]
}
 80043b8:	bf00      	nop
 80043ba:	bf00      	nop
 80043bc:	e7fd      	b.n	80043ba <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d01f      	beq.n	8004404 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043c4:	2300      	movs	r3, #0
 80043c6:	61fb      	str	r3, [r7, #28]
 80043c8:	e012      	b.n	80043f0 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	4413      	add	r3, r2
 80043d0:	7819      	ldrb	r1, [r3, #0]
 80043d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	4413      	add	r3, r2
 80043d8:	3334      	adds	r3, #52	@ 0x34
 80043da:	460a      	mov	r2, r1
 80043dc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	4413      	add	r3, r2
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d006      	beq.n	80043f8 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	3301      	adds	r3, #1
 80043ee:	61fb      	str	r3, [r7, #28]
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	2b0f      	cmp	r3, #15
 80043f4:	d9e9      	bls.n	80043ca <prvInitialiseNewTask+0x56>
 80043f6:	e000      	b.n	80043fa <prvInitialiseNewTask+0x86>
			{
				break;
 80043f8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80043fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004402:	e003      	b.n	800440c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800440c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800440e:	2b06      	cmp	r3, #6
 8004410:	d901      	bls.n	8004416 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004412:	2306      	movs	r3, #6
 8004414:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004418:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800441a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800441c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800441e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004420:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004424:	2200      	movs	r2, #0
 8004426:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800442a:	3304      	adds	r3, #4
 800442c:	4618      	mov	r0, r3
 800442e:	f7ff faaf 	bl	8003990 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004434:	3318      	adds	r3, #24
 8004436:	4618      	mov	r0, r3
 8004438:	f7ff faaa 	bl	8003990 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800443c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800443e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004440:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004444:	f1c3 0207 	rsb	r2, r3, #7
 8004448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800444a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800444c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800444e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004450:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004454:	2200      	movs	r2, #0
 8004456:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800445a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800445c:	2200      	movs	r2, #0
 800445e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004464:	334c      	adds	r3, #76	@ 0x4c
 8004466:	224c      	movs	r2, #76	@ 0x4c
 8004468:	2100      	movs	r1, #0
 800446a:	4618      	mov	r0, r3
 800446c:	f001 ff67 	bl	800633e <memset>
 8004470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004472:	4a0d      	ldr	r2, [pc, #52]	@ (80044a8 <prvInitialiseNewTask+0x134>)
 8004474:	651a      	str	r2, [r3, #80]	@ 0x50
 8004476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004478:	4a0c      	ldr	r2, [pc, #48]	@ (80044ac <prvInitialiseNewTask+0x138>)
 800447a:	655a      	str	r2, [r3, #84]	@ 0x54
 800447c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800447e:	4a0c      	ldr	r2, [pc, #48]	@ (80044b0 <prvInitialiseNewTask+0x13c>)
 8004480:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	68f9      	ldr	r1, [r7, #12]
 8004486:	69b8      	ldr	r0, [r7, #24]
 8004488:	f000 fde0 	bl	800504c <pxPortInitialiseStack>
 800448c:	4602      	mov	r2, r0
 800448e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004490:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004494:	2b00      	cmp	r3, #0
 8004496:	d002      	beq.n	800449e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800449a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800449c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800449e:	bf00      	nop
 80044a0:	3720      	adds	r7, #32
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	20004298 	.word	0x20004298
 80044ac:	20004300 	.word	0x20004300
 80044b0:	20004368 	.word	0x20004368

080044b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80044bc:	f000 fef4 	bl	80052a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80044c0:	4b2a      	ldr	r3, [pc, #168]	@ (800456c <prvAddNewTaskToReadyList+0xb8>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	3301      	adds	r3, #1
 80044c6:	4a29      	ldr	r2, [pc, #164]	@ (800456c <prvAddNewTaskToReadyList+0xb8>)
 80044c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80044ca:	4b29      	ldr	r3, [pc, #164]	@ (8004570 <prvAddNewTaskToReadyList+0xbc>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d109      	bne.n	80044e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80044d2:	4a27      	ldr	r2, [pc, #156]	@ (8004570 <prvAddNewTaskToReadyList+0xbc>)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80044d8:	4b24      	ldr	r3, [pc, #144]	@ (800456c <prvAddNewTaskToReadyList+0xb8>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d110      	bne.n	8004502 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80044e0:	f000 fbe4 	bl	8004cac <prvInitialiseTaskLists>
 80044e4:	e00d      	b.n	8004502 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80044e6:	4b23      	ldr	r3, [pc, #140]	@ (8004574 <prvAddNewTaskToReadyList+0xc0>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d109      	bne.n	8004502 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80044ee:	4b20      	ldr	r3, [pc, #128]	@ (8004570 <prvAddNewTaskToReadyList+0xbc>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d802      	bhi.n	8004502 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80044fc:	4a1c      	ldr	r2, [pc, #112]	@ (8004570 <prvAddNewTaskToReadyList+0xbc>)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004502:	4b1d      	ldr	r3, [pc, #116]	@ (8004578 <prvAddNewTaskToReadyList+0xc4>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	3301      	adds	r3, #1
 8004508:	4a1b      	ldr	r2, [pc, #108]	@ (8004578 <prvAddNewTaskToReadyList+0xc4>)
 800450a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004510:	2201      	movs	r2, #1
 8004512:	409a      	lsls	r2, r3
 8004514:	4b19      	ldr	r3, [pc, #100]	@ (800457c <prvAddNewTaskToReadyList+0xc8>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4313      	orrs	r3, r2
 800451a:	4a18      	ldr	r2, [pc, #96]	@ (800457c <prvAddNewTaskToReadyList+0xc8>)
 800451c:	6013      	str	r3, [r2, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004522:	4613      	mov	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4413      	add	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4a15      	ldr	r2, [pc, #84]	@ (8004580 <prvAddNewTaskToReadyList+0xcc>)
 800452c:	441a      	add	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	3304      	adds	r3, #4
 8004532:	4619      	mov	r1, r3
 8004534:	4610      	mov	r0, r2
 8004536:	f7ff fa38 	bl	80039aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800453a:	f000 fee7 	bl	800530c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800453e:	4b0d      	ldr	r3, [pc, #52]	@ (8004574 <prvAddNewTaskToReadyList+0xc0>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00e      	beq.n	8004564 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004546:	4b0a      	ldr	r3, [pc, #40]	@ (8004570 <prvAddNewTaskToReadyList+0xbc>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004550:	429a      	cmp	r2, r3
 8004552:	d207      	bcs.n	8004564 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004554:	4b0b      	ldr	r3, [pc, #44]	@ (8004584 <prvAddNewTaskToReadyList+0xd0>)
 8004556:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	f3bf 8f4f 	dsb	sy
 8004560:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004564:	bf00      	nop
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	20000644 	.word	0x20000644
 8004570:	20000544 	.word	0x20000544
 8004574:	20000650 	.word	0x20000650
 8004578:	20000660 	.word	0x20000660
 800457c:	2000064c 	.word	0x2000064c
 8004580:	20000548 	.word	0x20000548
 8004584:	e000ed04 	.word	0xe000ed04

08004588 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004590:	2300      	movs	r3, #0
 8004592:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d018      	beq.n	80045cc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800459a:	4b14      	ldr	r3, [pc, #80]	@ (80045ec <vTaskDelay+0x64>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00b      	beq.n	80045ba <vTaskDelay+0x32>
	__asm volatile
 80045a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045a6:	f383 8811 	msr	BASEPRI, r3
 80045aa:	f3bf 8f6f 	isb	sy
 80045ae:	f3bf 8f4f 	dsb	sy
 80045b2:	60bb      	str	r3, [r7, #8]
}
 80045b4:	bf00      	nop
 80045b6:	bf00      	nop
 80045b8:	e7fd      	b.n	80045b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80045ba:	f000 f885 	bl	80046c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80045be:	2100      	movs	r1, #0
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 fcdd 	bl	8004f80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80045c6:	f000 f88d 	bl	80046e4 <xTaskResumeAll>
 80045ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d107      	bne.n	80045e2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80045d2:	4b07      	ldr	r3, [pc, #28]	@ (80045f0 <vTaskDelay+0x68>)
 80045d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	f3bf 8f4f 	dsb	sy
 80045de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80045e2:	bf00      	nop
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	2000066c 	.word	0x2000066c
 80045f0:	e000ed04 	.word	0xe000ed04

080045f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b08a      	sub	sp, #40	@ 0x28
 80045f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80045fa:	2300      	movs	r3, #0
 80045fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80045fe:	2300      	movs	r3, #0
 8004600:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004602:	463a      	mov	r2, r7
 8004604:	1d39      	adds	r1, r7, #4
 8004606:	f107 0308 	add.w	r3, r7, #8
 800460a:	4618      	mov	r0, r3
 800460c:	f7fc fd9e 	bl	800114c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004610:	6839      	ldr	r1, [r7, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	9202      	str	r2, [sp, #8]
 8004618:	9301      	str	r3, [sp, #4]
 800461a:	2300      	movs	r3, #0
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	2300      	movs	r3, #0
 8004620:	460a      	mov	r2, r1
 8004622:	4921      	ldr	r1, [pc, #132]	@ (80046a8 <vTaskStartScheduler+0xb4>)
 8004624:	4821      	ldr	r0, [pc, #132]	@ (80046ac <vTaskStartScheduler+0xb8>)
 8004626:	f7ff fdff 	bl	8004228 <xTaskCreateStatic>
 800462a:	4603      	mov	r3, r0
 800462c:	4a20      	ldr	r2, [pc, #128]	@ (80046b0 <vTaskStartScheduler+0xbc>)
 800462e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004630:	4b1f      	ldr	r3, [pc, #124]	@ (80046b0 <vTaskStartScheduler+0xbc>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d002      	beq.n	800463e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004638:	2301      	movs	r3, #1
 800463a:	617b      	str	r3, [r7, #20]
 800463c:	e001      	b.n	8004642 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800463e:	2300      	movs	r3, #0
 8004640:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d11b      	bne.n	8004680 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800464c:	f383 8811 	msr	BASEPRI, r3
 8004650:	f3bf 8f6f 	isb	sy
 8004654:	f3bf 8f4f 	dsb	sy
 8004658:	613b      	str	r3, [r7, #16]
}
 800465a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800465c:	4b15      	ldr	r3, [pc, #84]	@ (80046b4 <vTaskStartScheduler+0xc0>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	334c      	adds	r3, #76	@ 0x4c
 8004662:	4a15      	ldr	r2, [pc, #84]	@ (80046b8 <vTaskStartScheduler+0xc4>)
 8004664:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004666:	4b15      	ldr	r3, [pc, #84]	@ (80046bc <vTaskStartScheduler+0xc8>)
 8004668:	f04f 32ff 	mov.w	r2, #4294967295
 800466c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800466e:	4b14      	ldr	r3, [pc, #80]	@ (80046c0 <vTaskStartScheduler+0xcc>)
 8004670:	2201      	movs	r2, #1
 8004672:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004674:	4b13      	ldr	r3, [pc, #76]	@ (80046c4 <vTaskStartScheduler+0xd0>)
 8004676:	2200      	movs	r2, #0
 8004678:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800467a:	f000 fd71 	bl	8005160 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800467e:	e00f      	b.n	80046a0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004686:	d10b      	bne.n	80046a0 <vTaskStartScheduler+0xac>
	__asm volatile
 8004688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800468c:	f383 8811 	msr	BASEPRI, r3
 8004690:	f3bf 8f6f 	isb	sy
 8004694:	f3bf 8f4f 	dsb	sy
 8004698:	60fb      	str	r3, [r7, #12]
}
 800469a:	bf00      	nop
 800469c:	bf00      	nop
 800469e:	e7fd      	b.n	800469c <vTaskStartScheduler+0xa8>
}
 80046a0:	bf00      	nop
 80046a2:	3718      	adds	r7, #24
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	080085e4 	.word	0x080085e4
 80046ac:	08004c7d 	.word	0x08004c7d
 80046b0:	20000668 	.word	0x20000668
 80046b4:	20000544 	.word	0x20000544
 80046b8:	2000001c 	.word	0x2000001c
 80046bc:	20000664 	.word	0x20000664
 80046c0:	20000650 	.word	0x20000650
 80046c4:	20000648 	.word	0x20000648

080046c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80046cc:	4b04      	ldr	r3, [pc, #16]	@ (80046e0 <vTaskSuspendAll+0x18>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3301      	adds	r3, #1
 80046d2:	4a03      	ldr	r2, [pc, #12]	@ (80046e0 <vTaskSuspendAll+0x18>)
 80046d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80046d6:	bf00      	nop
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr
 80046e0:	2000066c 	.word	0x2000066c

080046e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80046ea:	2300      	movs	r3, #0
 80046ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80046ee:	2300      	movs	r3, #0
 80046f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80046f2:	4b42      	ldr	r3, [pc, #264]	@ (80047fc <xTaskResumeAll+0x118>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10b      	bne.n	8004712 <xTaskResumeAll+0x2e>
	__asm volatile
 80046fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046fe:	f383 8811 	msr	BASEPRI, r3
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	603b      	str	r3, [r7, #0]
}
 800470c:	bf00      	nop
 800470e:	bf00      	nop
 8004710:	e7fd      	b.n	800470e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004712:	f000 fdc9 	bl	80052a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004716:	4b39      	ldr	r3, [pc, #228]	@ (80047fc <xTaskResumeAll+0x118>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	3b01      	subs	r3, #1
 800471c:	4a37      	ldr	r2, [pc, #220]	@ (80047fc <xTaskResumeAll+0x118>)
 800471e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004720:	4b36      	ldr	r3, [pc, #216]	@ (80047fc <xTaskResumeAll+0x118>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d161      	bne.n	80047ec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004728:	4b35      	ldr	r3, [pc, #212]	@ (8004800 <xTaskResumeAll+0x11c>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d05d      	beq.n	80047ec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004730:	e02e      	b.n	8004790 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004732:	4b34      	ldr	r3, [pc, #208]	@ (8004804 <xTaskResumeAll+0x120>)
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	3318      	adds	r3, #24
 800473e:	4618      	mov	r0, r3
 8004740:	f7ff f990 	bl	8003a64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	3304      	adds	r3, #4
 8004748:	4618      	mov	r0, r3
 800474a:	f7ff f98b 	bl	8003a64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004752:	2201      	movs	r2, #1
 8004754:	409a      	lsls	r2, r3
 8004756:	4b2c      	ldr	r3, [pc, #176]	@ (8004808 <xTaskResumeAll+0x124>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4313      	orrs	r3, r2
 800475c:	4a2a      	ldr	r2, [pc, #168]	@ (8004808 <xTaskResumeAll+0x124>)
 800475e:	6013      	str	r3, [r2, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004764:	4613      	mov	r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	4413      	add	r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	4a27      	ldr	r2, [pc, #156]	@ (800480c <xTaskResumeAll+0x128>)
 800476e:	441a      	add	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	3304      	adds	r3, #4
 8004774:	4619      	mov	r1, r3
 8004776:	4610      	mov	r0, r2
 8004778:	f7ff f917 	bl	80039aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004780:	4b23      	ldr	r3, [pc, #140]	@ (8004810 <xTaskResumeAll+0x12c>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004786:	429a      	cmp	r2, r3
 8004788:	d302      	bcc.n	8004790 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800478a:	4b22      	ldr	r3, [pc, #136]	@ (8004814 <xTaskResumeAll+0x130>)
 800478c:	2201      	movs	r2, #1
 800478e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004790:	4b1c      	ldr	r3, [pc, #112]	@ (8004804 <xTaskResumeAll+0x120>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1cc      	bne.n	8004732 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800479e:	f000 fb29 	bl	8004df4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80047a2:	4b1d      	ldr	r3, [pc, #116]	@ (8004818 <xTaskResumeAll+0x134>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d010      	beq.n	80047d0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80047ae:	f000 f837 	bl	8004820 <xTaskIncrementTick>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d002      	beq.n	80047be <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80047b8:	4b16      	ldr	r3, [pc, #88]	@ (8004814 <xTaskResumeAll+0x130>)
 80047ba:	2201      	movs	r2, #1
 80047bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	3b01      	subs	r3, #1
 80047c2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1f1      	bne.n	80047ae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80047ca:	4b13      	ldr	r3, [pc, #76]	@ (8004818 <xTaskResumeAll+0x134>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80047d0:	4b10      	ldr	r3, [pc, #64]	@ (8004814 <xTaskResumeAll+0x130>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d009      	beq.n	80047ec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80047d8:	2301      	movs	r3, #1
 80047da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80047dc:	4b0f      	ldr	r3, [pc, #60]	@ (800481c <xTaskResumeAll+0x138>)
 80047de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	f3bf 8f4f 	dsb	sy
 80047e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80047ec:	f000 fd8e 	bl	800530c <vPortExitCritical>

	return xAlreadyYielded;
 80047f0:	68bb      	ldr	r3, [r7, #8]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	2000066c 	.word	0x2000066c
 8004800:	20000644 	.word	0x20000644
 8004804:	20000604 	.word	0x20000604
 8004808:	2000064c 	.word	0x2000064c
 800480c:	20000548 	.word	0x20000548
 8004810:	20000544 	.word	0x20000544
 8004814:	20000658 	.word	0x20000658
 8004818:	20000654 	.word	0x20000654
 800481c:	e000ed04 	.word	0xe000ed04

08004820 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004826:	2300      	movs	r3, #0
 8004828:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800482a:	4b4f      	ldr	r3, [pc, #316]	@ (8004968 <xTaskIncrementTick+0x148>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	f040 808f 	bne.w	8004952 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004834:	4b4d      	ldr	r3, [pc, #308]	@ (800496c <xTaskIncrementTick+0x14c>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	3301      	adds	r3, #1
 800483a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800483c:	4a4b      	ldr	r2, [pc, #300]	@ (800496c <xTaskIncrementTick+0x14c>)
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d121      	bne.n	800488c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004848:	4b49      	ldr	r3, [pc, #292]	@ (8004970 <xTaskIncrementTick+0x150>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00b      	beq.n	800486a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004856:	f383 8811 	msr	BASEPRI, r3
 800485a:	f3bf 8f6f 	isb	sy
 800485e:	f3bf 8f4f 	dsb	sy
 8004862:	603b      	str	r3, [r7, #0]
}
 8004864:	bf00      	nop
 8004866:	bf00      	nop
 8004868:	e7fd      	b.n	8004866 <xTaskIncrementTick+0x46>
 800486a:	4b41      	ldr	r3, [pc, #260]	@ (8004970 <xTaskIncrementTick+0x150>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	60fb      	str	r3, [r7, #12]
 8004870:	4b40      	ldr	r3, [pc, #256]	@ (8004974 <xTaskIncrementTick+0x154>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a3e      	ldr	r2, [pc, #248]	@ (8004970 <xTaskIncrementTick+0x150>)
 8004876:	6013      	str	r3, [r2, #0]
 8004878:	4a3e      	ldr	r2, [pc, #248]	@ (8004974 <xTaskIncrementTick+0x154>)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6013      	str	r3, [r2, #0]
 800487e:	4b3e      	ldr	r3, [pc, #248]	@ (8004978 <xTaskIncrementTick+0x158>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	3301      	adds	r3, #1
 8004884:	4a3c      	ldr	r2, [pc, #240]	@ (8004978 <xTaskIncrementTick+0x158>)
 8004886:	6013      	str	r3, [r2, #0]
 8004888:	f000 fab4 	bl	8004df4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800488c:	4b3b      	ldr	r3, [pc, #236]	@ (800497c <xTaskIncrementTick+0x15c>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	429a      	cmp	r2, r3
 8004894:	d348      	bcc.n	8004928 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004896:	4b36      	ldr	r3, [pc, #216]	@ (8004970 <xTaskIncrementTick+0x150>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d104      	bne.n	80048aa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048a0:	4b36      	ldr	r3, [pc, #216]	@ (800497c <xTaskIncrementTick+0x15c>)
 80048a2:	f04f 32ff 	mov.w	r2, #4294967295
 80048a6:	601a      	str	r2, [r3, #0]
					break;
 80048a8:	e03e      	b.n	8004928 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048aa:	4b31      	ldr	r3, [pc, #196]	@ (8004970 <xTaskIncrementTick+0x150>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d203      	bcs.n	80048ca <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80048c2:	4a2e      	ldr	r2, [pc, #184]	@ (800497c <xTaskIncrementTick+0x15c>)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80048c8:	e02e      	b.n	8004928 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	3304      	adds	r3, #4
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7ff f8c8 	bl	8003a64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d004      	beq.n	80048e6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	3318      	adds	r3, #24
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7ff f8bf 	bl	8003a64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ea:	2201      	movs	r2, #1
 80048ec:	409a      	lsls	r2, r3
 80048ee:	4b24      	ldr	r3, [pc, #144]	@ (8004980 <xTaskIncrementTick+0x160>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	4a22      	ldr	r2, [pc, #136]	@ (8004980 <xTaskIncrementTick+0x160>)
 80048f6:	6013      	str	r3, [r2, #0]
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048fc:	4613      	mov	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4a1f      	ldr	r2, [pc, #124]	@ (8004984 <xTaskIncrementTick+0x164>)
 8004906:	441a      	add	r2, r3
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	3304      	adds	r3, #4
 800490c:	4619      	mov	r1, r3
 800490e:	4610      	mov	r0, r2
 8004910:	f7ff f84b 	bl	80039aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004918:	4b1b      	ldr	r3, [pc, #108]	@ (8004988 <xTaskIncrementTick+0x168>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800491e:	429a      	cmp	r2, r3
 8004920:	d3b9      	bcc.n	8004896 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004922:	2301      	movs	r3, #1
 8004924:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004926:	e7b6      	b.n	8004896 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004928:	4b17      	ldr	r3, [pc, #92]	@ (8004988 <xTaskIncrementTick+0x168>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800492e:	4915      	ldr	r1, [pc, #84]	@ (8004984 <xTaskIncrementTick+0x164>)
 8004930:	4613      	mov	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	440b      	add	r3, r1
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d901      	bls.n	8004944 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004940:	2301      	movs	r3, #1
 8004942:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004944:	4b11      	ldr	r3, [pc, #68]	@ (800498c <xTaskIncrementTick+0x16c>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d007      	beq.n	800495c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800494c:	2301      	movs	r3, #1
 800494e:	617b      	str	r3, [r7, #20]
 8004950:	e004      	b.n	800495c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004952:	4b0f      	ldr	r3, [pc, #60]	@ (8004990 <xTaskIncrementTick+0x170>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	3301      	adds	r3, #1
 8004958:	4a0d      	ldr	r2, [pc, #52]	@ (8004990 <xTaskIncrementTick+0x170>)
 800495a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800495c:	697b      	ldr	r3, [r7, #20]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3718      	adds	r7, #24
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	2000066c 	.word	0x2000066c
 800496c:	20000648 	.word	0x20000648
 8004970:	200005fc 	.word	0x200005fc
 8004974:	20000600 	.word	0x20000600
 8004978:	2000065c 	.word	0x2000065c
 800497c:	20000664 	.word	0x20000664
 8004980:	2000064c 	.word	0x2000064c
 8004984:	20000548 	.word	0x20000548
 8004988:	20000544 	.word	0x20000544
 800498c:	20000658 	.word	0x20000658
 8004990:	20000654 	.word	0x20000654

08004994 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004994:	b480      	push	{r7}
 8004996:	b087      	sub	sp, #28
 8004998:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800499a:	4b2a      	ldr	r3, [pc, #168]	@ (8004a44 <vTaskSwitchContext+0xb0>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80049a2:	4b29      	ldr	r3, [pc, #164]	@ (8004a48 <vTaskSwitchContext+0xb4>)
 80049a4:	2201      	movs	r2, #1
 80049a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80049a8:	e045      	b.n	8004a36 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80049aa:	4b27      	ldr	r3, [pc, #156]	@ (8004a48 <vTaskSwitchContext+0xb4>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049b0:	4b26      	ldr	r3, [pc, #152]	@ (8004a4c <vTaskSwitchContext+0xb8>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	fab3 f383 	clz	r3, r3
 80049bc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80049be:	7afb      	ldrb	r3, [r7, #11]
 80049c0:	f1c3 031f 	rsb	r3, r3, #31
 80049c4:	617b      	str	r3, [r7, #20]
 80049c6:	4922      	ldr	r1, [pc, #136]	@ (8004a50 <vTaskSwitchContext+0xbc>)
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	4613      	mov	r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4413      	add	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	440b      	add	r3, r1
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10b      	bne.n	80049f2 <vTaskSwitchContext+0x5e>
	__asm volatile
 80049da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049de:	f383 8811 	msr	BASEPRI, r3
 80049e2:	f3bf 8f6f 	isb	sy
 80049e6:	f3bf 8f4f 	dsb	sy
 80049ea:	607b      	str	r3, [r7, #4]
}
 80049ec:	bf00      	nop
 80049ee:	bf00      	nop
 80049f0:	e7fd      	b.n	80049ee <vTaskSwitchContext+0x5a>
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	4613      	mov	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4413      	add	r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4a14      	ldr	r2, [pc, #80]	@ (8004a50 <vTaskSwitchContext+0xbc>)
 80049fe:	4413      	add	r3, r2
 8004a00:	613b      	str	r3, [r7, #16]
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	605a      	str	r2, [r3, #4]
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	685a      	ldr	r2, [r3, #4]
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	3308      	adds	r3, #8
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d104      	bne.n	8004a22 <vTaskSwitchContext+0x8e>
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	605a      	str	r2, [r3, #4]
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	4a0a      	ldr	r2, [pc, #40]	@ (8004a54 <vTaskSwitchContext+0xc0>)
 8004a2a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004a2c:	4b09      	ldr	r3, [pc, #36]	@ (8004a54 <vTaskSwitchContext+0xc0>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	334c      	adds	r3, #76	@ 0x4c
 8004a32:	4a09      	ldr	r2, [pc, #36]	@ (8004a58 <vTaskSwitchContext+0xc4>)
 8004a34:	6013      	str	r3, [r2, #0]
}
 8004a36:	bf00      	nop
 8004a38:	371c      	adds	r7, #28
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	2000066c 	.word	0x2000066c
 8004a48:	20000658 	.word	0x20000658
 8004a4c:	2000064c 	.word	0x2000064c
 8004a50:	20000548 	.word	0x20000548
 8004a54:	20000544 	.word	0x20000544
 8004a58:	2000001c 	.word	0x2000001c

08004a5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d10b      	bne.n	8004a84 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a70:	f383 8811 	msr	BASEPRI, r3
 8004a74:	f3bf 8f6f 	isb	sy
 8004a78:	f3bf 8f4f 	dsb	sy
 8004a7c:	60fb      	str	r3, [r7, #12]
}
 8004a7e:	bf00      	nop
 8004a80:	bf00      	nop
 8004a82:	e7fd      	b.n	8004a80 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a84:	4b07      	ldr	r3, [pc, #28]	@ (8004aa4 <vTaskPlaceOnEventList+0x48>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	3318      	adds	r3, #24
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f7fe ffb0 	bl	80039f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a92:	2101      	movs	r1, #1
 8004a94:	6838      	ldr	r0, [r7, #0]
 8004a96:	f000 fa73 	bl	8004f80 <prvAddCurrentTaskToDelayedList>
}
 8004a9a:	bf00      	nop
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20000544 	.word	0x20000544

08004aa8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10b      	bne.n	8004ad6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ac2:	f383 8811 	msr	BASEPRI, r3
 8004ac6:	f3bf 8f6f 	isb	sy
 8004aca:	f3bf 8f4f 	dsb	sy
 8004ace:	60fb      	str	r3, [r7, #12]
}
 8004ad0:	bf00      	nop
 8004ad2:	bf00      	nop
 8004ad4:	e7fd      	b.n	8004ad2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	3318      	adds	r3, #24
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7fe ffc2 	bl	8003a64 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8004b58 <xTaskRemoveFromEventList+0xb0>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d11c      	bne.n	8004b22 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	3304      	adds	r3, #4
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7fe ffb9 	bl	8003a64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af6:	2201      	movs	r2, #1
 8004af8:	409a      	lsls	r2, r3
 8004afa:	4b18      	ldr	r3, [pc, #96]	@ (8004b5c <xTaskRemoveFromEventList+0xb4>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	4a16      	ldr	r2, [pc, #88]	@ (8004b5c <xTaskRemoveFromEventList+0xb4>)
 8004b02:	6013      	str	r3, [r2, #0]
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b08:	4613      	mov	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4413      	add	r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4a13      	ldr	r2, [pc, #76]	@ (8004b60 <xTaskRemoveFromEventList+0xb8>)
 8004b12:	441a      	add	r2, r3
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	3304      	adds	r3, #4
 8004b18:	4619      	mov	r1, r3
 8004b1a:	4610      	mov	r0, r2
 8004b1c:	f7fe ff45 	bl	80039aa <vListInsertEnd>
 8004b20:	e005      	b.n	8004b2e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	3318      	adds	r3, #24
 8004b26:	4619      	mov	r1, r3
 8004b28:	480e      	ldr	r0, [pc, #56]	@ (8004b64 <xTaskRemoveFromEventList+0xbc>)
 8004b2a:	f7fe ff3e 	bl	80039aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b32:	4b0d      	ldr	r3, [pc, #52]	@ (8004b68 <xTaskRemoveFromEventList+0xc0>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d905      	bls.n	8004b48 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004b40:	4b0a      	ldr	r3, [pc, #40]	@ (8004b6c <xTaskRemoveFromEventList+0xc4>)
 8004b42:	2201      	movs	r2, #1
 8004b44:	601a      	str	r2, [r3, #0]
 8004b46:	e001      	b.n	8004b4c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004b4c:	697b      	ldr	r3, [r7, #20]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3718      	adds	r7, #24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	2000066c 	.word	0x2000066c
 8004b5c:	2000064c 	.word	0x2000064c
 8004b60:	20000548 	.word	0x20000548
 8004b64:	20000604 	.word	0x20000604
 8004b68:	20000544 	.word	0x20000544
 8004b6c:	20000658 	.word	0x20000658

08004b70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004b78:	4b06      	ldr	r3, [pc, #24]	@ (8004b94 <vTaskInternalSetTimeOutState+0x24>)
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004b80:	4b05      	ldr	r3, [pc, #20]	@ (8004b98 <vTaskInternalSetTimeOutState+0x28>)
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	605a      	str	r2, [r3, #4]
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	2000065c 	.word	0x2000065c
 8004b98:	20000648 	.word	0x20000648

08004b9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b088      	sub	sp, #32
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10b      	bne.n	8004bc4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	613b      	str	r3, [r7, #16]
}
 8004bbe:	bf00      	nop
 8004bc0:	bf00      	nop
 8004bc2:	e7fd      	b.n	8004bc0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10b      	bne.n	8004be2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bce:	f383 8811 	msr	BASEPRI, r3
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	f3bf 8f4f 	dsb	sy
 8004bda:	60fb      	str	r3, [r7, #12]
}
 8004bdc:	bf00      	nop
 8004bde:	bf00      	nop
 8004be0:	e7fd      	b.n	8004bde <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004be2:	f000 fb61 	bl	80052a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004be6:	4b1d      	ldr	r3, [pc, #116]	@ (8004c5c <xTaskCheckForTimeOut+0xc0>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	69ba      	ldr	r2, [r7, #24]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfe:	d102      	bne.n	8004c06 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004c00:	2300      	movs	r3, #0
 8004c02:	61fb      	str	r3, [r7, #28]
 8004c04:	e023      	b.n	8004c4e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	4b15      	ldr	r3, [pc, #84]	@ (8004c60 <xTaskCheckForTimeOut+0xc4>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d007      	beq.n	8004c22 <xTaskCheckForTimeOut+0x86>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d302      	bcc.n	8004c22 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	61fb      	str	r3, [r7, #28]
 8004c20:	e015      	b.n	8004c4e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d20b      	bcs.n	8004c44 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	1ad2      	subs	r2, r2, r3
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f7ff ff99 	bl	8004b70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	61fb      	str	r3, [r7, #28]
 8004c42:	e004      	b.n	8004c4e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	2200      	movs	r2, #0
 8004c48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004c4e:	f000 fb5d 	bl	800530c <vPortExitCritical>

	return xReturn;
 8004c52:	69fb      	ldr	r3, [r7, #28]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3720      	adds	r7, #32
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	20000648 	.word	0x20000648
 8004c60:	2000065c 	.word	0x2000065c

08004c64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004c64:	b480      	push	{r7}
 8004c66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004c68:	4b03      	ldr	r3, [pc, #12]	@ (8004c78 <vTaskMissedYield+0x14>)
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	601a      	str	r2, [r3, #0]
}
 8004c6e:	bf00      	nop
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	20000658 	.word	0x20000658

08004c7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004c84:	f000 f852 	bl	8004d2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004c88:	4b06      	ldr	r3, [pc, #24]	@ (8004ca4 <prvIdleTask+0x28>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d9f9      	bls.n	8004c84 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004c90:	4b05      	ldr	r3, [pc, #20]	@ (8004ca8 <prvIdleTask+0x2c>)
 8004c92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c96:	601a      	str	r2, [r3, #0]
 8004c98:	f3bf 8f4f 	dsb	sy
 8004c9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004ca0:	e7f0      	b.n	8004c84 <prvIdleTask+0x8>
 8004ca2:	bf00      	nop
 8004ca4:	20000548 	.word	0x20000548
 8004ca8:	e000ed04 	.word	0xe000ed04

08004cac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	607b      	str	r3, [r7, #4]
 8004cb6:	e00c      	b.n	8004cd2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	4413      	add	r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4a12      	ldr	r2, [pc, #72]	@ (8004d0c <prvInitialiseTaskLists+0x60>)
 8004cc4:	4413      	add	r3, r2
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7fe fe42 	bl	8003950 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	607b      	str	r3, [r7, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b06      	cmp	r3, #6
 8004cd6:	d9ef      	bls.n	8004cb8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004cd8:	480d      	ldr	r0, [pc, #52]	@ (8004d10 <prvInitialiseTaskLists+0x64>)
 8004cda:	f7fe fe39 	bl	8003950 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004cde:	480d      	ldr	r0, [pc, #52]	@ (8004d14 <prvInitialiseTaskLists+0x68>)
 8004ce0:	f7fe fe36 	bl	8003950 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ce4:	480c      	ldr	r0, [pc, #48]	@ (8004d18 <prvInitialiseTaskLists+0x6c>)
 8004ce6:	f7fe fe33 	bl	8003950 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004cea:	480c      	ldr	r0, [pc, #48]	@ (8004d1c <prvInitialiseTaskLists+0x70>)
 8004cec:	f7fe fe30 	bl	8003950 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004cf0:	480b      	ldr	r0, [pc, #44]	@ (8004d20 <prvInitialiseTaskLists+0x74>)
 8004cf2:	f7fe fe2d 	bl	8003950 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8004d24 <prvInitialiseTaskLists+0x78>)
 8004cf8:	4a05      	ldr	r2, [pc, #20]	@ (8004d10 <prvInitialiseTaskLists+0x64>)
 8004cfa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8004d28 <prvInitialiseTaskLists+0x7c>)
 8004cfe:	4a05      	ldr	r2, [pc, #20]	@ (8004d14 <prvInitialiseTaskLists+0x68>)
 8004d00:	601a      	str	r2, [r3, #0]
}
 8004d02:	bf00      	nop
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	20000548 	.word	0x20000548
 8004d10:	200005d4 	.word	0x200005d4
 8004d14:	200005e8 	.word	0x200005e8
 8004d18:	20000604 	.word	0x20000604
 8004d1c:	20000618 	.word	0x20000618
 8004d20:	20000630 	.word	0x20000630
 8004d24:	200005fc 	.word	0x200005fc
 8004d28:	20000600 	.word	0x20000600

08004d2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d32:	e019      	b.n	8004d68 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d34:	f000 fab8 	bl	80052a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d38:	4b10      	ldr	r3, [pc, #64]	@ (8004d7c <prvCheckTasksWaitingTermination+0x50>)
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3304      	adds	r3, #4
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7fe fe8d 	bl	8003a64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004d80 <prvCheckTasksWaitingTermination+0x54>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	4a0b      	ldr	r2, [pc, #44]	@ (8004d80 <prvCheckTasksWaitingTermination+0x54>)
 8004d52:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d54:	4b0b      	ldr	r3, [pc, #44]	@ (8004d84 <prvCheckTasksWaitingTermination+0x58>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8004d84 <prvCheckTasksWaitingTermination+0x58>)
 8004d5c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004d5e:	f000 fad5 	bl	800530c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f810 	bl	8004d88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d68:	4b06      	ldr	r3, [pc, #24]	@ (8004d84 <prvCheckTasksWaitingTermination+0x58>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1e1      	bne.n	8004d34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004d70:	bf00      	nop
 8004d72:	bf00      	nop
 8004d74:	3708      	adds	r7, #8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	20000618 	.word	0x20000618
 8004d80:	20000644 	.word	0x20000644
 8004d84:	2000062c 	.word	0x2000062c

08004d88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	334c      	adds	r3, #76	@ 0x4c
 8004d94:	4618      	mov	r0, r3
 8004d96:	f001 faef 	bl	8006378 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d108      	bne.n	8004db6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da8:	4618      	mov	r0, r3
 8004daa:	f000 fc2b 	bl	8005604 <vPortFree>
				vPortFree( pxTCB );
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 fc28 	bl	8005604 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004db4:	e019      	b.n	8004dea <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d103      	bne.n	8004dc8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 fc1f 	bl	8005604 <vPortFree>
	}
 8004dc6:	e010      	b.n	8004dea <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d00b      	beq.n	8004dea <prvDeleteTCB+0x62>
	__asm volatile
 8004dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd6:	f383 8811 	msr	BASEPRI, r3
 8004dda:	f3bf 8f6f 	isb	sy
 8004dde:	f3bf 8f4f 	dsb	sy
 8004de2:	60fb      	str	r3, [r7, #12]
}
 8004de4:	bf00      	nop
 8004de6:	bf00      	nop
 8004de8:	e7fd      	b.n	8004de6 <prvDeleteTCB+0x5e>
	}
 8004dea:	bf00      	nop
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
	...

08004df4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8004e2c <prvResetNextTaskUnblockTime+0x38>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d104      	bne.n	8004e0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e04:	4b0a      	ldr	r3, [pc, #40]	@ (8004e30 <prvResetNextTaskUnblockTime+0x3c>)
 8004e06:	f04f 32ff 	mov.w	r2, #4294967295
 8004e0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e0c:	e008      	b.n	8004e20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e0e:	4b07      	ldr	r3, [pc, #28]	@ (8004e2c <prvResetNextTaskUnblockTime+0x38>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	4a04      	ldr	r2, [pc, #16]	@ (8004e30 <prvResetNextTaskUnblockTime+0x3c>)
 8004e1e:	6013      	str	r3, [r2, #0]
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	200005fc 	.word	0x200005fc
 8004e30:	20000664 	.word	0x20000664

08004e34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e68 <xTaskGetSchedulerState+0x34>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d102      	bne.n	8004e48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004e42:	2301      	movs	r3, #1
 8004e44:	607b      	str	r3, [r7, #4]
 8004e46:	e008      	b.n	8004e5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e48:	4b08      	ldr	r3, [pc, #32]	@ (8004e6c <xTaskGetSchedulerState+0x38>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d102      	bne.n	8004e56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004e50:	2302      	movs	r3, #2
 8004e52:	607b      	str	r3, [r7, #4]
 8004e54:	e001      	b.n	8004e5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004e56:	2300      	movs	r3, #0
 8004e58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004e5a:	687b      	ldr	r3, [r7, #4]
	}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	20000650 	.word	0x20000650
 8004e6c:	2000066c 	.word	0x2000066c

08004e70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d070      	beq.n	8004f68 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004e86:	4b3b      	ldr	r3, [pc, #236]	@ (8004f74 <xTaskPriorityDisinherit+0x104>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d00b      	beq.n	8004ea8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e94:	f383 8811 	msr	BASEPRI, r3
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	60fb      	str	r3, [r7, #12]
}
 8004ea2:	bf00      	nop
 8004ea4:	bf00      	nop
 8004ea6:	e7fd      	b.n	8004ea4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d10b      	bne.n	8004ec8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb4:	f383 8811 	msr	BASEPRI, r3
 8004eb8:	f3bf 8f6f 	isb	sy
 8004ebc:	f3bf 8f4f 	dsb	sy
 8004ec0:	60bb      	str	r3, [r7, #8]
}
 8004ec2:	bf00      	nop
 8004ec4:	bf00      	nop
 8004ec6:	e7fd      	b.n	8004ec4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ecc:	1e5a      	subs	r2, r3, #1
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d044      	beq.n	8004f68 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d140      	bne.n	8004f68 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	3304      	adds	r3, #4
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7fe fdba 	bl	8003a64 <uxListRemove>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d115      	bne.n	8004f22 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004efa:	491f      	ldr	r1, [pc, #124]	@ (8004f78 <xTaskPriorityDisinherit+0x108>)
 8004efc:	4613      	mov	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	440b      	add	r3, r1
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10a      	bne.n	8004f22 <xTaskPriorityDisinherit+0xb2>
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f10:	2201      	movs	r2, #1
 8004f12:	fa02 f303 	lsl.w	r3, r2, r3
 8004f16:	43da      	mvns	r2, r3
 8004f18:	4b18      	ldr	r3, [pc, #96]	@ (8004f7c <xTaskPriorityDisinherit+0x10c>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	4a17      	ldr	r2, [pc, #92]	@ (8004f7c <xTaskPriorityDisinherit+0x10c>)
 8004f20:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f2e:	f1c3 0207 	rsb	r2, r3, #7
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	409a      	lsls	r2, r3
 8004f3e:	4b0f      	ldr	r3, [pc, #60]	@ (8004f7c <xTaskPriorityDisinherit+0x10c>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	4a0d      	ldr	r2, [pc, #52]	@ (8004f7c <xTaskPriorityDisinherit+0x10c>)
 8004f46:	6013      	str	r3, [r2, #0]
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4a08      	ldr	r2, [pc, #32]	@ (8004f78 <xTaskPriorityDisinherit+0x108>)
 8004f56:	441a      	add	r2, r3
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	3304      	adds	r3, #4
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	4610      	mov	r0, r2
 8004f60:	f7fe fd23 	bl	80039aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004f64:	2301      	movs	r3, #1
 8004f66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f68:	697b      	ldr	r3, [r7, #20]
	}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3718      	adds	r7, #24
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	20000544 	.word	0x20000544
 8004f78:	20000548 	.word	0x20000548
 8004f7c:	2000064c 	.word	0x2000064c

08004f80 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f8a:	4b29      	ldr	r3, [pc, #164]	@ (8005030 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f90:	4b28      	ldr	r3, [pc, #160]	@ (8005034 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	3304      	adds	r3, #4
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fe fd64 	bl	8003a64 <uxListRemove>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10b      	bne.n	8004fba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004fa2:	4b24      	ldr	r3, [pc, #144]	@ (8005034 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa8:	2201      	movs	r2, #1
 8004faa:	fa02 f303 	lsl.w	r3, r2, r3
 8004fae:	43da      	mvns	r2, r3
 8004fb0:	4b21      	ldr	r3, [pc, #132]	@ (8005038 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	4a20      	ldr	r2, [pc, #128]	@ (8005038 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004fb8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc0:	d10a      	bne.n	8004fd8 <prvAddCurrentTaskToDelayedList+0x58>
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d007      	beq.n	8004fd8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8005034 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3304      	adds	r3, #4
 8004fce:	4619      	mov	r1, r3
 8004fd0:	481a      	ldr	r0, [pc, #104]	@ (800503c <prvAddCurrentTaskToDelayedList+0xbc>)
 8004fd2:	f7fe fcea 	bl	80039aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004fd6:	e026      	b.n	8005026 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4413      	add	r3, r2
 8004fde:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004fe0:	4b14      	ldr	r3, [pc, #80]	@ (8005034 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d209      	bcs.n	8005004 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ff0:	4b13      	ldr	r3, [pc, #76]	@ (8005040 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8005034 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	3304      	adds	r3, #4
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	4610      	mov	r0, r2
 8004ffe:	f7fe fcf8 	bl	80039f2 <vListInsert>
}
 8005002:	e010      	b.n	8005026 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005004:	4b0f      	ldr	r3, [pc, #60]	@ (8005044 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	4b0a      	ldr	r3, [pc, #40]	@ (8005034 <prvAddCurrentTaskToDelayedList+0xb4>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	3304      	adds	r3, #4
 800500e:	4619      	mov	r1, r3
 8005010:	4610      	mov	r0, r2
 8005012:	f7fe fcee 	bl	80039f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005016:	4b0c      	ldr	r3, [pc, #48]	@ (8005048 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	429a      	cmp	r2, r3
 800501e:	d202      	bcs.n	8005026 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005020:	4a09      	ldr	r2, [pc, #36]	@ (8005048 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	6013      	str	r3, [r2, #0]
}
 8005026:	bf00      	nop
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	20000648 	.word	0x20000648
 8005034:	20000544 	.word	0x20000544
 8005038:	2000064c 	.word	0x2000064c
 800503c:	20000630 	.word	0x20000630
 8005040:	20000600 	.word	0x20000600
 8005044:	200005fc 	.word	0x200005fc
 8005048:	20000664 	.word	0x20000664

0800504c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	3b04      	subs	r3, #4
 800505c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005064:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	3b04      	subs	r3, #4
 800506a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	f023 0201 	bic.w	r2, r3, #1
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	3b04      	subs	r3, #4
 800507a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800507c:	4a0c      	ldr	r2, [pc, #48]	@ (80050b0 <pxPortInitialiseStack+0x64>)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	3b14      	subs	r3, #20
 8005086:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	3b04      	subs	r3, #4
 8005092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f06f 0202 	mvn.w	r2, #2
 800509a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	3b20      	subs	r3, #32
 80050a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80050a2:	68fb      	ldr	r3, [r7, #12]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3714      	adds	r7, #20
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr
 80050b0:	080050b5 	.word	0x080050b5

080050b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80050ba:	2300      	movs	r3, #0
 80050bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80050be:	4b13      	ldr	r3, [pc, #76]	@ (800510c <prvTaskExitError+0x58>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c6:	d00b      	beq.n	80050e0 <prvTaskExitError+0x2c>
	__asm volatile
 80050c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050cc:	f383 8811 	msr	BASEPRI, r3
 80050d0:	f3bf 8f6f 	isb	sy
 80050d4:	f3bf 8f4f 	dsb	sy
 80050d8:	60fb      	str	r3, [r7, #12]
}
 80050da:	bf00      	nop
 80050dc:	bf00      	nop
 80050de:	e7fd      	b.n	80050dc <prvTaskExitError+0x28>
	__asm volatile
 80050e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e4:	f383 8811 	msr	BASEPRI, r3
 80050e8:	f3bf 8f6f 	isb	sy
 80050ec:	f3bf 8f4f 	dsb	sy
 80050f0:	60bb      	str	r3, [r7, #8]
}
 80050f2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80050f4:	bf00      	nop
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d0fc      	beq.n	80050f6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80050fc:	bf00      	nop
 80050fe:	bf00      	nop
 8005100:	3714      	adds	r7, #20
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	2000000c 	.word	0x2000000c

08005110 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005110:	4b07      	ldr	r3, [pc, #28]	@ (8005130 <pxCurrentTCBConst2>)
 8005112:	6819      	ldr	r1, [r3, #0]
 8005114:	6808      	ldr	r0, [r1, #0]
 8005116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800511a:	f380 8809 	msr	PSP, r0
 800511e:	f3bf 8f6f 	isb	sy
 8005122:	f04f 0000 	mov.w	r0, #0
 8005126:	f380 8811 	msr	BASEPRI, r0
 800512a:	4770      	bx	lr
 800512c:	f3af 8000 	nop.w

08005130 <pxCurrentTCBConst2>:
 8005130:	20000544 	.word	0x20000544
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005134:	bf00      	nop
 8005136:	bf00      	nop

08005138 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005138:	4808      	ldr	r0, [pc, #32]	@ (800515c <prvPortStartFirstTask+0x24>)
 800513a:	6800      	ldr	r0, [r0, #0]
 800513c:	6800      	ldr	r0, [r0, #0]
 800513e:	f380 8808 	msr	MSP, r0
 8005142:	f04f 0000 	mov.w	r0, #0
 8005146:	f380 8814 	msr	CONTROL, r0
 800514a:	b662      	cpsie	i
 800514c:	b661      	cpsie	f
 800514e:	f3bf 8f4f 	dsb	sy
 8005152:	f3bf 8f6f 	isb	sy
 8005156:	df00      	svc	0
 8005158:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800515a:	bf00      	nop
 800515c:	e000ed08 	.word	0xe000ed08

08005160 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005166:	4b47      	ldr	r3, [pc, #284]	@ (8005284 <xPortStartScheduler+0x124>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a47      	ldr	r2, [pc, #284]	@ (8005288 <xPortStartScheduler+0x128>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d10b      	bne.n	8005188 <xPortStartScheduler+0x28>
	__asm volatile
 8005170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005174:	f383 8811 	msr	BASEPRI, r3
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	60fb      	str	r3, [r7, #12]
}
 8005182:	bf00      	nop
 8005184:	bf00      	nop
 8005186:	e7fd      	b.n	8005184 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005188:	4b3e      	ldr	r3, [pc, #248]	@ (8005284 <xPortStartScheduler+0x124>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a3f      	ldr	r2, [pc, #252]	@ (800528c <xPortStartScheduler+0x12c>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d10b      	bne.n	80051aa <xPortStartScheduler+0x4a>
	__asm volatile
 8005192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005196:	f383 8811 	msr	BASEPRI, r3
 800519a:	f3bf 8f6f 	isb	sy
 800519e:	f3bf 8f4f 	dsb	sy
 80051a2:	613b      	str	r3, [r7, #16]
}
 80051a4:	bf00      	nop
 80051a6:	bf00      	nop
 80051a8:	e7fd      	b.n	80051a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80051aa:	4b39      	ldr	r3, [pc, #228]	@ (8005290 <xPortStartScheduler+0x130>)
 80051ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	22ff      	movs	r2, #255	@ 0xff
 80051ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80051c4:	78fb      	ldrb	r3, [r7, #3]
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80051cc:	b2da      	uxtb	r2, r3
 80051ce:	4b31      	ldr	r3, [pc, #196]	@ (8005294 <xPortStartScheduler+0x134>)
 80051d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80051d2:	4b31      	ldr	r3, [pc, #196]	@ (8005298 <xPortStartScheduler+0x138>)
 80051d4:	2207      	movs	r2, #7
 80051d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051d8:	e009      	b.n	80051ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80051da:	4b2f      	ldr	r3, [pc, #188]	@ (8005298 <xPortStartScheduler+0x138>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	3b01      	subs	r3, #1
 80051e0:	4a2d      	ldr	r2, [pc, #180]	@ (8005298 <xPortStartScheduler+0x138>)
 80051e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80051e4:	78fb      	ldrb	r3, [r7, #3]
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051ee:	78fb      	ldrb	r3, [r7, #3]
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051f6:	2b80      	cmp	r3, #128	@ 0x80
 80051f8:	d0ef      	beq.n	80051da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80051fa:	4b27      	ldr	r3, [pc, #156]	@ (8005298 <xPortStartScheduler+0x138>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f1c3 0307 	rsb	r3, r3, #7
 8005202:	2b04      	cmp	r3, #4
 8005204:	d00b      	beq.n	800521e <xPortStartScheduler+0xbe>
	__asm volatile
 8005206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800520a:	f383 8811 	msr	BASEPRI, r3
 800520e:	f3bf 8f6f 	isb	sy
 8005212:	f3bf 8f4f 	dsb	sy
 8005216:	60bb      	str	r3, [r7, #8]
}
 8005218:	bf00      	nop
 800521a:	bf00      	nop
 800521c:	e7fd      	b.n	800521a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800521e:	4b1e      	ldr	r3, [pc, #120]	@ (8005298 <xPortStartScheduler+0x138>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	021b      	lsls	r3, r3, #8
 8005224:	4a1c      	ldr	r2, [pc, #112]	@ (8005298 <xPortStartScheduler+0x138>)
 8005226:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005228:	4b1b      	ldr	r3, [pc, #108]	@ (8005298 <xPortStartScheduler+0x138>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005230:	4a19      	ldr	r2, [pc, #100]	@ (8005298 <xPortStartScheduler+0x138>)
 8005232:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	b2da      	uxtb	r2, r3
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800523c:	4b17      	ldr	r3, [pc, #92]	@ (800529c <xPortStartScheduler+0x13c>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a16      	ldr	r2, [pc, #88]	@ (800529c <xPortStartScheduler+0x13c>)
 8005242:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005246:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005248:	4b14      	ldr	r3, [pc, #80]	@ (800529c <xPortStartScheduler+0x13c>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a13      	ldr	r2, [pc, #76]	@ (800529c <xPortStartScheduler+0x13c>)
 800524e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005252:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005254:	f000 f8da 	bl	800540c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005258:	4b11      	ldr	r3, [pc, #68]	@ (80052a0 <xPortStartScheduler+0x140>)
 800525a:	2200      	movs	r2, #0
 800525c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800525e:	f000 f8f9 	bl	8005454 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005262:	4b10      	ldr	r3, [pc, #64]	@ (80052a4 <xPortStartScheduler+0x144>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a0f      	ldr	r2, [pc, #60]	@ (80052a4 <xPortStartScheduler+0x144>)
 8005268:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800526c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800526e:	f7ff ff63 	bl	8005138 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005272:	f7ff fb8f 	bl	8004994 <vTaskSwitchContext>
	prvTaskExitError();
 8005276:	f7ff ff1d 	bl	80050b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3718      	adds	r7, #24
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	e000ed00 	.word	0xe000ed00
 8005288:	410fc271 	.word	0x410fc271
 800528c:	410fc270 	.word	0x410fc270
 8005290:	e000e400 	.word	0xe000e400
 8005294:	20000670 	.word	0x20000670
 8005298:	20000674 	.word	0x20000674
 800529c:	e000ed20 	.word	0xe000ed20
 80052a0:	2000000c 	.word	0x2000000c
 80052a4:	e000ef34 	.word	0xe000ef34

080052a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
	__asm volatile
 80052ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b2:	f383 8811 	msr	BASEPRI, r3
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	607b      	str	r3, [r7, #4]
}
 80052c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80052c2:	4b10      	ldr	r3, [pc, #64]	@ (8005304 <vPortEnterCritical+0x5c>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	3301      	adds	r3, #1
 80052c8:	4a0e      	ldr	r2, [pc, #56]	@ (8005304 <vPortEnterCritical+0x5c>)
 80052ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80052cc:	4b0d      	ldr	r3, [pc, #52]	@ (8005304 <vPortEnterCritical+0x5c>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d110      	bne.n	80052f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80052d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005308 <vPortEnterCritical+0x60>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00b      	beq.n	80052f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80052de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052e2:	f383 8811 	msr	BASEPRI, r3
 80052e6:	f3bf 8f6f 	isb	sy
 80052ea:	f3bf 8f4f 	dsb	sy
 80052ee:	603b      	str	r3, [r7, #0]
}
 80052f0:	bf00      	nop
 80052f2:	bf00      	nop
 80052f4:	e7fd      	b.n	80052f2 <vPortEnterCritical+0x4a>
	}
}
 80052f6:	bf00      	nop
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	2000000c 	.word	0x2000000c
 8005308:	e000ed04 	.word	0xe000ed04

0800530c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005312:	4b12      	ldr	r3, [pc, #72]	@ (800535c <vPortExitCritical+0x50>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10b      	bne.n	8005332 <vPortExitCritical+0x26>
	__asm volatile
 800531a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800531e:	f383 8811 	msr	BASEPRI, r3
 8005322:	f3bf 8f6f 	isb	sy
 8005326:	f3bf 8f4f 	dsb	sy
 800532a:	607b      	str	r3, [r7, #4]
}
 800532c:	bf00      	nop
 800532e:	bf00      	nop
 8005330:	e7fd      	b.n	800532e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005332:	4b0a      	ldr	r3, [pc, #40]	@ (800535c <vPortExitCritical+0x50>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	3b01      	subs	r3, #1
 8005338:	4a08      	ldr	r2, [pc, #32]	@ (800535c <vPortExitCritical+0x50>)
 800533a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800533c:	4b07      	ldr	r3, [pc, #28]	@ (800535c <vPortExitCritical+0x50>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d105      	bne.n	8005350 <vPortExitCritical+0x44>
 8005344:	2300      	movs	r3, #0
 8005346:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800534e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr
 800535c:	2000000c 	.word	0x2000000c

08005360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005360:	f3ef 8009 	mrs	r0, PSP
 8005364:	f3bf 8f6f 	isb	sy
 8005368:	4b15      	ldr	r3, [pc, #84]	@ (80053c0 <pxCurrentTCBConst>)
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	f01e 0f10 	tst.w	lr, #16
 8005370:	bf08      	it	eq
 8005372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800537a:	6010      	str	r0, [r2, #0]
 800537c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005380:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005384:	f380 8811 	msr	BASEPRI, r0
 8005388:	f3bf 8f4f 	dsb	sy
 800538c:	f3bf 8f6f 	isb	sy
 8005390:	f7ff fb00 	bl	8004994 <vTaskSwitchContext>
 8005394:	f04f 0000 	mov.w	r0, #0
 8005398:	f380 8811 	msr	BASEPRI, r0
 800539c:	bc09      	pop	{r0, r3}
 800539e:	6819      	ldr	r1, [r3, #0]
 80053a0:	6808      	ldr	r0, [r1, #0]
 80053a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053a6:	f01e 0f10 	tst.w	lr, #16
 80053aa:	bf08      	it	eq
 80053ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80053b0:	f380 8809 	msr	PSP, r0
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	f3af 8000 	nop.w

080053c0 <pxCurrentTCBConst>:
 80053c0:	20000544 	.word	0x20000544
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80053c4:	bf00      	nop
 80053c6:	bf00      	nop

080053c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
	__asm volatile
 80053ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	607b      	str	r3, [r7, #4]
}
 80053e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80053e2:	f7ff fa1d 	bl	8004820 <xTaskIncrementTick>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d003      	beq.n	80053f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80053ec:	4b06      	ldr	r3, [pc, #24]	@ (8005408 <SysTick_Handler+0x40>)
 80053ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	2300      	movs	r3, #0
 80053f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	f383 8811 	msr	BASEPRI, r3
}
 80053fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005400:	bf00      	nop
 8005402:	3708      	adds	r7, #8
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	e000ed04 	.word	0xe000ed04

0800540c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800540c:	b480      	push	{r7}
 800540e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005410:	4b0b      	ldr	r3, [pc, #44]	@ (8005440 <vPortSetupTimerInterrupt+0x34>)
 8005412:	2200      	movs	r2, #0
 8005414:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005416:	4b0b      	ldr	r3, [pc, #44]	@ (8005444 <vPortSetupTimerInterrupt+0x38>)
 8005418:	2200      	movs	r2, #0
 800541a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800541c:	4b0a      	ldr	r3, [pc, #40]	@ (8005448 <vPortSetupTimerInterrupt+0x3c>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a0a      	ldr	r2, [pc, #40]	@ (800544c <vPortSetupTimerInterrupt+0x40>)
 8005422:	fba2 2303 	umull	r2, r3, r2, r3
 8005426:	099b      	lsrs	r3, r3, #6
 8005428:	4a09      	ldr	r2, [pc, #36]	@ (8005450 <vPortSetupTimerInterrupt+0x44>)
 800542a:	3b01      	subs	r3, #1
 800542c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800542e:	4b04      	ldr	r3, [pc, #16]	@ (8005440 <vPortSetupTimerInterrupt+0x34>)
 8005430:	2207      	movs	r2, #7
 8005432:	601a      	str	r2, [r3, #0]
}
 8005434:	bf00      	nop
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	e000e010 	.word	0xe000e010
 8005444:	e000e018 	.word	0xe000e018
 8005448:	20000000 	.word	0x20000000
 800544c:	10624dd3 	.word	0x10624dd3
 8005450:	e000e014 	.word	0xe000e014

08005454 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005454:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005464 <vPortEnableVFP+0x10>
 8005458:	6801      	ldr	r1, [r0, #0]
 800545a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800545e:	6001      	str	r1, [r0, #0]
 8005460:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005462:	bf00      	nop
 8005464:	e000ed88 	.word	0xe000ed88

08005468 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b08a      	sub	sp, #40	@ 0x28
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005470:	2300      	movs	r3, #0
 8005472:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005474:	f7ff f928 	bl	80046c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005478:	4b5c      	ldr	r3, [pc, #368]	@ (80055ec <pvPortMalloc+0x184>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d101      	bne.n	8005484 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005480:	f000 f924 	bl	80056cc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005484:	4b5a      	ldr	r3, [pc, #360]	@ (80055f0 <pvPortMalloc+0x188>)
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4013      	ands	r3, r2
 800548c:	2b00      	cmp	r3, #0
 800548e:	f040 8095 	bne.w	80055bc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d01e      	beq.n	80054d6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005498:	2208      	movs	r2, #8
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4413      	add	r3, r2
 800549e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f003 0307 	and.w	r3, r3, #7
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d015      	beq.n	80054d6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f023 0307 	bic.w	r3, r3, #7
 80054b0:	3308      	adds	r3, #8
 80054b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f003 0307 	and.w	r3, r3, #7
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00b      	beq.n	80054d6 <pvPortMalloc+0x6e>
	__asm volatile
 80054be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c2:	f383 8811 	msr	BASEPRI, r3
 80054c6:	f3bf 8f6f 	isb	sy
 80054ca:	f3bf 8f4f 	dsb	sy
 80054ce:	617b      	str	r3, [r7, #20]
}
 80054d0:	bf00      	nop
 80054d2:	bf00      	nop
 80054d4:	e7fd      	b.n	80054d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d06f      	beq.n	80055bc <pvPortMalloc+0x154>
 80054dc:	4b45      	ldr	r3, [pc, #276]	@ (80055f4 <pvPortMalloc+0x18c>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d86a      	bhi.n	80055bc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80054e6:	4b44      	ldr	r3, [pc, #272]	@ (80055f8 <pvPortMalloc+0x190>)
 80054e8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80054ea:	4b43      	ldr	r3, [pc, #268]	@ (80055f8 <pvPortMalloc+0x190>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054f0:	e004      	b.n	80054fc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80054f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80054f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	429a      	cmp	r2, r3
 8005504:	d903      	bls.n	800550e <pvPortMalloc+0xa6>
 8005506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1f1      	bne.n	80054f2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800550e:	4b37      	ldr	r3, [pc, #220]	@ (80055ec <pvPortMalloc+0x184>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005514:	429a      	cmp	r2, r3
 8005516:	d051      	beq.n	80055bc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2208      	movs	r2, #8
 800551e:	4413      	add	r3, r2
 8005520:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	6a3b      	ldr	r3, [r7, #32]
 8005528:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800552a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	1ad2      	subs	r2, r2, r3
 8005532:	2308      	movs	r3, #8
 8005534:	005b      	lsls	r3, r3, #1
 8005536:	429a      	cmp	r2, r3
 8005538:	d920      	bls.n	800557c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800553a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4413      	add	r3, r2
 8005540:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	f003 0307 	and.w	r3, r3, #7
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00b      	beq.n	8005564 <pvPortMalloc+0xfc>
	__asm volatile
 800554c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005550:	f383 8811 	msr	BASEPRI, r3
 8005554:	f3bf 8f6f 	isb	sy
 8005558:	f3bf 8f4f 	dsb	sy
 800555c:	613b      	str	r3, [r7, #16]
}
 800555e:	bf00      	nop
 8005560:	bf00      	nop
 8005562:	e7fd      	b.n	8005560 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005566:	685a      	ldr	r2, [r3, #4]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	1ad2      	subs	r2, r2, r3
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005576:	69b8      	ldr	r0, [r7, #24]
 8005578:	f000 f90a 	bl	8005790 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800557c:	4b1d      	ldr	r3, [pc, #116]	@ (80055f4 <pvPortMalloc+0x18c>)
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	4a1b      	ldr	r2, [pc, #108]	@ (80055f4 <pvPortMalloc+0x18c>)
 8005588:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800558a:	4b1a      	ldr	r3, [pc, #104]	@ (80055f4 <pvPortMalloc+0x18c>)
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	4b1b      	ldr	r3, [pc, #108]	@ (80055fc <pvPortMalloc+0x194>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	429a      	cmp	r2, r3
 8005594:	d203      	bcs.n	800559e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005596:	4b17      	ldr	r3, [pc, #92]	@ (80055f4 <pvPortMalloc+0x18c>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a18      	ldr	r2, [pc, #96]	@ (80055fc <pvPortMalloc+0x194>)
 800559c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800559e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	4b13      	ldr	r3, [pc, #76]	@ (80055f0 <pvPortMalloc+0x188>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	431a      	orrs	r2, r3
 80055a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80055ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ae:	2200      	movs	r2, #0
 80055b0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80055b2:	4b13      	ldr	r3, [pc, #76]	@ (8005600 <pvPortMalloc+0x198>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	3301      	adds	r3, #1
 80055b8:	4a11      	ldr	r2, [pc, #68]	@ (8005600 <pvPortMalloc+0x198>)
 80055ba:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80055bc:	f7ff f892 	bl	80046e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	f003 0307 	and.w	r3, r3, #7
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00b      	beq.n	80055e2 <pvPortMalloc+0x17a>
	__asm volatile
 80055ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ce:	f383 8811 	msr	BASEPRI, r3
 80055d2:	f3bf 8f6f 	isb	sy
 80055d6:	f3bf 8f4f 	dsb	sy
 80055da:	60fb      	str	r3, [r7, #12]
}
 80055dc:	bf00      	nop
 80055de:	bf00      	nop
 80055e0:	e7fd      	b.n	80055de <pvPortMalloc+0x176>
	return pvReturn;
 80055e2:	69fb      	ldr	r3, [r7, #28]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3728      	adds	r7, #40	@ 0x28
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	20004280 	.word	0x20004280
 80055f0:	20004294 	.word	0x20004294
 80055f4:	20004284 	.word	0x20004284
 80055f8:	20004278 	.word	0x20004278
 80055fc:	20004288 	.word	0x20004288
 8005600:	2000428c 	.word	0x2000428c

08005604 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b086      	sub	sp, #24
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d04f      	beq.n	80056b6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005616:	2308      	movs	r3, #8
 8005618:	425b      	negs	r3, r3
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	4413      	add	r3, r2
 800561e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	4b25      	ldr	r3, [pc, #148]	@ (80056c0 <vPortFree+0xbc>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4013      	ands	r3, r2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10b      	bne.n	800564a <vPortFree+0x46>
	__asm volatile
 8005632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005636:	f383 8811 	msr	BASEPRI, r3
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	f3bf 8f4f 	dsb	sy
 8005642:	60fb      	str	r3, [r7, #12]
}
 8005644:	bf00      	nop
 8005646:	bf00      	nop
 8005648:	e7fd      	b.n	8005646 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00b      	beq.n	800566a <vPortFree+0x66>
	__asm volatile
 8005652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005656:	f383 8811 	msr	BASEPRI, r3
 800565a:	f3bf 8f6f 	isb	sy
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	60bb      	str	r3, [r7, #8]
}
 8005664:	bf00      	nop
 8005666:	bf00      	nop
 8005668:	e7fd      	b.n	8005666 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	4b14      	ldr	r3, [pc, #80]	@ (80056c0 <vPortFree+0xbc>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4013      	ands	r3, r2
 8005674:	2b00      	cmp	r3, #0
 8005676:	d01e      	beq.n	80056b6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d11a      	bne.n	80056b6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	4b0e      	ldr	r3, [pc, #56]	@ (80056c0 <vPortFree+0xbc>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	43db      	mvns	r3, r3
 800568a:	401a      	ands	r2, r3
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005690:	f7ff f81a 	bl	80046c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	685a      	ldr	r2, [r3, #4]
 8005698:	4b0a      	ldr	r3, [pc, #40]	@ (80056c4 <vPortFree+0xc0>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4413      	add	r3, r2
 800569e:	4a09      	ldr	r2, [pc, #36]	@ (80056c4 <vPortFree+0xc0>)
 80056a0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80056a2:	6938      	ldr	r0, [r7, #16]
 80056a4:	f000 f874 	bl	8005790 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80056a8:	4b07      	ldr	r3, [pc, #28]	@ (80056c8 <vPortFree+0xc4>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	3301      	adds	r3, #1
 80056ae:	4a06      	ldr	r2, [pc, #24]	@ (80056c8 <vPortFree+0xc4>)
 80056b0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80056b2:	f7ff f817 	bl	80046e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80056b6:	bf00      	nop
 80056b8:	3718      	adds	r7, #24
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	20004294 	.word	0x20004294
 80056c4:	20004284 	.word	0x20004284
 80056c8:	20004290 	.word	0x20004290

080056cc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80056d2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80056d6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80056d8:	4b27      	ldr	r3, [pc, #156]	@ (8005778 <prvHeapInit+0xac>)
 80056da:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f003 0307 	and.w	r3, r3, #7
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00c      	beq.n	8005700 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	3307      	adds	r3, #7
 80056ea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f023 0307 	bic.w	r3, r3, #7
 80056f2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80056f4:	68ba      	ldr	r2, [r7, #8]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	4a1f      	ldr	r2, [pc, #124]	@ (8005778 <prvHeapInit+0xac>)
 80056fc:	4413      	add	r3, r2
 80056fe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005704:	4a1d      	ldr	r2, [pc, #116]	@ (800577c <prvHeapInit+0xb0>)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800570a:	4b1c      	ldr	r3, [pc, #112]	@ (800577c <prvHeapInit+0xb0>)
 800570c:	2200      	movs	r2, #0
 800570e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	4413      	add	r3, r2
 8005716:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005718:	2208      	movs	r2, #8
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	1a9b      	subs	r3, r3, r2
 800571e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f023 0307 	bic.w	r3, r3, #7
 8005726:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	4a15      	ldr	r2, [pc, #84]	@ (8005780 <prvHeapInit+0xb4>)
 800572c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800572e:	4b14      	ldr	r3, [pc, #80]	@ (8005780 <prvHeapInit+0xb4>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2200      	movs	r2, #0
 8005734:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005736:	4b12      	ldr	r3, [pc, #72]	@ (8005780 <prvHeapInit+0xb4>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2200      	movs	r2, #0
 800573c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	1ad2      	subs	r2, r2, r3
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800574c:	4b0c      	ldr	r3, [pc, #48]	@ (8005780 <prvHeapInit+0xb4>)
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	4a0a      	ldr	r2, [pc, #40]	@ (8005784 <prvHeapInit+0xb8>)
 800575a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	4a09      	ldr	r2, [pc, #36]	@ (8005788 <prvHeapInit+0xbc>)
 8005762:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005764:	4b09      	ldr	r3, [pc, #36]	@ (800578c <prvHeapInit+0xc0>)
 8005766:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800576a:	601a      	str	r2, [r3, #0]
}
 800576c:	bf00      	nop
 800576e:	3714      	adds	r7, #20
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr
 8005778:	20000678 	.word	0x20000678
 800577c:	20004278 	.word	0x20004278
 8005780:	20004280 	.word	0x20004280
 8005784:	20004288 	.word	0x20004288
 8005788:	20004284 	.word	0x20004284
 800578c:	20004294 	.word	0x20004294

08005790 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005798:	4b28      	ldr	r3, [pc, #160]	@ (800583c <prvInsertBlockIntoFreeList+0xac>)
 800579a:	60fb      	str	r3, [r7, #12]
 800579c:	e002      	b.n	80057a4 <prvInsertBlockIntoFreeList+0x14>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	60fb      	str	r3, [r7, #12]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d8f7      	bhi.n	800579e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	4413      	add	r3, r2
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d108      	bne.n	80057d2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	685a      	ldr	r2, [r3, #4]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	441a      	add	r2, r3
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	441a      	add	r2, r3
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d118      	bne.n	8005818 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	4b15      	ldr	r3, [pc, #84]	@ (8005840 <prvInsertBlockIntoFreeList+0xb0>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d00d      	beq.n	800580e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685a      	ldr	r2, [r3, #4]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	441a      	add	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	601a      	str	r2, [r3, #0]
 800580c:	e008      	b.n	8005820 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800580e:	4b0c      	ldr	r3, [pc, #48]	@ (8005840 <prvInsertBlockIntoFreeList+0xb0>)
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	601a      	str	r2, [r3, #0]
 8005816:	e003      	b.n	8005820 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	429a      	cmp	r2, r3
 8005826:	d002      	beq.n	800582e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800582e:	bf00      	nop
 8005830:	3714      	adds	r7, #20
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	20004278 	.word	0x20004278
 8005840:	20004280 	.word	0x20004280

08005844 <__cvt>:
 8005844:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005848:	ec57 6b10 	vmov	r6, r7, d0
 800584c:	2f00      	cmp	r7, #0
 800584e:	460c      	mov	r4, r1
 8005850:	4619      	mov	r1, r3
 8005852:	463b      	mov	r3, r7
 8005854:	bfbb      	ittet	lt
 8005856:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800585a:	461f      	movlt	r7, r3
 800585c:	2300      	movge	r3, #0
 800585e:	232d      	movlt	r3, #45	@ 0x2d
 8005860:	700b      	strb	r3, [r1, #0]
 8005862:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005864:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005868:	4691      	mov	r9, r2
 800586a:	f023 0820 	bic.w	r8, r3, #32
 800586e:	bfbc      	itt	lt
 8005870:	4632      	movlt	r2, r6
 8005872:	4616      	movlt	r6, r2
 8005874:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005878:	d005      	beq.n	8005886 <__cvt+0x42>
 800587a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800587e:	d100      	bne.n	8005882 <__cvt+0x3e>
 8005880:	3401      	adds	r4, #1
 8005882:	2102      	movs	r1, #2
 8005884:	e000      	b.n	8005888 <__cvt+0x44>
 8005886:	2103      	movs	r1, #3
 8005888:	ab03      	add	r3, sp, #12
 800588a:	9301      	str	r3, [sp, #4]
 800588c:	ab02      	add	r3, sp, #8
 800588e:	9300      	str	r3, [sp, #0]
 8005890:	ec47 6b10 	vmov	d0, r6, r7
 8005894:	4653      	mov	r3, sl
 8005896:	4622      	mov	r2, r4
 8005898:	f000 fec6 	bl	8006628 <_dtoa_r>
 800589c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80058a0:	4605      	mov	r5, r0
 80058a2:	d119      	bne.n	80058d8 <__cvt+0x94>
 80058a4:	f019 0f01 	tst.w	r9, #1
 80058a8:	d00e      	beq.n	80058c8 <__cvt+0x84>
 80058aa:	eb00 0904 	add.w	r9, r0, r4
 80058ae:	2200      	movs	r2, #0
 80058b0:	2300      	movs	r3, #0
 80058b2:	4630      	mov	r0, r6
 80058b4:	4639      	mov	r1, r7
 80058b6:	f7fb f907 	bl	8000ac8 <__aeabi_dcmpeq>
 80058ba:	b108      	cbz	r0, 80058c0 <__cvt+0x7c>
 80058bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80058c0:	2230      	movs	r2, #48	@ 0x30
 80058c2:	9b03      	ldr	r3, [sp, #12]
 80058c4:	454b      	cmp	r3, r9
 80058c6:	d31e      	bcc.n	8005906 <__cvt+0xc2>
 80058c8:	9b03      	ldr	r3, [sp, #12]
 80058ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80058cc:	1b5b      	subs	r3, r3, r5
 80058ce:	4628      	mov	r0, r5
 80058d0:	6013      	str	r3, [r2, #0]
 80058d2:	b004      	add	sp, #16
 80058d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80058dc:	eb00 0904 	add.w	r9, r0, r4
 80058e0:	d1e5      	bne.n	80058ae <__cvt+0x6a>
 80058e2:	7803      	ldrb	r3, [r0, #0]
 80058e4:	2b30      	cmp	r3, #48	@ 0x30
 80058e6:	d10a      	bne.n	80058fe <__cvt+0xba>
 80058e8:	2200      	movs	r2, #0
 80058ea:	2300      	movs	r3, #0
 80058ec:	4630      	mov	r0, r6
 80058ee:	4639      	mov	r1, r7
 80058f0:	f7fb f8ea 	bl	8000ac8 <__aeabi_dcmpeq>
 80058f4:	b918      	cbnz	r0, 80058fe <__cvt+0xba>
 80058f6:	f1c4 0401 	rsb	r4, r4, #1
 80058fa:	f8ca 4000 	str.w	r4, [sl]
 80058fe:	f8da 3000 	ldr.w	r3, [sl]
 8005902:	4499      	add	r9, r3
 8005904:	e7d3      	b.n	80058ae <__cvt+0x6a>
 8005906:	1c59      	adds	r1, r3, #1
 8005908:	9103      	str	r1, [sp, #12]
 800590a:	701a      	strb	r2, [r3, #0]
 800590c:	e7d9      	b.n	80058c2 <__cvt+0x7e>

0800590e <__exponent>:
 800590e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005910:	2900      	cmp	r1, #0
 8005912:	bfba      	itte	lt
 8005914:	4249      	neglt	r1, r1
 8005916:	232d      	movlt	r3, #45	@ 0x2d
 8005918:	232b      	movge	r3, #43	@ 0x2b
 800591a:	2909      	cmp	r1, #9
 800591c:	7002      	strb	r2, [r0, #0]
 800591e:	7043      	strb	r3, [r0, #1]
 8005920:	dd29      	ble.n	8005976 <__exponent+0x68>
 8005922:	f10d 0307 	add.w	r3, sp, #7
 8005926:	461d      	mov	r5, r3
 8005928:	270a      	movs	r7, #10
 800592a:	461a      	mov	r2, r3
 800592c:	fbb1 f6f7 	udiv	r6, r1, r7
 8005930:	fb07 1416 	mls	r4, r7, r6, r1
 8005934:	3430      	adds	r4, #48	@ 0x30
 8005936:	f802 4c01 	strb.w	r4, [r2, #-1]
 800593a:	460c      	mov	r4, r1
 800593c:	2c63      	cmp	r4, #99	@ 0x63
 800593e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005942:	4631      	mov	r1, r6
 8005944:	dcf1      	bgt.n	800592a <__exponent+0x1c>
 8005946:	3130      	adds	r1, #48	@ 0x30
 8005948:	1e94      	subs	r4, r2, #2
 800594a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800594e:	1c41      	adds	r1, r0, #1
 8005950:	4623      	mov	r3, r4
 8005952:	42ab      	cmp	r3, r5
 8005954:	d30a      	bcc.n	800596c <__exponent+0x5e>
 8005956:	f10d 0309 	add.w	r3, sp, #9
 800595a:	1a9b      	subs	r3, r3, r2
 800595c:	42ac      	cmp	r4, r5
 800595e:	bf88      	it	hi
 8005960:	2300      	movhi	r3, #0
 8005962:	3302      	adds	r3, #2
 8005964:	4403      	add	r3, r0
 8005966:	1a18      	subs	r0, r3, r0
 8005968:	b003      	add	sp, #12
 800596a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800596c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005970:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005974:	e7ed      	b.n	8005952 <__exponent+0x44>
 8005976:	2330      	movs	r3, #48	@ 0x30
 8005978:	3130      	adds	r1, #48	@ 0x30
 800597a:	7083      	strb	r3, [r0, #2]
 800597c:	70c1      	strb	r1, [r0, #3]
 800597e:	1d03      	adds	r3, r0, #4
 8005980:	e7f1      	b.n	8005966 <__exponent+0x58>
	...

08005984 <_printf_float>:
 8005984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005988:	b08d      	sub	sp, #52	@ 0x34
 800598a:	460c      	mov	r4, r1
 800598c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005990:	4616      	mov	r6, r2
 8005992:	461f      	mov	r7, r3
 8005994:	4605      	mov	r5, r0
 8005996:	f000 fcdb 	bl	8006350 <_localeconv_r>
 800599a:	6803      	ldr	r3, [r0, #0]
 800599c:	9304      	str	r3, [sp, #16]
 800599e:	4618      	mov	r0, r3
 80059a0:	f7fa fc66 	bl	8000270 <strlen>
 80059a4:	2300      	movs	r3, #0
 80059a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80059a8:	f8d8 3000 	ldr.w	r3, [r8]
 80059ac:	9005      	str	r0, [sp, #20]
 80059ae:	3307      	adds	r3, #7
 80059b0:	f023 0307 	bic.w	r3, r3, #7
 80059b4:	f103 0208 	add.w	r2, r3, #8
 80059b8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80059bc:	f8d4 b000 	ldr.w	fp, [r4]
 80059c0:	f8c8 2000 	str.w	r2, [r8]
 80059c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80059c8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80059cc:	9307      	str	r3, [sp, #28]
 80059ce:	f8cd 8018 	str.w	r8, [sp, #24]
 80059d2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80059d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059da:	4b9c      	ldr	r3, [pc, #624]	@ (8005c4c <_printf_float+0x2c8>)
 80059dc:	f04f 32ff 	mov.w	r2, #4294967295
 80059e0:	f7fb f8a4 	bl	8000b2c <__aeabi_dcmpun>
 80059e4:	bb70      	cbnz	r0, 8005a44 <_printf_float+0xc0>
 80059e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059ea:	4b98      	ldr	r3, [pc, #608]	@ (8005c4c <_printf_float+0x2c8>)
 80059ec:	f04f 32ff 	mov.w	r2, #4294967295
 80059f0:	f7fb f87e 	bl	8000af0 <__aeabi_dcmple>
 80059f4:	bb30      	cbnz	r0, 8005a44 <_printf_float+0xc0>
 80059f6:	2200      	movs	r2, #0
 80059f8:	2300      	movs	r3, #0
 80059fa:	4640      	mov	r0, r8
 80059fc:	4649      	mov	r1, r9
 80059fe:	f7fb f86d 	bl	8000adc <__aeabi_dcmplt>
 8005a02:	b110      	cbz	r0, 8005a0a <_printf_float+0x86>
 8005a04:	232d      	movs	r3, #45	@ 0x2d
 8005a06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a0a:	4a91      	ldr	r2, [pc, #580]	@ (8005c50 <_printf_float+0x2cc>)
 8005a0c:	4b91      	ldr	r3, [pc, #580]	@ (8005c54 <_printf_float+0x2d0>)
 8005a0e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005a12:	bf8c      	ite	hi
 8005a14:	4690      	movhi	r8, r2
 8005a16:	4698      	movls	r8, r3
 8005a18:	2303      	movs	r3, #3
 8005a1a:	6123      	str	r3, [r4, #16]
 8005a1c:	f02b 0304 	bic.w	r3, fp, #4
 8005a20:	6023      	str	r3, [r4, #0]
 8005a22:	f04f 0900 	mov.w	r9, #0
 8005a26:	9700      	str	r7, [sp, #0]
 8005a28:	4633      	mov	r3, r6
 8005a2a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005a2c:	4621      	mov	r1, r4
 8005a2e:	4628      	mov	r0, r5
 8005a30:	f000 f9d2 	bl	8005dd8 <_printf_common>
 8005a34:	3001      	adds	r0, #1
 8005a36:	f040 808d 	bne.w	8005b54 <_printf_float+0x1d0>
 8005a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a3e:	b00d      	add	sp, #52	@ 0x34
 8005a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a44:	4642      	mov	r2, r8
 8005a46:	464b      	mov	r3, r9
 8005a48:	4640      	mov	r0, r8
 8005a4a:	4649      	mov	r1, r9
 8005a4c:	f7fb f86e 	bl	8000b2c <__aeabi_dcmpun>
 8005a50:	b140      	cbz	r0, 8005a64 <_printf_float+0xe0>
 8005a52:	464b      	mov	r3, r9
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	bfbc      	itt	lt
 8005a58:	232d      	movlt	r3, #45	@ 0x2d
 8005a5a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005a5e:	4a7e      	ldr	r2, [pc, #504]	@ (8005c58 <_printf_float+0x2d4>)
 8005a60:	4b7e      	ldr	r3, [pc, #504]	@ (8005c5c <_printf_float+0x2d8>)
 8005a62:	e7d4      	b.n	8005a0e <_printf_float+0x8a>
 8005a64:	6863      	ldr	r3, [r4, #4]
 8005a66:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005a6a:	9206      	str	r2, [sp, #24]
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	d13b      	bne.n	8005ae8 <_printf_float+0x164>
 8005a70:	2306      	movs	r3, #6
 8005a72:	6063      	str	r3, [r4, #4]
 8005a74:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005a78:	2300      	movs	r3, #0
 8005a7a:	6022      	str	r2, [r4, #0]
 8005a7c:	9303      	str	r3, [sp, #12]
 8005a7e:	ab0a      	add	r3, sp, #40	@ 0x28
 8005a80:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005a84:	ab09      	add	r3, sp, #36	@ 0x24
 8005a86:	9300      	str	r3, [sp, #0]
 8005a88:	6861      	ldr	r1, [r4, #4]
 8005a8a:	ec49 8b10 	vmov	d0, r8, r9
 8005a8e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005a92:	4628      	mov	r0, r5
 8005a94:	f7ff fed6 	bl	8005844 <__cvt>
 8005a98:	9b06      	ldr	r3, [sp, #24]
 8005a9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005a9c:	2b47      	cmp	r3, #71	@ 0x47
 8005a9e:	4680      	mov	r8, r0
 8005aa0:	d129      	bne.n	8005af6 <_printf_float+0x172>
 8005aa2:	1cc8      	adds	r0, r1, #3
 8005aa4:	db02      	blt.n	8005aac <_printf_float+0x128>
 8005aa6:	6863      	ldr	r3, [r4, #4]
 8005aa8:	4299      	cmp	r1, r3
 8005aaa:	dd41      	ble.n	8005b30 <_printf_float+0x1ac>
 8005aac:	f1aa 0a02 	sub.w	sl, sl, #2
 8005ab0:	fa5f fa8a 	uxtb.w	sl, sl
 8005ab4:	3901      	subs	r1, #1
 8005ab6:	4652      	mov	r2, sl
 8005ab8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005abc:	9109      	str	r1, [sp, #36]	@ 0x24
 8005abe:	f7ff ff26 	bl	800590e <__exponent>
 8005ac2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005ac4:	1813      	adds	r3, r2, r0
 8005ac6:	2a01      	cmp	r2, #1
 8005ac8:	4681      	mov	r9, r0
 8005aca:	6123      	str	r3, [r4, #16]
 8005acc:	dc02      	bgt.n	8005ad4 <_printf_float+0x150>
 8005ace:	6822      	ldr	r2, [r4, #0]
 8005ad0:	07d2      	lsls	r2, r2, #31
 8005ad2:	d501      	bpl.n	8005ad8 <_printf_float+0x154>
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	6123      	str	r3, [r4, #16]
 8005ad8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d0a2      	beq.n	8005a26 <_printf_float+0xa2>
 8005ae0:	232d      	movs	r3, #45	@ 0x2d
 8005ae2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ae6:	e79e      	b.n	8005a26 <_printf_float+0xa2>
 8005ae8:	9a06      	ldr	r2, [sp, #24]
 8005aea:	2a47      	cmp	r2, #71	@ 0x47
 8005aec:	d1c2      	bne.n	8005a74 <_printf_float+0xf0>
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1c0      	bne.n	8005a74 <_printf_float+0xf0>
 8005af2:	2301      	movs	r3, #1
 8005af4:	e7bd      	b.n	8005a72 <_printf_float+0xee>
 8005af6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005afa:	d9db      	bls.n	8005ab4 <_printf_float+0x130>
 8005afc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005b00:	d118      	bne.n	8005b34 <_printf_float+0x1b0>
 8005b02:	2900      	cmp	r1, #0
 8005b04:	6863      	ldr	r3, [r4, #4]
 8005b06:	dd0b      	ble.n	8005b20 <_printf_float+0x19c>
 8005b08:	6121      	str	r1, [r4, #16]
 8005b0a:	b913      	cbnz	r3, 8005b12 <_printf_float+0x18e>
 8005b0c:	6822      	ldr	r2, [r4, #0]
 8005b0e:	07d0      	lsls	r0, r2, #31
 8005b10:	d502      	bpl.n	8005b18 <_printf_float+0x194>
 8005b12:	3301      	adds	r3, #1
 8005b14:	440b      	add	r3, r1
 8005b16:	6123      	str	r3, [r4, #16]
 8005b18:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005b1a:	f04f 0900 	mov.w	r9, #0
 8005b1e:	e7db      	b.n	8005ad8 <_printf_float+0x154>
 8005b20:	b913      	cbnz	r3, 8005b28 <_printf_float+0x1a4>
 8005b22:	6822      	ldr	r2, [r4, #0]
 8005b24:	07d2      	lsls	r2, r2, #31
 8005b26:	d501      	bpl.n	8005b2c <_printf_float+0x1a8>
 8005b28:	3302      	adds	r3, #2
 8005b2a:	e7f4      	b.n	8005b16 <_printf_float+0x192>
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e7f2      	b.n	8005b16 <_printf_float+0x192>
 8005b30:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005b34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b36:	4299      	cmp	r1, r3
 8005b38:	db05      	blt.n	8005b46 <_printf_float+0x1c2>
 8005b3a:	6823      	ldr	r3, [r4, #0]
 8005b3c:	6121      	str	r1, [r4, #16]
 8005b3e:	07d8      	lsls	r0, r3, #31
 8005b40:	d5ea      	bpl.n	8005b18 <_printf_float+0x194>
 8005b42:	1c4b      	adds	r3, r1, #1
 8005b44:	e7e7      	b.n	8005b16 <_printf_float+0x192>
 8005b46:	2900      	cmp	r1, #0
 8005b48:	bfd4      	ite	le
 8005b4a:	f1c1 0202 	rsble	r2, r1, #2
 8005b4e:	2201      	movgt	r2, #1
 8005b50:	4413      	add	r3, r2
 8005b52:	e7e0      	b.n	8005b16 <_printf_float+0x192>
 8005b54:	6823      	ldr	r3, [r4, #0]
 8005b56:	055a      	lsls	r2, r3, #21
 8005b58:	d407      	bmi.n	8005b6a <_printf_float+0x1e6>
 8005b5a:	6923      	ldr	r3, [r4, #16]
 8005b5c:	4642      	mov	r2, r8
 8005b5e:	4631      	mov	r1, r6
 8005b60:	4628      	mov	r0, r5
 8005b62:	47b8      	blx	r7
 8005b64:	3001      	adds	r0, #1
 8005b66:	d12b      	bne.n	8005bc0 <_printf_float+0x23c>
 8005b68:	e767      	b.n	8005a3a <_printf_float+0xb6>
 8005b6a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005b6e:	f240 80dd 	bls.w	8005d2c <_printf_float+0x3a8>
 8005b72:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005b76:	2200      	movs	r2, #0
 8005b78:	2300      	movs	r3, #0
 8005b7a:	f7fa ffa5 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	d033      	beq.n	8005bea <_printf_float+0x266>
 8005b82:	4a37      	ldr	r2, [pc, #220]	@ (8005c60 <_printf_float+0x2dc>)
 8005b84:	2301      	movs	r3, #1
 8005b86:	4631      	mov	r1, r6
 8005b88:	4628      	mov	r0, r5
 8005b8a:	47b8      	blx	r7
 8005b8c:	3001      	adds	r0, #1
 8005b8e:	f43f af54 	beq.w	8005a3a <_printf_float+0xb6>
 8005b92:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005b96:	4543      	cmp	r3, r8
 8005b98:	db02      	blt.n	8005ba0 <_printf_float+0x21c>
 8005b9a:	6823      	ldr	r3, [r4, #0]
 8005b9c:	07d8      	lsls	r0, r3, #31
 8005b9e:	d50f      	bpl.n	8005bc0 <_printf_float+0x23c>
 8005ba0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ba4:	4631      	mov	r1, r6
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	47b8      	blx	r7
 8005baa:	3001      	adds	r0, #1
 8005bac:	f43f af45 	beq.w	8005a3a <_printf_float+0xb6>
 8005bb0:	f04f 0900 	mov.w	r9, #0
 8005bb4:	f108 38ff 	add.w	r8, r8, #4294967295
 8005bb8:	f104 0a1a 	add.w	sl, r4, #26
 8005bbc:	45c8      	cmp	r8, r9
 8005bbe:	dc09      	bgt.n	8005bd4 <_printf_float+0x250>
 8005bc0:	6823      	ldr	r3, [r4, #0]
 8005bc2:	079b      	lsls	r3, r3, #30
 8005bc4:	f100 8103 	bmi.w	8005dce <_printf_float+0x44a>
 8005bc8:	68e0      	ldr	r0, [r4, #12]
 8005bca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005bcc:	4298      	cmp	r0, r3
 8005bce:	bfb8      	it	lt
 8005bd0:	4618      	movlt	r0, r3
 8005bd2:	e734      	b.n	8005a3e <_printf_float+0xba>
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	4652      	mov	r2, sl
 8005bd8:	4631      	mov	r1, r6
 8005bda:	4628      	mov	r0, r5
 8005bdc:	47b8      	blx	r7
 8005bde:	3001      	adds	r0, #1
 8005be0:	f43f af2b 	beq.w	8005a3a <_printf_float+0xb6>
 8005be4:	f109 0901 	add.w	r9, r9, #1
 8005be8:	e7e8      	b.n	8005bbc <_printf_float+0x238>
 8005bea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	dc39      	bgt.n	8005c64 <_printf_float+0x2e0>
 8005bf0:	4a1b      	ldr	r2, [pc, #108]	@ (8005c60 <_printf_float+0x2dc>)
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	4631      	mov	r1, r6
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	47b8      	blx	r7
 8005bfa:	3001      	adds	r0, #1
 8005bfc:	f43f af1d 	beq.w	8005a3a <_printf_float+0xb6>
 8005c00:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005c04:	ea59 0303 	orrs.w	r3, r9, r3
 8005c08:	d102      	bne.n	8005c10 <_printf_float+0x28c>
 8005c0a:	6823      	ldr	r3, [r4, #0]
 8005c0c:	07d9      	lsls	r1, r3, #31
 8005c0e:	d5d7      	bpl.n	8005bc0 <_printf_float+0x23c>
 8005c10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c14:	4631      	mov	r1, r6
 8005c16:	4628      	mov	r0, r5
 8005c18:	47b8      	blx	r7
 8005c1a:	3001      	adds	r0, #1
 8005c1c:	f43f af0d 	beq.w	8005a3a <_printf_float+0xb6>
 8005c20:	f04f 0a00 	mov.w	sl, #0
 8005c24:	f104 0b1a 	add.w	fp, r4, #26
 8005c28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c2a:	425b      	negs	r3, r3
 8005c2c:	4553      	cmp	r3, sl
 8005c2e:	dc01      	bgt.n	8005c34 <_printf_float+0x2b0>
 8005c30:	464b      	mov	r3, r9
 8005c32:	e793      	b.n	8005b5c <_printf_float+0x1d8>
 8005c34:	2301      	movs	r3, #1
 8005c36:	465a      	mov	r2, fp
 8005c38:	4631      	mov	r1, r6
 8005c3a:	4628      	mov	r0, r5
 8005c3c:	47b8      	blx	r7
 8005c3e:	3001      	adds	r0, #1
 8005c40:	f43f aefb 	beq.w	8005a3a <_printf_float+0xb6>
 8005c44:	f10a 0a01 	add.w	sl, sl, #1
 8005c48:	e7ee      	b.n	8005c28 <_printf_float+0x2a4>
 8005c4a:	bf00      	nop
 8005c4c:	7fefffff 	.word	0x7fefffff
 8005c50:	08008608 	.word	0x08008608
 8005c54:	08008604 	.word	0x08008604
 8005c58:	08008610 	.word	0x08008610
 8005c5c:	0800860c 	.word	0x0800860c
 8005c60:	08008614 	.word	0x08008614
 8005c64:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005c66:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005c6a:	4553      	cmp	r3, sl
 8005c6c:	bfa8      	it	ge
 8005c6e:	4653      	movge	r3, sl
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	4699      	mov	r9, r3
 8005c74:	dc36      	bgt.n	8005ce4 <_printf_float+0x360>
 8005c76:	f04f 0b00 	mov.w	fp, #0
 8005c7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c7e:	f104 021a 	add.w	r2, r4, #26
 8005c82:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005c84:	9306      	str	r3, [sp, #24]
 8005c86:	eba3 0309 	sub.w	r3, r3, r9
 8005c8a:	455b      	cmp	r3, fp
 8005c8c:	dc31      	bgt.n	8005cf2 <_printf_float+0x36e>
 8005c8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c90:	459a      	cmp	sl, r3
 8005c92:	dc3a      	bgt.n	8005d0a <_printf_float+0x386>
 8005c94:	6823      	ldr	r3, [r4, #0]
 8005c96:	07da      	lsls	r2, r3, #31
 8005c98:	d437      	bmi.n	8005d0a <_printf_float+0x386>
 8005c9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c9c:	ebaa 0903 	sub.w	r9, sl, r3
 8005ca0:	9b06      	ldr	r3, [sp, #24]
 8005ca2:	ebaa 0303 	sub.w	r3, sl, r3
 8005ca6:	4599      	cmp	r9, r3
 8005ca8:	bfa8      	it	ge
 8005caa:	4699      	movge	r9, r3
 8005cac:	f1b9 0f00 	cmp.w	r9, #0
 8005cb0:	dc33      	bgt.n	8005d1a <_printf_float+0x396>
 8005cb2:	f04f 0800 	mov.w	r8, #0
 8005cb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cba:	f104 0b1a 	add.w	fp, r4, #26
 8005cbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cc0:	ebaa 0303 	sub.w	r3, sl, r3
 8005cc4:	eba3 0309 	sub.w	r3, r3, r9
 8005cc8:	4543      	cmp	r3, r8
 8005cca:	f77f af79 	ble.w	8005bc0 <_printf_float+0x23c>
 8005cce:	2301      	movs	r3, #1
 8005cd0:	465a      	mov	r2, fp
 8005cd2:	4631      	mov	r1, r6
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	47b8      	blx	r7
 8005cd8:	3001      	adds	r0, #1
 8005cda:	f43f aeae 	beq.w	8005a3a <_printf_float+0xb6>
 8005cde:	f108 0801 	add.w	r8, r8, #1
 8005ce2:	e7ec      	b.n	8005cbe <_printf_float+0x33a>
 8005ce4:	4642      	mov	r2, r8
 8005ce6:	4631      	mov	r1, r6
 8005ce8:	4628      	mov	r0, r5
 8005cea:	47b8      	blx	r7
 8005cec:	3001      	adds	r0, #1
 8005cee:	d1c2      	bne.n	8005c76 <_printf_float+0x2f2>
 8005cf0:	e6a3      	b.n	8005a3a <_printf_float+0xb6>
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	4631      	mov	r1, r6
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	9206      	str	r2, [sp, #24]
 8005cfa:	47b8      	blx	r7
 8005cfc:	3001      	adds	r0, #1
 8005cfe:	f43f ae9c 	beq.w	8005a3a <_printf_float+0xb6>
 8005d02:	9a06      	ldr	r2, [sp, #24]
 8005d04:	f10b 0b01 	add.w	fp, fp, #1
 8005d08:	e7bb      	b.n	8005c82 <_printf_float+0x2fe>
 8005d0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d0e:	4631      	mov	r1, r6
 8005d10:	4628      	mov	r0, r5
 8005d12:	47b8      	blx	r7
 8005d14:	3001      	adds	r0, #1
 8005d16:	d1c0      	bne.n	8005c9a <_printf_float+0x316>
 8005d18:	e68f      	b.n	8005a3a <_printf_float+0xb6>
 8005d1a:	9a06      	ldr	r2, [sp, #24]
 8005d1c:	464b      	mov	r3, r9
 8005d1e:	4442      	add	r2, r8
 8005d20:	4631      	mov	r1, r6
 8005d22:	4628      	mov	r0, r5
 8005d24:	47b8      	blx	r7
 8005d26:	3001      	adds	r0, #1
 8005d28:	d1c3      	bne.n	8005cb2 <_printf_float+0x32e>
 8005d2a:	e686      	b.n	8005a3a <_printf_float+0xb6>
 8005d2c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005d30:	f1ba 0f01 	cmp.w	sl, #1
 8005d34:	dc01      	bgt.n	8005d3a <_printf_float+0x3b6>
 8005d36:	07db      	lsls	r3, r3, #31
 8005d38:	d536      	bpl.n	8005da8 <_printf_float+0x424>
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	4642      	mov	r2, r8
 8005d3e:	4631      	mov	r1, r6
 8005d40:	4628      	mov	r0, r5
 8005d42:	47b8      	blx	r7
 8005d44:	3001      	adds	r0, #1
 8005d46:	f43f ae78 	beq.w	8005a3a <_printf_float+0xb6>
 8005d4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d4e:	4631      	mov	r1, r6
 8005d50:	4628      	mov	r0, r5
 8005d52:	47b8      	blx	r7
 8005d54:	3001      	adds	r0, #1
 8005d56:	f43f ae70 	beq.w	8005a3a <_printf_float+0xb6>
 8005d5a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005d5e:	2200      	movs	r2, #0
 8005d60:	2300      	movs	r3, #0
 8005d62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d66:	f7fa feaf 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d6a:	b9c0      	cbnz	r0, 8005d9e <_printf_float+0x41a>
 8005d6c:	4653      	mov	r3, sl
 8005d6e:	f108 0201 	add.w	r2, r8, #1
 8005d72:	4631      	mov	r1, r6
 8005d74:	4628      	mov	r0, r5
 8005d76:	47b8      	blx	r7
 8005d78:	3001      	adds	r0, #1
 8005d7a:	d10c      	bne.n	8005d96 <_printf_float+0x412>
 8005d7c:	e65d      	b.n	8005a3a <_printf_float+0xb6>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	465a      	mov	r2, fp
 8005d82:	4631      	mov	r1, r6
 8005d84:	4628      	mov	r0, r5
 8005d86:	47b8      	blx	r7
 8005d88:	3001      	adds	r0, #1
 8005d8a:	f43f ae56 	beq.w	8005a3a <_printf_float+0xb6>
 8005d8e:	f108 0801 	add.w	r8, r8, #1
 8005d92:	45d0      	cmp	r8, sl
 8005d94:	dbf3      	blt.n	8005d7e <_printf_float+0x3fa>
 8005d96:	464b      	mov	r3, r9
 8005d98:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005d9c:	e6df      	b.n	8005b5e <_printf_float+0x1da>
 8005d9e:	f04f 0800 	mov.w	r8, #0
 8005da2:	f104 0b1a 	add.w	fp, r4, #26
 8005da6:	e7f4      	b.n	8005d92 <_printf_float+0x40e>
 8005da8:	2301      	movs	r3, #1
 8005daa:	4642      	mov	r2, r8
 8005dac:	e7e1      	b.n	8005d72 <_printf_float+0x3ee>
 8005dae:	2301      	movs	r3, #1
 8005db0:	464a      	mov	r2, r9
 8005db2:	4631      	mov	r1, r6
 8005db4:	4628      	mov	r0, r5
 8005db6:	47b8      	blx	r7
 8005db8:	3001      	adds	r0, #1
 8005dba:	f43f ae3e 	beq.w	8005a3a <_printf_float+0xb6>
 8005dbe:	f108 0801 	add.w	r8, r8, #1
 8005dc2:	68e3      	ldr	r3, [r4, #12]
 8005dc4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005dc6:	1a5b      	subs	r3, r3, r1
 8005dc8:	4543      	cmp	r3, r8
 8005dca:	dcf0      	bgt.n	8005dae <_printf_float+0x42a>
 8005dcc:	e6fc      	b.n	8005bc8 <_printf_float+0x244>
 8005dce:	f04f 0800 	mov.w	r8, #0
 8005dd2:	f104 0919 	add.w	r9, r4, #25
 8005dd6:	e7f4      	b.n	8005dc2 <_printf_float+0x43e>

08005dd8 <_printf_common>:
 8005dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ddc:	4616      	mov	r6, r2
 8005dde:	4698      	mov	r8, r3
 8005de0:	688a      	ldr	r2, [r1, #8]
 8005de2:	690b      	ldr	r3, [r1, #16]
 8005de4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005de8:	4293      	cmp	r3, r2
 8005dea:	bfb8      	it	lt
 8005dec:	4613      	movlt	r3, r2
 8005dee:	6033      	str	r3, [r6, #0]
 8005df0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005df4:	4607      	mov	r7, r0
 8005df6:	460c      	mov	r4, r1
 8005df8:	b10a      	cbz	r2, 8005dfe <_printf_common+0x26>
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	6033      	str	r3, [r6, #0]
 8005dfe:	6823      	ldr	r3, [r4, #0]
 8005e00:	0699      	lsls	r1, r3, #26
 8005e02:	bf42      	ittt	mi
 8005e04:	6833      	ldrmi	r3, [r6, #0]
 8005e06:	3302      	addmi	r3, #2
 8005e08:	6033      	strmi	r3, [r6, #0]
 8005e0a:	6825      	ldr	r5, [r4, #0]
 8005e0c:	f015 0506 	ands.w	r5, r5, #6
 8005e10:	d106      	bne.n	8005e20 <_printf_common+0x48>
 8005e12:	f104 0a19 	add.w	sl, r4, #25
 8005e16:	68e3      	ldr	r3, [r4, #12]
 8005e18:	6832      	ldr	r2, [r6, #0]
 8005e1a:	1a9b      	subs	r3, r3, r2
 8005e1c:	42ab      	cmp	r3, r5
 8005e1e:	dc26      	bgt.n	8005e6e <_printf_common+0x96>
 8005e20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005e24:	6822      	ldr	r2, [r4, #0]
 8005e26:	3b00      	subs	r3, #0
 8005e28:	bf18      	it	ne
 8005e2a:	2301      	movne	r3, #1
 8005e2c:	0692      	lsls	r2, r2, #26
 8005e2e:	d42b      	bmi.n	8005e88 <_printf_common+0xb0>
 8005e30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005e34:	4641      	mov	r1, r8
 8005e36:	4638      	mov	r0, r7
 8005e38:	47c8      	blx	r9
 8005e3a:	3001      	adds	r0, #1
 8005e3c:	d01e      	beq.n	8005e7c <_printf_common+0xa4>
 8005e3e:	6823      	ldr	r3, [r4, #0]
 8005e40:	6922      	ldr	r2, [r4, #16]
 8005e42:	f003 0306 	and.w	r3, r3, #6
 8005e46:	2b04      	cmp	r3, #4
 8005e48:	bf02      	ittt	eq
 8005e4a:	68e5      	ldreq	r5, [r4, #12]
 8005e4c:	6833      	ldreq	r3, [r6, #0]
 8005e4e:	1aed      	subeq	r5, r5, r3
 8005e50:	68a3      	ldr	r3, [r4, #8]
 8005e52:	bf0c      	ite	eq
 8005e54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e58:	2500      	movne	r5, #0
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	bfc4      	itt	gt
 8005e5e:	1a9b      	subgt	r3, r3, r2
 8005e60:	18ed      	addgt	r5, r5, r3
 8005e62:	2600      	movs	r6, #0
 8005e64:	341a      	adds	r4, #26
 8005e66:	42b5      	cmp	r5, r6
 8005e68:	d11a      	bne.n	8005ea0 <_printf_common+0xc8>
 8005e6a:	2000      	movs	r0, #0
 8005e6c:	e008      	b.n	8005e80 <_printf_common+0xa8>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	4652      	mov	r2, sl
 8005e72:	4641      	mov	r1, r8
 8005e74:	4638      	mov	r0, r7
 8005e76:	47c8      	blx	r9
 8005e78:	3001      	adds	r0, #1
 8005e7a:	d103      	bne.n	8005e84 <_printf_common+0xac>
 8005e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e84:	3501      	adds	r5, #1
 8005e86:	e7c6      	b.n	8005e16 <_printf_common+0x3e>
 8005e88:	18e1      	adds	r1, r4, r3
 8005e8a:	1c5a      	adds	r2, r3, #1
 8005e8c:	2030      	movs	r0, #48	@ 0x30
 8005e8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005e92:	4422      	add	r2, r4
 8005e94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005e98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005e9c:	3302      	adds	r3, #2
 8005e9e:	e7c7      	b.n	8005e30 <_printf_common+0x58>
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	4622      	mov	r2, r4
 8005ea4:	4641      	mov	r1, r8
 8005ea6:	4638      	mov	r0, r7
 8005ea8:	47c8      	blx	r9
 8005eaa:	3001      	adds	r0, #1
 8005eac:	d0e6      	beq.n	8005e7c <_printf_common+0xa4>
 8005eae:	3601      	adds	r6, #1
 8005eb0:	e7d9      	b.n	8005e66 <_printf_common+0x8e>
	...

08005eb4 <_printf_i>:
 8005eb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005eb8:	7e0f      	ldrb	r7, [r1, #24]
 8005eba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005ebc:	2f78      	cmp	r7, #120	@ 0x78
 8005ebe:	4691      	mov	r9, r2
 8005ec0:	4680      	mov	r8, r0
 8005ec2:	460c      	mov	r4, r1
 8005ec4:	469a      	mov	sl, r3
 8005ec6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005eca:	d807      	bhi.n	8005edc <_printf_i+0x28>
 8005ecc:	2f62      	cmp	r7, #98	@ 0x62
 8005ece:	d80a      	bhi.n	8005ee6 <_printf_i+0x32>
 8005ed0:	2f00      	cmp	r7, #0
 8005ed2:	f000 80d1 	beq.w	8006078 <_printf_i+0x1c4>
 8005ed6:	2f58      	cmp	r7, #88	@ 0x58
 8005ed8:	f000 80b8 	beq.w	800604c <_printf_i+0x198>
 8005edc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ee0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005ee4:	e03a      	b.n	8005f5c <_printf_i+0xa8>
 8005ee6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005eea:	2b15      	cmp	r3, #21
 8005eec:	d8f6      	bhi.n	8005edc <_printf_i+0x28>
 8005eee:	a101      	add	r1, pc, #4	@ (adr r1, 8005ef4 <_printf_i+0x40>)
 8005ef0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ef4:	08005f4d 	.word	0x08005f4d
 8005ef8:	08005f61 	.word	0x08005f61
 8005efc:	08005edd 	.word	0x08005edd
 8005f00:	08005edd 	.word	0x08005edd
 8005f04:	08005edd 	.word	0x08005edd
 8005f08:	08005edd 	.word	0x08005edd
 8005f0c:	08005f61 	.word	0x08005f61
 8005f10:	08005edd 	.word	0x08005edd
 8005f14:	08005edd 	.word	0x08005edd
 8005f18:	08005edd 	.word	0x08005edd
 8005f1c:	08005edd 	.word	0x08005edd
 8005f20:	0800605f 	.word	0x0800605f
 8005f24:	08005f8b 	.word	0x08005f8b
 8005f28:	08006019 	.word	0x08006019
 8005f2c:	08005edd 	.word	0x08005edd
 8005f30:	08005edd 	.word	0x08005edd
 8005f34:	08006081 	.word	0x08006081
 8005f38:	08005edd 	.word	0x08005edd
 8005f3c:	08005f8b 	.word	0x08005f8b
 8005f40:	08005edd 	.word	0x08005edd
 8005f44:	08005edd 	.word	0x08005edd
 8005f48:	08006021 	.word	0x08006021
 8005f4c:	6833      	ldr	r3, [r6, #0]
 8005f4e:	1d1a      	adds	r2, r3, #4
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	6032      	str	r2, [r6, #0]
 8005f54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e09c      	b.n	800609a <_printf_i+0x1e6>
 8005f60:	6833      	ldr	r3, [r6, #0]
 8005f62:	6820      	ldr	r0, [r4, #0]
 8005f64:	1d19      	adds	r1, r3, #4
 8005f66:	6031      	str	r1, [r6, #0]
 8005f68:	0606      	lsls	r6, r0, #24
 8005f6a:	d501      	bpl.n	8005f70 <_printf_i+0xbc>
 8005f6c:	681d      	ldr	r5, [r3, #0]
 8005f6e:	e003      	b.n	8005f78 <_printf_i+0xc4>
 8005f70:	0645      	lsls	r5, r0, #25
 8005f72:	d5fb      	bpl.n	8005f6c <_printf_i+0xb8>
 8005f74:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005f78:	2d00      	cmp	r5, #0
 8005f7a:	da03      	bge.n	8005f84 <_printf_i+0xd0>
 8005f7c:	232d      	movs	r3, #45	@ 0x2d
 8005f7e:	426d      	negs	r5, r5
 8005f80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f84:	4858      	ldr	r0, [pc, #352]	@ (80060e8 <_printf_i+0x234>)
 8005f86:	230a      	movs	r3, #10
 8005f88:	e011      	b.n	8005fae <_printf_i+0xfa>
 8005f8a:	6821      	ldr	r1, [r4, #0]
 8005f8c:	6833      	ldr	r3, [r6, #0]
 8005f8e:	0608      	lsls	r0, r1, #24
 8005f90:	f853 5b04 	ldr.w	r5, [r3], #4
 8005f94:	d402      	bmi.n	8005f9c <_printf_i+0xe8>
 8005f96:	0649      	lsls	r1, r1, #25
 8005f98:	bf48      	it	mi
 8005f9a:	b2ad      	uxthmi	r5, r5
 8005f9c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005f9e:	4852      	ldr	r0, [pc, #328]	@ (80060e8 <_printf_i+0x234>)
 8005fa0:	6033      	str	r3, [r6, #0]
 8005fa2:	bf14      	ite	ne
 8005fa4:	230a      	movne	r3, #10
 8005fa6:	2308      	moveq	r3, #8
 8005fa8:	2100      	movs	r1, #0
 8005faa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005fae:	6866      	ldr	r6, [r4, #4]
 8005fb0:	60a6      	str	r6, [r4, #8]
 8005fb2:	2e00      	cmp	r6, #0
 8005fb4:	db05      	blt.n	8005fc2 <_printf_i+0x10e>
 8005fb6:	6821      	ldr	r1, [r4, #0]
 8005fb8:	432e      	orrs	r6, r5
 8005fba:	f021 0104 	bic.w	r1, r1, #4
 8005fbe:	6021      	str	r1, [r4, #0]
 8005fc0:	d04b      	beq.n	800605a <_printf_i+0x1a6>
 8005fc2:	4616      	mov	r6, r2
 8005fc4:	fbb5 f1f3 	udiv	r1, r5, r3
 8005fc8:	fb03 5711 	mls	r7, r3, r1, r5
 8005fcc:	5dc7      	ldrb	r7, [r0, r7]
 8005fce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005fd2:	462f      	mov	r7, r5
 8005fd4:	42bb      	cmp	r3, r7
 8005fd6:	460d      	mov	r5, r1
 8005fd8:	d9f4      	bls.n	8005fc4 <_printf_i+0x110>
 8005fda:	2b08      	cmp	r3, #8
 8005fdc:	d10b      	bne.n	8005ff6 <_printf_i+0x142>
 8005fde:	6823      	ldr	r3, [r4, #0]
 8005fe0:	07df      	lsls	r7, r3, #31
 8005fe2:	d508      	bpl.n	8005ff6 <_printf_i+0x142>
 8005fe4:	6923      	ldr	r3, [r4, #16]
 8005fe6:	6861      	ldr	r1, [r4, #4]
 8005fe8:	4299      	cmp	r1, r3
 8005fea:	bfde      	ittt	le
 8005fec:	2330      	movle	r3, #48	@ 0x30
 8005fee:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ff2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ff6:	1b92      	subs	r2, r2, r6
 8005ff8:	6122      	str	r2, [r4, #16]
 8005ffa:	f8cd a000 	str.w	sl, [sp]
 8005ffe:	464b      	mov	r3, r9
 8006000:	aa03      	add	r2, sp, #12
 8006002:	4621      	mov	r1, r4
 8006004:	4640      	mov	r0, r8
 8006006:	f7ff fee7 	bl	8005dd8 <_printf_common>
 800600a:	3001      	adds	r0, #1
 800600c:	d14a      	bne.n	80060a4 <_printf_i+0x1f0>
 800600e:	f04f 30ff 	mov.w	r0, #4294967295
 8006012:	b004      	add	sp, #16
 8006014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006018:	6823      	ldr	r3, [r4, #0]
 800601a:	f043 0320 	orr.w	r3, r3, #32
 800601e:	6023      	str	r3, [r4, #0]
 8006020:	4832      	ldr	r0, [pc, #200]	@ (80060ec <_printf_i+0x238>)
 8006022:	2778      	movs	r7, #120	@ 0x78
 8006024:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006028:	6823      	ldr	r3, [r4, #0]
 800602a:	6831      	ldr	r1, [r6, #0]
 800602c:	061f      	lsls	r7, r3, #24
 800602e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006032:	d402      	bmi.n	800603a <_printf_i+0x186>
 8006034:	065f      	lsls	r7, r3, #25
 8006036:	bf48      	it	mi
 8006038:	b2ad      	uxthmi	r5, r5
 800603a:	6031      	str	r1, [r6, #0]
 800603c:	07d9      	lsls	r1, r3, #31
 800603e:	bf44      	itt	mi
 8006040:	f043 0320 	orrmi.w	r3, r3, #32
 8006044:	6023      	strmi	r3, [r4, #0]
 8006046:	b11d      	cbz	r5, 8006050 <_printf_i+0x19c>
 8006048:	2310      	movs	r3, #16
 800604a:	e7ad      	b.n	8005fa8 <_printf_i+0xf4>
 800604c:	4826      	ldr	r0, [pc, #152]	@ (80060e8 <_printf_i+0x234>)
 800604e:	e7e9      	b.n	8006024 <_printf_i+0x170>
 8006050:	6823      	ldr	r3, [r4, #0]
 8006052:	f023 0320 	bic.w	r3, r3, #32
 8006056:	6023      	str	r3, [r4, #0]
 8006058:	e7f6      	b.n	8006048 <_printf_i+0x194>
 800605a:	4616      	mov	r6, r2
 800605c:	e7bd      	b.n	8005fda <_printf_i+0x126>
 800605e:	6833      	ldr	r3, [r6, #0]
 8006060:	6825      	ldr	r5, [r4, #0]
 8006062:	6961      	ldr	r1, [r4, #20]
 8006064:	1d18      	adds	r0, r3, #4
 8006066:	6030      	str	r0, [r6, #0]
 8006068:	062e      	lsls	r6, r5, #24
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	d501      	bpl.n	8006072 <_printf_i+0x1be>
 800606e:	6019      	str	r1, [r3, #0]
 8006070:	e002      	b.n	8006078 <_printf_i+0x1c4>
 8006072:	0668      	lsls	r0, r5, #25
 8006074:	d5fb      	bpl.n	800606e <_printf_i+0x1ba>
 8006076:	8019      	strh	r1, [r3, #0]
 8006078:	2300      	movs	r3, #0
 800607a:	6123      	str	r3, [r4, #16]
 800607c:	4616      	mov	r6, r2
 800607e:	e7bc      	b.n	8005ffa <_printf_i+0x146>
 8006080:	6833      	ldr	r3, [r6, #0]
 8006082:	1d1a      	adds	r2, r3, #4
 8006084:	6032      	str	r2, [r6, #0]
 8006086:	681e      	ldr	r6, [r3, #0]
 8006088:	6862      	ldr	r2, [r4, #4]
 800608a:	2100      	movs	r1, #0
 800608c:	4630      	mov	r0, r6
 800608e:	f7fa f89f 	bl	80001d0 <memchr>
 8006092:	b108      	cbz	r0, 8006098 <_printf_i+0x1e4>
 8006094:	1b80      	subs	r0, r0, r6
 8006096:	6060      	str	r0, [r4, #4]
 8006098:	6863      	ldr	r3, [r4, #4]
 800609a:	6123      	str	r3, [r4, #16]
 800609c:	2300      	movs	r3, #0
 800609e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060a2:	e7aa      	b.n	8005ffa <_printf_i+0x146>
 80060a4:	6923      	ldr	r3, [r4, #16]
 80060a6:	4632      	mov	r2, r6
 80060a8:	4649      	mov	r1, r9
 80060aa:	4640      	mov	r0, r8
 80060ac:	47d0      	blx	sl
 80060ae:	3001      	adds	r0, #1
 80060b0:	d0ad      	beq.n	800600e <_printf_i+0x15a>
 80060b2:	6823      	ldr	r3, [r4, #0]
 80060b4:	079b      	lsls	r3, r3, #30
 80060b6:	d413      	bmi.n	80060e0 <_printf_i+0x22c>
 80060b8:	68e0      	ldr	r0, [r4, #12]
 80060ba:	9b03      	ldr	r3, [sp, #12]
 80060bc:	4298      	cmp	r0, r3
 80060be:	bfb8      	it	lt
 80060c0:	4618      	movlt	r0, r3
 80060c2:	e7a6      	b.n	8006012 <_printf_i+0x15e>
 80060c4:	2301      	movs	r3, #1
 80060c6:	4632      	mov	r2, r6
 80060c8:	4649      	mov	r1, r9
 80060ca:	4640      	mov	r0, r8
 80060cc:	47d0      	blx	sl
 80060ce:	3001      	adds	r0, #1
 80060d0:	d09d      	beq.n	800600e <_printf_i+0x15a>
 80060d2:	3501      	adds	r5, #1
 80060d4:	68e3      	ldr	r3, [r4, #12]
 80060d6:	9903      	ldr	r1, [sp, #12]
 80060d8:	1a5b      	subs	r3, r3, r1
 80060da:	42ab      	cmp	r3, r5
 80060dc:	dcf2      	bgt.n	80060c4 <_printf_i+0x210>
 80060de:	e7eb      	b.n	80060b8 <_printf_i+0x204>
 80060e0:	2500      	movs	r5, #0
 80060e2:	f104 0619 	add.w	r6, r4, #25
 80060e6:	e7f5      	b.n	80060d4 <_printf_i+0x220>
 80060e8:	08008616 	.word	0x08008616
 80060ec:	08008627 	.word	0x08008627

080060f0 <std>:
 80060f0:	2300      	movs	r3, #0
 80060f2:	b510      	push	{r4, lr}
 80060f4:	4604      	mov	r4, r0
 80060f6:	e9c0 3300 	strd	r3, r3, [r0]
 80060fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060fe:	6083      	str	r3, [r0, #8]
 8006100:	8181      	strh	r1, [r0, #12]
 8006102:	6643      	str	r3, [r0, #100]	@ 0x64
 8006104:	81c2      	strh	r2, [r0, #14]
 8006106:	6183      	str	r3, [r0, #24]
 8006108:	4619      	mov	r1, r3
 800610a:	2208      	movs	r2, #8
 800610c:	305c      	adds	r0, #92	@ 0x5c
 800610e:	f000 f916 	bl	800633e <memset>
 8006112:	4b0d      	ldr	r3, [pc, #52]	@ (8006148 <std+0x58>)
 8006114:	6263      	str	r3, [r4, #36]	@ 0x24
 8006116:	4b0d      	ldr	r3, [pc, #52]	@ (800614c <std+0x5c>)
 8006118:	62a3      	str	r3, [r4, #40]	@ 0x28
 800611a:	4b0d      	ldr	r3, [pc, #52]	@ (8006150 <std+0x60>)
 800611c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800611e:	4b0d      	ldr	r3, [pc, #52]	@ (8006154 <std+0x64>)
 8006120:	6323      	str	r3, [r4, #48]	@ 0x30
 8006122:	4b0d      	ldr	r3, [pc, #52]	@ (8006158 <std+0x68>)
 8006124:	6224      	str	r4, [r4, #32]
 8006126:	429c      	cmp	r4, r3
 8006128:	d006      	beq.n	8006138 <std+0x48>
 800612a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800612e:	4294      	cmp	r4, r2
 8006130:	d002      	beq.n	8006138 <std+0x48>
 8006132:	33d0      	adds	r3, #208	@ 0xd0
 8006134:	429c      	cmp	r4, r3
 8006136:	d105      	bne.n	8006144 <std+0x54>
 8006138:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800613c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006140:	f000 b9d8 	b.w	80064f4 <__retarget_lock_init_recursive>
 8006144:	bd10      	pop	{r4, pc}
 8006146:	bf00      	nop
 8006148:	080062b9 	.word	0x080062b9
 800614c:	080062db 	.word	0x080062db
 8006150:	08006313 	.word	0x08006313
 8006154:	08006337 	.word	0x08006337
 8006158:	20004298 	.word	0x20004298

0800615c <stdio_exit_handler>:
 800615c:	4a02      	ldr	r2, [pc, #8]	@ (8006168 <stdio_exit_handler+0xc>)
 800615e:	4903      	ldr	r1, [pc, #12]	@ (800616c <stdio_exit_handler+0x10>)
 8006160:	4803      	ldr	r0, [pc, #12]	@ (8006170 <stdio_exit_handler+0x14>)
 8006162:	f000 b869 	b.w	8006238 <_fwalk_sglue>
 8006166:	bf00      	nop
 8006168:	20000010 	.word	0x20000010
 800616c:	08007e75 	.word	0x08007e75
 8006170:	20000020 	.word	0x20000020

08006174 <cleanup_stdio>:
 8006174:	6841      	ldr	r1, [r0, #4]
 8006176:	4b0c      	ldr	r3, [pc, #48]	@ (80061a8 <cleanup_stdio+0x34>)
 8006178:	4299      	cmp	r1, r3
 800617a:	b510      	push	{r4, lr}
 800617c:	4604      	mov	r4, r0
 800617e:	d001      	beq.n	8006184 <cleanup_stdio+0x10>
 8006180:	f001 fe78 	bl	8007e74 <_fflush_r>
 8006184:	68a1      	ldr	r1, [r4, #8]
 8006186:	4b09      	ldr	r3, [pc, #36]	@ (80061ac <cleanup_stdio+0x38>)
 8006188:	4299      	cmp	r1, r3
 800618a:	d002      	beq.n	8006192 <cleanup_stdio+0x1e>
 800618c:	4620      	mov	r0, r4
 800618e:	f001 fe71 	bl	8007e74 <_fflush_r>
 8006192:	68e1      	ldr	r1, [r4, #12]
 8006194:	4b06      	ldr	r3, [pc, #24]	@ (80061b0 <cleanup_stdio+0x3c>)
 8006196:	4299      	cmp	r1, r3
 8006198:	d004      	beq.n	80061a4 <cleanup_stdio+0x30>
 800619a:	4620      	mov	r0, r4
 800619c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061a0:	f001 be68 	b.w	8007e74 <_fflush_r>
 80061a4:	bd10      	pop	{r4, pc}
 80061a6:	bf00      	nop
 80061a8:	20004298 	.word	0x20004298
 80061ac:	20004300 	.word	0x20004300
 80061b0:	20004368 	.word	0x20004368

080061b4 <global_stdio_init.part.0>:
 80061b4:	b510      	push	{r4, lr}
 80061b6:	4b0b      	ldr	r3, [pc, #44]	@ (80061e4 <global_stdio_init.part.0+0x30>)
 80061b8:	4c0b      	ldr	r4, [pc, #44]	@ (80061e8 <global_stdio_init.part.0+0x34>)
 80061ba:	4a0c      	ldr	r2, [pc, #48]	@ (80061ec <global_stdio_init.part.0+0x38>)
 80061bc:	601a      	str	r2, [r3, #0]
 80061be:	4620      	mov	r0, r4
 80061c0:	2200      	movs	r2, #0
 80061c2:	2104      	movs	r1, #4
 80061c4:	f7ff ff94 	bl	80060f0 <std>
 80061c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80061cc:	2201      	movs	r2, #1
 80061ce:	2109      	movs	r1, #9
 80061d0:	f7ff ff8e 	bl	80060f0 <std>
 80061d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80061d8:	2202      	movs	r2, #2
 80061da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061de:	2112      	movs	r1, #18
 80061e0:	f7ff bf86 	b.w	80060f0 <std>
 80061e4:	200043d0 	.word	0x200043d0
 80061e8:	20004298 	.word	0x20004298
 80061ec:	0800615d 	.word	0x0800615d

080061f0 <__sfp_lock_acquire>:
 80061f0:	4801      	ldr	r0, [pc, #4]	@ (80061f8 <__sfp_lock_acquire+0x8>)
 80061f2:	f000 b980 	b.w	80064f6 <__retarget_lock_acquire_recursive>
 80061f6:	bf00      	nop
 80061f8:	200043d9 	.word	0x200043d9

080061fc <__sfp_lock_release>:
 80061fc:	4801      	ldr	r0, [pc, #4]	@ (8006204 <__sfp_lock_release+0x8>)
 80061fe:	f000 b97b 	b.w	80064f8 <__retarget_lock_release_recursive>
 8006202:	bf00      	nop
 8006204:	200043d9 	.word	0x200043d9

08006208 <__sinit>:
 8006208:	b510      	push	{r4, lr}
 800620a:	4604      	mov	r4, r0
 800620c:	f7ff fff0 	bl	80061f0 <__sfp_lock_acquire>
 8006210:	6a23      	ldr	r3, [r4, #32]
 8006212:	b11b      	cbz	r3, 800621c <__sinit+0x14>
 8006214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006218:	f7ff bff0 	b.w	80061fc <__sfp_lock_release>
 800621c:	4b04      	ldr	r3, [pc, #16]	@ (8006230 <__sinit+0x28>)
 800621e:	6223      	str	r3, [r4, #32]
 8006220:	4b04      	ldr	r3, [pc, #16]	@ (8006234 <__sinit+0x2c>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1f5      	bne.n	8006214 <__sinit+0xc>
 8006228:	f7ff ffc4 	bl	80061b4 <global_stdio_init.part.0>
 800622c:	e7f2      	b.n	8006214 <__sinit+0xc>
 800622e:	bf00      	nop
 8006230:	08006175 	.word	0x08006175
 8006234:	200043d0 	.word	0x200043d0

08006238 <_fwalk_sglue>:
 8006238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800623c:	4607      	mov	r7, r0
 800623e:	4688      	mov	r8, r1
 8006240:	4614      	mov	r4, r2
 8006242:	2600      	movs	r6, #0
 8006244:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006248:	f1b9 0901 	subs.w	r9, r9, #1
 800624c:	d505      	bpl.n	800625a <_fwalk_sglue+0x22>
 800624e:	6824      	ldr	r4, [r4, #0]
 8006250:	2c00      	cmp	r4, #0
 8006252:	d1f7      	bne.n	8006244 <_fwalk_sglue+0xc>
 8006254:	4630      	mov	r0, r6
 8006256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800625a:	89ab      	ldrh	r3, [r5, #12]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d907      	bls.n	8006270 <_fwalk_sglue+0x38>
 8006260:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006264:	3301      	adds	r3, #1
 8006266:	d003      	beq.n	8006270 <_fwalk_sglue+0x38>
 8006268:	4629      	mov	r1, r5
 800626a:	4638      	mov	r0, r7
 800626c:	47c0      	blx	r8
 800626e:	4306      	orrs	r6, r0
 8006270:	3568      	adds	r5, #104	@ 0x68
 8006272:	e7e9      	b.n	8006248 <_fwalk_sglue+0x10>

08006274 <siprintf>:
 8006274:	b40e      	push	{r1, r2, r3}
 8006276:	b510      	push	{r4, lr}
 8006278:	b09d      	sub	sp, #116	@ 0x74
 800627a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800627c:	9002      	str	r0, [sp, #8]
 800627e:	9006      	str	r0, [sp, #24]
 8006280:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006284:	480a      	ldr	r0, [pc, #40]	@ (80062b0 <siprintf+0x3c>)
 8006286:	9107      	str	r1, [sp, #28]
 8006288:	9104      	str	r1, [sp, #16]
 800628a:	490a      	ldr	r1, [pc, #40]	@ (80062b4 <siprintf+0x40>)
 800628c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006290:	9105      	str	r1, [sp, #20]
 8006292:	2400      	movs	r4, #0
 8006294:	a902      	add	r1, sp, #8
 8006296:	6800      	ldr	r0, [r0, #0]
 8006298:	9301      	str	r3, [sp, #4]
 800629a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800629c:	f001 fc6a 	bl	8007b74 <_svfiprintf_r>
 80062a0:	9b02      	ldr	r3, [sp, #8]
 80062a2:	701c      	strb	r4, [r3, #0]
 80062a4:	b01d      	add	sp, #116	@ 0x74
 80062a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062aa:	b003      	add	sp, #12
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	2000001c 	.word	0x2000001c
 80062b4:	ffff0208 	.word	0xffff0208

080062b8 <__sread>:
 80062b8:	b510      	push	{r4, lr}
 80062ba:	460c      	mov	r4, r1
 80062bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062c0:	f000 f8ca 	bl	8006458 <_read_r>
 80062c4:	2800      	cmp	r0, #0
 80062c6:	bfab      	itete	ge
 80062c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80062ca:	89a3      	ldrhlt	r3, [r4, #12]
 80062cc:	181b      	addge	r3, r3, r0
 80062ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80062d2:	bfac      	ite	ge
 80062d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80062d6:	81a3      	strhlt	r3, [r4, #12]
 80062d8:	bd10      	pop	{r4, pc}

080062da <__swrite>:
 80062da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062de:	461f      	mov	r7, r3
 80062e0:	898b      	ldrh	r3, [r1, #12]
 80062e2:	05db      	lsls	r3, r3, #23
 80062e4:	4605      	mov	r5, r0
 80062e6:	460c      	mov	r4, r1
 80062e8:	4616      	mov	r6, r2
 80062ea:	d505      	bpl.n	80062f8 <__swrite+0x1e>
 80062ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062f0:	2302      	movs	r3, #2
 80062f2:	2200      	movs	r2, #0
 80062f4:	f000 f89e 	bl	8006434 <_lseek_r>
 80062f8:	89a3      	ldrh	r3, [r4, #12]
 80062fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006302:	81a3      	strh	r3, [r4, #12]
 8006304:	4632      	mov	r2, r6
 8006306:	463b      	mov	r3, r7
 8006308:	4628      	mov	r0, r5
 800630a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800630e:	f000 b8b5 	b.w	800647c <_write_r>

08006312 <__sseek>:
 8006312:	b510      	push	{r4, lr}
 8006314:	460c      	mov	r4, r1
 8006316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800631a:	f000 f88b 	bl	8006434 <_lseek_r>
 800631e:	1c43      	adds	r3, r0, #1
 8006320:	89a3      	ldrh	r3, [r4, #12]
 8006322:	bf15      	itete	ne
 8006324:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006326:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800632a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800632e:	81a3      	strheq	r3, [r4, #12]
 8006330:	bf18      	it	ne
 8006332:	81a3      	strhne	r3, [r4, #12]
 8006334:	bd10      	pop	{r4, pc}

08006336 <__sclose>:
 8006336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800633a:	f000 b80d 	b.w	8006358 <_close_r>

0800633e <memset>:
 800633e:	4402      	add	r2, r0
 8006340:	4603      	mov	r3, r0
 8006342:	4293      	cmp	r3, r2
 8006344:	d100      	bne.n	8006348 <memset+0xa>
 8006346:	4770      	bx	lr
 8006348:	f803 1b01 	strb.w	r1, [r3], #1
 800634c:	e7f9      	b.n	8006342 <memset+0x4>
	...

08006350 <_localeconv_r>:
 8006350:	4800      	ldr	r0, [pc, #0]	@ (8006354 <_localeconv_r+0x4>)
 8006352:	4770      	bx	lr
 8006354:	2000015c 	.word	0x2000015c

08006358 <_close_r>:
 8006358:	b538      	push	{r3, r4, r5, lr}
 800635a:	4d06      	ldr	r5, [pc, #24]	@ (8006374 <_close_r+0x1c>)
 800635c:	2300      	movs	r3, #0
 800635e:	4604      	mov	r4, r0
 8006360:	4608      	mov	r0, r1
 8006362:	602b      	str	r3, [r5, #0]
 8006364:	f7fb fb34 	bl	80019d0 <_close>
 8006368:	1c43      	adds	r3, r0, #1
 800636a:	d102      	bne.n	8006372 <_close_r+0x1a>
 800636c:	682b      	ldr	r3, [r5, #0]
 800636e:	b103      	cbz	r3, 8006372 <_close_r+0x1a>
 8006370:	6023      	str	r3, [r4, #0]
 8006372:	bd38      	pop	{r3, r4, r5, pc}
 8006374:	200043d4 	.word	0x200043d4

08006378 <_reclaim_reent>:
 8006378:	4b2d      	ldr	r3, [pc, #180]	@ (8006430 <_reclaim_reent+0xb8>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4283      	cmp	r3, r0
 800637e:	b570      	push	{r4, r5, r6, lr}
 8006380:	4604      	mov	r4, r0
 8006382:	d053      	beq.n	800642c <_reclaim_reent+0xb4>
 8006384:	69c3      	ldr	r3, [r0, #28]
 8006386:	b31b      	cbz	r3, 80063d0 <_reclaim_reent+0x58>
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	b163      	cbz	r3, 80063a6 <_reclaim_reent+0x2e>
 800638c:	2500      	movs	r5, #0
 800638e:	69e3      	ldr	r3, [r4, #28]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	5959      	ldr	r1, [r3, r5]
 8006394:	b9b1      	cbnz	r1, 80063c4 <_reclaim_reent+0x4c>
 8006396:	3504      	adds	r5, #4
 8006398:	2d80      	cmp	r5, #128	@ 0x80
 800639a:	d1f8      	bne.n	800638e <_reclaim_reent+0x16>
 800639c:	69e3      	ldr	r3, [r4, #28]
 800639e:	4620      	mov	r0, r4
 80063a0:	68d9      	ldr	r1, [r3, #12]
 80063a2:	f000 ff11 	bl	80071c8 <_free_r>
 80063a6:	69e3      	ldr	r3, [r4, #28]
 80063a8:	6819      	ldr	r1, [r3, #0]
 80063aa:	b111      	cbz	r1, 80063b2 <_reclaim_reent+0x3a>
 80063ac:	4620      	mov	r0, r4
 80063ae:	f000 ff0b 	bl	80071c8 <_free_r>
 80063b2:	69e3      	ldr	r3, [r4, #28]
 80063b4:	689d      	ldr	r5, [r3, #8]
 80063b6:	b15d      	cbz	r5, 80063d0 <_reclaim_reent+0x58>
 80063b8:	4629      	mov	r1, r5
 80063ba:	4620      	mov	r0, r4
 80063bc:	682d      	ldr	r5, [r5, #0]
 80063be:	f000 ff03 	bl	80071c8 <_free_r>
 80063c2:	e7f8      	b.n	80063b6 <_reclaim_reent+0x3e>
 80063c4:	680e      	ldr	r6, [r1, #0]
 80063c6:	4620      	mov	r0, r4
 80063c8:	f000 fefe 	bl	80071c8 <_free_r>
 80063cc:	4631      	mov	r1, r6
 80063ce:	e7e1      	b.n	8006394 <_reclaim_reent+0x1c>
 80063d0:	6961      	ldr	r1, [r4, #20]
 80063d2:	b111      	cbz	r1, 80063da <_reclaim_reent+0x62>
 80063d4:	4620      	mov	r0, r4
 80063d6:	f000 fef7 	bl	80071c8 <_free_r>
 80063da:	69e1      	ldr	r1, [r4, #28]
 80063dc:	b111      	cbz	r1, 80063e4 <_reclaim_reent+0x6c>
 80063de:	4620      	mov	r0, r4
 80063e0:	f000 fef2 	bl	80071c8 <_free_r>
 80063e4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80063e6:	b111      	cbz	r1, 80063ee <_reclaim_reent+0x76>
 80063e8:	4620      	mov	r0, r4
 80063ea:	f000 feed 	bl	80071c8 <_free_r>
 80063ee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80063f0:	b111      	cbz	r1, 80063f8 <_reclaim_reent+0x80>
 80063f2:	4620      	mov	r0, r4
 80063f4:	f000 fee8 	bl	80071c8 <_free_r>
 80063f8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80063fa:	b111      	cbz	r1, 8006402 <_reclaim_reent+0x8a>
 80063fc:	4620      	mov	r0, r4
 80063fe:	f000 fee3 	bl	80071c8 <_free_r>
 8006402:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006404:	b111      	cbz	r1, 800640c <_reclaim_reent+0x94>
 8006406:	4620      	mov	r0, r4
 8006408:	f000 fede 	bl	80071c8 <_free_r>
 800640c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800640e:	b111      	cbz	r1, 8006416 <_reclaim_reent+0x9e>
 8006410:	4620      	mov	r0, r4
 8006412:	f000 fed9 	bl	80071c8 <_free_r>
 8006416:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006418:	b111      	cbz	r1, 8006420 <_reclaim_reent+0xa8>
 800641a:	4620      	mov	r0, r4
 800641c:	f000 fed4 	bl	80071c8 <_free_r>
 8006420:	6a23      	ldr	r3, [r4, #32]
 8006422:	b11b      	cbz	r3, 800642c <_reclaim_reent+0xb4>
 8006424:	4620      	mov	r0, r4
 8006426:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800642a:	4718      	bx	r3
 800642c:	bd70      	pop	{r4, r5, r6, pc}
 800642e:	bf00      	nop
 8006430:	2000001c 	.word	0x2000001c

08006434 <_lseek_r>:
 8006434:	b538      	push	{r3, r4, r5, lr}
 8006436:	4d07      	ldr	r5, [pc, #28]	@ (8006454 <_lseek_r+0x20>)
 8006438:	4604      	mov	r4, r0
 800643a:	4608      	mov	r0, r1
 800643c:	4611      	mov	r1, r2
 800643e:	2200      	movs	r2, #0
 8006440:	602a      	str	r2, [r5, #0]
 8006442:	461a      	mov	r2, r3
 8006444:	f7fb faeb 	bl	8001a1e <_lseek>
 8006448:	1c43      	adds	r3, r0, #1
 800644a:	d102      	bne.n	8006452 <_lseek_r+0x1e>
 800644c:	682b      	ldr	r3, [r5, #0]
 800644e:	b103      	cbz	r3, 8006452 <_lseek_r+0x1e>
 8006450:	6023      	str	r3, [r4, #0]
 8006452:	bd38      	pop	{r3, r4, r5, pc}
 8006454:	200043d4 	.word	0x200043d4

08006458 <_read_r>:
 8006458:	b538      	push	{r3, r4, r5, lr}
 800645a:	4d07      	ldr	r5, [pc, #28]	@ (8006478 <_read_r+0x20>)
 800645c:	4604      	mov	r4, r0
 800645e:	4608      	mov	r0, r1
 8006460:	4611      	mov	r1, r2
 8006462:	2200      	movs	r2, #0
 8006464:	602a      	str	r2, [r5, #0]
 8006466:	461a      	mov	r2, r3
 8006468:	f7fb fa79 	bl	800195e <_read>
 800646c:	1c43      	adds	r3, r0, #1
 800646e:	d102      	bne.n	8006476 <_read_r+0x1e>
 8006470:	682b      	ldr	r3, [r5, #0]
 8006472:	b103      	cbz	r3, 8006476 <_read_r+0x1e>
 8006474:	6023      	str	r3, [r4, #0]
 8006476:	bd38      	pop	{r3, r4, r5, pc}
 8006478:	200043d4 	.word	0x200043d4

0800647c <_write_r>:
 800647c:	b538      	push	{r3, r4, r5, lr}
 800647e:	4d07      	ldr	r5, [pc, #28]	@ (800649c <_write_r+0x20>)
 8006480:	4604      	mov	r4, r0
 8006482:	4608      	mov	r0, r1
 8006484:	4611      	mov	r1, r2
 8006486:	2200      	movs	r2, #0
 8006488:	602a      	str	r2, [r5, #0]
 800648a:	461a      	mov	r2, r3
 800648c:	f7fb fa84 	bl	8001998 <_write>
 8006490:	1c43      	adds	r3, r0, #1
 8006492:	d102      	bne.n	800649a <_write_r+0x1e>
 8006494:	682b      	ldr	r3, [r5, #0]
 8006496:	b103      	cbz	r3, 800649a <_write_r+0x1e>
 8006498:	6023      	str	r3, [r4, #0]
 800649a:	bd38      	pop	{r3, r4, r5, pc}
 800649c:	200043d4 	.word	0x200043d4

080064a0 <__errno>:
 80064a0:	4b01      	ldr	r3, [pc, #4]	@ (80064a8 <__errno+0x8>)
 80064a2:	6818      	ldr	r0, [r3, #0]
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	2000001c 	.word	0x2000001c

080064ac <__libc_init_array>:
 80064ac:	b570      	push	{r4, r5, r6, lr}
 80064ae:	4d0d      	ldr	r5, [pc, #52]	@ (80064e4 <__libc_init_array+0x38>)
 80064b0:	4c0d      	ldr	r4, [pc, #52]	@ (80064e8 <__libc_init_array+0x3c>)
 80064b2:	1b64      	subs	r4, r4, r5
 80064b4:	10a4      	asrs	r4, r4, #2
 80064b6:	2600      	movs	r6, #0
 80064b8:	42a6      	cmp	r6, r4
 80064ba:	d109      	bne.n	80064d0 <__libc_init_array+0x24>
 80064bc:	4d0b      	ldr	r5, [pc, #44]	@ (80064ec <__libc_init_array+0x40>)
 80064be:	4c0c      	ldr	r4, [pc, #48]	@ (80064f0 <__libc_init_array+0x44>)
 80064c0:	f002 f868 	bl	8008594 <_init>
 80064c4:	1b64      	subs	r4, r4, r5
 80064c6:	10a4      	asrs	r4, r4, #2
 80064c8:	2600      	movs	r6, #0
 80064ca:	42a6      	cmp	r6, r4
 80064cc:	d105      	bne.n	80064da <__libc_init_array+0x2e>
 80064ce:	bd70      	pop	{r4, r5, r6, pc}
 80064d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80064d4:	4798      	blx	r3
 80064d6:	3601      	adds	r6, #1
 80064d8:	e7ee      	b.n	80064b8 <__libc_init_array+0xc>
 80064da:	f855 3b04 	ldr.w	r3, [r5], #4
 80064de:	4798      	blx	r3
 80064e0:	3601      	adds	r6, #1
 80064e2:	e7f2      	b.n	80064ca <__libc_init_array+0x1e>
 80064e4:	08008984 	.word	0x08008984
 80064e8:	08008984 	.word	0x08008984
 80064ec:	08008984 	.word	0x08008984
 80064f0:	08008988 	.word	0x08008988

080064f4 <__retarget_lock_init_recursive>:
 80064f4:	4770      	bx	lr

080064f6 <__retarget_lock_acquire_recursive>:
 80064f6:	4770      	bx	lr

080064f8 <__retarget_lock_release_recursive>:
 80064f8:	4770      	bx	lr

080064fa <memcpy>:
 80064fa:	440a      	add	r2, r1
 80064fc:	4291      	cmp	r1, r2
 80064fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8006502:	d100      	bne.n	8006506 <memcpy+0xc>
 8006504:	4770      	bx	lr
 8006506:	b510      	push	{r4, lr}
 8006508:	f811 4b01 	ldrb.w	r4, [r1], #1
 800650c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006510:	4291      	cmp	r1, r2
 8006512:	d1f9      	bne.n	8006508 <memcpy+0xe>
 8006514:	bd10      	pop	{r4, pc}

08006516 <quorem>:
 8006516:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800651a:	6903      	ldr	r3, [r0, #16]
 800651c:	690c      	ldr	r4, [r1, #16]
 800651e:	42a3      	cmp	r3, r4
 8006520:	4607      	mov	r7, r0
 8006522:	db7e      	blt.n	8006622 <quorem+0x10c>
 8006524:	3c01      	subs	r4, #1
 8006526:	f101 0814 	add.w	r8, r1, #20
 800652a:	00a3      	lsls	r3, r4, #2
 800652c:	f100 0514 	add.w	r5, r0, #20
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006536:	9301      	str	r3, [sp, #4]
 8006538:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800653c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006540:	3301      	adds	r3, #1
 8006542:	429a      	cmp	r2, r3
 8006544:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006548:	fbb2 f6f3 	udiv	r6, r2, r3
 800654c:	d32e      	bcc.n	80065ac <quorem+0x96>
 800654e:	f04f 0a00 	mov.w	sl, #0
 8006552:	46c4      	mov	ip, r8
 8006554:	46ae      	mov	lr, r5
 8006556:	46d3      	mov	fp, sl
 8006558:	f85c 3b04 	ldr.w	r3, [ip], #4
 800655c:	b298      	uxth	r0, r3
 800655e:	fb06 a000 	mla	r0, r6, r0, sl
 8006562:	0c02      	lsrs	r2, r0, #16
 8006564:	0c1b      	lsrs	r3, r3, #16
 8006566:	fb06 2303 	mla	r3, r6, r3, r2
 800656a:	f8de 2000 	ldr.w	r2, [lr]
 800656e:	b280      	uxth	r0, r0
 8006570:	b292      	uxth	r2, r2
 8006572:	1a12      	subs	r2, r2, r0
 8006574:	445a      	add	r2, fp
 8006576:	f8de 0000 	ldr.w	r0, [lr]
 800657a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800657e:	b29b      	uxth	r3, r3
 8006580:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006584:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006588:	b292      	uxth	r2, r2
 800658a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800658e:	45e1      	cmp	r9, ip
 8006590:	f84e 2b04 	str.w	r2, [lr], #4
 8006594:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006598:	d2de      	bcs.n	8006558 <quorem+0x42>
 800659a:	9b00      	ldr	r3, [sp, #0]
 800659c:	58eb      	ldr	r3, [r5, r3]
 800659e:	b92b      	cbnz	r3, 80065ac <quorem+0x96>
 80065a0:	9b01      	ldr	r3, [sp, #4]
 80065a2:	3b04      	subs	r3, #4
 80065a4:	429d      	cmp	r5, r3
 80065a6:	461a      	mov	r2, r3
 80065a8:	d32f      	bcc.n	800660a <quorem+0xf4>
 80065aa:	613c      	str	r4, [r7, #16]
 80065ac:	4638      	mov	r0, r7
 80065ae:	f001 f97d 	bl	80078ac <__mcmp>
 80065b2:	2800      	cmp	r0, #0
 80065b4:	db25      	blt.n	8006602 <quorem+0xec>
 80065b6:	4629      	mov	r1, r5
 80065b8:	2000      	movs	r0, #0
 80065ba:	f858 2b04 	ldr.w	r2, [r8], #4
 80065be:	f8d1 c000 	ldr.w	ip, [r1]
 80065c2:	fa1f fe82 	uxth.w	lr, r2
 80065c6:	fa1f f38c 	uxth.w	r3, ip
 80065ca:	eba3 030e 	sub.w	r3, r3, lr
 80065ce:	4403      	add	r3, r0
 80065d0:	0c12      	lsrs	r2, r2, #16
 80065d2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80065d6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80065da:	b29b      	uxth	r3, r3
 80065dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065e0:	45c1      	cmp	r9, r8
 80065e2:	f841 3b04 	str.w	r3, [r1], #4
 80065e6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80065ea:	d2e6      	bcs.n	80065ba <quorem+0xa4>
 80065ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065f4:	b922      	cbnz	r2, 8006600 <quorem+0xea>
 80065f6:	3b04      	subs	r3, #4
 80065f8:	429d      	cmp	r5, r3
 80065fa:	461a      	mov	r2, r3
 80065fc:	d30b      	bcc.n	8006616 <quorem+0x100>
 80065fe:	613c      	str	r4, [r7, #16]
 8006600:	3601      	adds	r6, #1
 8006602:	4630      	mov	r0, r6
 8006604:	b003      	add	sp, #12
 8006606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800660a:	6812      	ldr	r2, [r2, #0]
 800660c:	3b04      	subs	r3, #4
 800660e:	2a00      	cmp	r2, #0
 8006610:	d1cb      	bne.n	80065aa <quorem+0x94>
 8006612:	3c01      	subs	r4, #1
 8006614:	e7c6      	b.n	80065a4 <quorem+0x8e>
 8006616:	6812      	ldr	r2, [r2, #0]
 8006618:	3b04      	subs	r3, #4
 800661a:	2a00      	cmp	r2, #0
 800661c:	d1ef      	bne.n	80065fe <quorem+0xe8>
 800661e:	3c01      	subs	r4, #1
 8006620:	e7ea      	b.n	80065f8 <quorem+0xe2>
 8006622:	2000      	movs	r0, #0
 8006624:	e7ee      	b.n	8006604 <quorem+0xee>
	...

08006628 <_dtoa_r>:
 8006628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800662c:	69c7      	ldr	r7, [r0, #28]
 800662e:	b097      	sub	sp, #92	@ 0x5c
 8006630:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006634:	ec55 4b10 	vmov	r4, r5, d0
 8006638:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800663a:	9107      	str	r1, [sp, #28]
 800663c:	4681      	mov	r9, r0
 800663e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006640:	9311      	str	r3, [sp, #68]	@ 0x44
 8006642:	b97f      	cbnz	r7, 8006664 <_dtoa_r+0x3c>
 8006644:	2010      	movs	r0, #16
 8006646:	f000 fe09 	bl	800725c <malloc>
 800664a:	4602      	mov	r2, r0
 800664c:	f8c9 001c 	str.w	r0, [r9, #28]
 8006650:	b920      	cbnz	r0, 800665c <_dtoa_r+0x34>
 8006652:	4ba9      	ldr	r3, [pc, #676]	@ (80068f8 <_dtoa_r+0x2d0>)
 8006654:	21ef      	movs	r1, #239	@ 0xef
 8006656:	48a9      	ldr	r0, [pc, #676]	@ (80068fc <_dtoa_r+0x2d4>)
 8006658:	f001 fc5e 	bl	8007f18 <__assert_func>
 800665c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006660:	6007      	str	r7, [r0, #0]
 8006662:	60c7      	str	r7, [r0, #12]
 8006664:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006668:	6819      	ldr	r1, [r3, #0]
 800666a:	b159      	cbz	r1, 8006684 <_dtoa_r+0x5c>
 800666c:	685a      	ldr	r2, [r3, #4]
 800666e:	604a      	str	r2, [r1, #4]
 8006670:	2301      	movs	r3, #1
 8006672:	4093      	lsls	r3, r2
 8006674:	608b      	str	r3, [r1, #8]
 8006676:	4648      	mov	r0, r9
 8006678:	f000 fee6 	bl	8007448 <_Bfree>
 800667c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006680:	2200      	movs	r2, #0
 8006682:	601a      	str	r2, [r3, #0]
 8006684:	1e2b      	subs	r3, r5, #0
 8006686:	bfb9      	ittee	lt
 8006688:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800668c:	9305      	strlt	r3, [sp, #20]
 800668e:	2300      	movge	r3, #0
 8006690:	6033      	strge	r3, [r6, #0]
 8006692:	9f05      	ldr	r7, [sp, #20]
 8006694:	4b9a      	ldr	r3, [pc, #616]	@ (8006900 <_dtoa_r+0x2d8>)
 8006696:	bfbc      	itt	lt
 8006698:	2201      	movlt	r2, #1
 800669a:	6032      	strlt	r2, [r6, #0]
 800669c:	43bb      	bics	r3, r7
 800669e:	d112      	bne.n	80066c6 <_dtoa_r+0x9e>
 80066a0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80066a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80066a6:	6013      	str	r3, [r2, #0]
 80066a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80066ac:	4323      	orrs	r3, r4
 80066ae:	f000 855a 	beq.w	8007166 <_dtoa_r+0xb3e>
 80066b2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80066b4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006914 <_dtoa_r+0x2ec>
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f000 855c 	beq.w	8007176 <_dtoa_r+0xb4e>
 80066be:	f10a 0303 	add.w	r3, sl, #3
 80066c2:	f000 bd56 	b.w	8007172 <_dtoa_r+0xb4a>
 80066c6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80066ca:	2200      	movs	r2, #0
 80066cc:	ec51 0b17 	vmov	r0, r1, d7
 80066d0:	2300      	movs	r3, #0
 80066d2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80066d6:	f7fa f9f7 	bl	8000ac8 <__aeabi_dcmpeq>
 80066da:	4680      	mov	r8, r0
 80066dc:	b158      	cbz	r0, 80066f6 <_dtoa_r+0xce>
 80066de:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80066e0:	2301      	movs	r3, #1
 80066e2:	6013      	str	r3, [r2, #0]
 80066e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80066e6:	b113      	cbz	r3, 80066ee <_dtoa_r+0xc6>
 80066e8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80066ea:	4b86      	ldr	r3, [pc, #536]	@ (8006904 <_dtoa_r+0x2dc>)
 80066ec:	6013      	str	r3, [r2, #0]
 80066ee:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006918 <_dtoa_r+0x2f0>
 80066f2:	f000 bd40 	b.w	8007176 <_dtoa_r+0xb4e>
 80066f6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80066fa:	aa14      	add	r2, sp, #80	@ 0x50
 80066fc:	a915      	add	r1, sp, #84	@ 0x54
 80066fe:	4648      	mov	r0, r9
 8006700:	f001 f984 	bl	8007a0c <__d2b>
 8006704:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006708:	9002      	str	r0, [sp, #8]
 800670a:	2e00      	cmp	r6, #0
 800670c:	d078      	beq.n	8006800 <_dtoa_r+0x1d8>
 800670e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006710:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006714:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006718:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800671c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006720:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006724:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006728:	4619      	mov	r1, r3
 800672a:	2200      	movs	r2, #0
 800672c:	4b76      	ldr	r3, [pc, #472]	@ (8006908 <_dtoa_r+0x2e0>)
 800672e:	f7f9 fdab 	bl	8000288 <__aeabi_dsub>
 8006732:	a36b      	add	r3, pc, #428	@ (adr r3, 80068e0 <_dtoa_r+0x2b8>)
 8006734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006738:	f7f9 ff5e 	bl	80005f8 <__aeabi_dmul>
 800673c:	a36a      	add	r3, pc, #424	@ (adr r3, 80068e8 <_dtoa_r+0x2c0>)
 800673e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006742:	f7f9 fda3 	bl	800028c <__adddf3>
 8006746:	4604      	mov	r4, r0
 8006748:	4630      	mov	r0, r6
 800674a:	460d      	mov	r5, r1
 800674c:	f7f9 feea 	bl	8000524 <__aeabi_i2d>
 8006750:	a367      	add	r3, pc, #412	@ (adr r3, 80068f0 <_dtoa_r+0x2c8>)
 8006752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006756:	f7f9 ff4f 	bl	80005f8 <__aeabi_dmul>
 800675a:	4602      	mov	r2, r0
 800675c:	460b      	mov	r3, r1
 800675e:	4620      	mov	r0, r4
 8006760:	4629      	mov	r1, r5
 8006762:	f7f9 fd93 	bl	800028c <__adddf3>
 8006766:	4604      	mov	r4, r0
 8006768:	460d      	mov	r5, r1
 800676a:	f7fa f9f5 	bl	8000b58 <__aeabi_d2iz>
 800676e:	2200      	movs	r2, #0
 8006770:	4607      	mov	r7, r0
 8006772:	2300      	movs	r3, #0
 8006774:	4620      	mov	r0, r4
 8006776:	4629      	mov	r1, r5
 8006778:	f7fa f9b0 	bl	8000adc <__aeabi_dcmplt>
 800677c:	b140      	cbz	r0, 8006790 <_dtoa_r+0x168>
 800677e:	4638      	mov	r0, r7
 8006780:	f7f9 fed0 	bl	8000524 <__aeabi_i2d>
 8006784:	4622      	mov	r2, r4
 8006786:	462b      	mov	r3, r5
 8006788:	f7fa f99e 	bl	8000ac8 <__aeabi_dcmpeq>
 800678c:	b900      	cbnz	r0, 8006790 <_dtoa_r+0x168>
 800678e:	3f01      	subs	r7, #1
 8006790:	2f16      	cmp	r7, #22
 8006792:	d852      	bhi.n	800683a <_dtoa_r+0x212>
 8006794:	4b5d      	ldr	r3, [pc, #372]	@ (800690c <_dtoa_r+0x2e4>)
 8006796:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800679a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80067a2:	f7fa f99b 	bl	8000adc <__aeabi_dcmplt>
 80067a6:	2800      	cmp	r0, #0
 80067a8:	d049      	beq.n	800683e <_dtoa_r+0x216>
 80067aa:	3f01      	subs	r7, #1
 80067ac:	2300      	movs	r3, #0
 80067ae:	9310      	str	r3, [sp, #64]	@ 0x40
 80067b0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80067b2:	1b9b      	subs	r3, r3, r6
 80067b4:	1e5a      	subs	r2, r3, #1
 80067b6:	bf45      	ittet	mi
 80067b8:	f1c3 0301 	rsbmi	r3, r3, #1
 80067bc:	9300      	strmi	r3, [sp, #0]
 80067be:	2300      	movpl	r3, #0
 80067c0:	2300      	movmi	r3, #0
 80067c2:	9206      	str	r2, [sp, #24]
 80067c4:	bf54      	ite	pl
 80067c6:	9300      	strpl	r3, [sp, #0]
 80067c8:	9306      	strmi	r3, [sp, #24]
 80067ca:	2f00      	cmp	r7, #0
 80067cc:	db39      	blt.n	8006842 <_dtoa_r+0x21a>
 80067ce:	9b06      	ldr	r3, [sp, #24]
 80067d0:	970d      	str	r7, [sp, #52]	@ 0x34
 80067d2:	443b      	add	r3, r7
 80067d4:	9306      	str	r3, [sp, #24]
 80067d6:	2300      	movs	r3, #0
 80067d8:	9308      	str	r3, [sp, #32]
 80067da:	9b07      	ldr	r3, [sp, #28]
 80067dc:	2b09      	cmp	r3, #9
 80067de:	d863      	bhi.n	80068a8 <_dtoa_r+0x280>
 80067e0:	2b05      	cmp	r3, #5
 80067e2:	bfc4      	itt	gt
 80067e4:	3b04      	subgt	r3, #4
 80067e6:	9307      	strgt	r3, [sp, #28]
 80067e8:	9b07      	ldr	r3, [sp, #28]
 80067ea:	f1a3 0302 	sub.w	r3, r3, #2
 80067ee:	bfcc      	ite	gt
 80067f0:	2400      	movgt	r4, #0
 80067f2:	2401      	movle	r4, #1
 80067f4:	2b03      	cmp	r3, #3
 80067f6:	d863      	bhi.n	80068c0 <_dtoa_r+0x298>
 80067f8:	e8df f003 	tbb	[pc, r3]
 80067fc:	2b375452 	.word	0x2b375452
 8006800:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006804:	441e      	add	r6, r3
 8006806:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800680a:	2b20      	cmp	r3, #32
 800680c:	bfc1      	itttt	gt
 800680e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006812:	409f      	lslgt	r7, r3
 8006814:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006818:	fa24 f303 	lsrgt.w	r3, r4, r3
 800681c:	bfd6      	itet	le
 800681e:	f1c3 0320 	rsble	r3, r3, #32
 8006822:	ea47 0003 	orrgt.w	r0, r7, r3
 8006826:	fa04 f003 	lslle.w	r0, r4, r3
 800682a:	f7f9 fe6b 	bl	8000504 <__aeabi_ui2d>
 800682e:	2201      	movs	r2, #1
 8006830:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006834:	3e01      	subs	r6, #1
 8006836:	9212      	str	r2, [sp, #72]	@ 0x48
 8006838:	e776      	b.n	8006728 <_dtoa_r+0x100>
 800683a:	2301      	movs	r3, #1
 800683c:	e7b7      	b.n	80067ae <_dtoa_r+0x186>
 800683e:	9010      	str	r0, [sp, #64]	@ 0x40
 8006840:	e7b6      	b.n	80067b0 <_dtoa_r+0x188>
 8006842:	9b00      	ldr	r3, [sp, #0]
 8006844:	1bdb      	subs	r3, r3, r7
 8006846:	9300      	str	r3, [sp, #0]
 8006848:	427b      	negs	r3, r7
 800684a:	9308      	str	r3, [sp, #32]
 800684c:	2300      	movs	r3, #0
 800684e:	930d      	str	r3, [sp, #52]	@ 0x34
 8006850:	e7c3      	b.n	80067da <_dtoa_r+0x1b2>
 8006852:	2301      	movs	r3, #1
 8006854:	9309      	str	r3, [sp, #36]	@ 0x24
 8006856:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006858:	eb07 0b03 	add.w	fp, r7, r3
 800685c:	f10b 0301 	add.w	r3, fp, #1
 8006860:	2b01      	cmp	r3, #1
 8006862:	9303      	str	r3, [sp, #12]
 8006864:	bfb8      	it	lt
 8006866:	2301      	movlt	r3, #1
 8006868:	e006      	b.n	8006878 <_dtoa_r+0x250>
 800686a:	2301      	movs	r3, #1
 800686c:	9309      	str	r3, [sp, #36]	@ 0x24
 800686e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006870:	2b00      	cmp	r3, #0
 8006872:	dd28      	ble.n	80068c6 <_dtoa_r+0x29e>
 8006874:	469b      	mov	fp, r3
 8006876:	9303      	str	r3, [sp, #12]
 8006878:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800687c:	2100      	movs	r1, #0
 800687e:	2204      	movs	r2, #4
 8006880:	f102 0514 	add.w	r5, r2, #20
 8006884:	429d      	cmp	r5, r3
 8006886:	d926      	bls.n	80068d6 <_dtoa_r+0x2ae>
 8006888:	6041      	str	r1, [r0, #4]
 800688a:	4648      	mov	r0, r9
 800688c:	f000 fd9c 	bl	80073c8 <_Balloc>
 8006890:	4682      	mov	sl, r0
 8006892:	2800      	cmp	r0, #0
 8006894:	d142      	bne.n	800691c <_dtoa_r+0x2f4>
 8006896:	4b1e      	ldr	r3, [pc, #120]	@ (8006910 <_dtoa_r+0x2e8>)
 8006898:	4602      	mov	r2, r0
 800689a:	f240 11af 	movw	r1, #431	@ 0x1af
 800689e:	e6da      	b.n	8006656 <_dtoa_r+0x2e>
 80068a0:	2300      	movs	r3, #0
 80068a2:	e7e3      	b.n	800686c <_dtoa_r+0x244>
 80068a4:	2300      	movs	r3, #0
 80068a6:	e7d5      	b.n	8006854 <_dtoa_r+0x22c>
 80068a8:	2401      	movs	r4, #1
 80068aa:	2300      	movs	r3, #0
 80068ac:	9307      	str	r3, [sp, #28]
 80068ae:	9409      	str	r4, [sp, #36]	@ 0x24
 80068b0:	f04f 3bff 	mov.w	fp, #4294967295
 80068b4:	2200      	movs	r2, #0
 80068b6:	f8cd b00c 	str.w	fp, [sp, #12]
 80068ba:	2312      	movs	r3, #18
 80068bc:	920c      	str	r2, [sp, #48]	@ 0x30
 80068be:	e7db      	b.n	8006878 <_dtoa_r+0x250>
 80068c0:	2301      	movs	r3, #1
 80068c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80068c4:	e7f4      	b.n	80068b0 <_dtoa_r+0x288>
 80068c6:	f04f 0b01 	mov.w	fp, #1
 80068ca:	f8cd b00c 	str.w	fp, [sp, #12]
 80068ce:	465b      	mov	r3, fp
 80068d0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80068d4:	e7d0      	b.n	8006878 <_dtoa_r+0x250>
 80068d6:	3101      	adds	r1, #1
 80068d8:	0052      	lsls	r2, r2, #1
 80068da:	e7d1      	b.n	8006880 <_dtoa_r+0x258>
 80068dc:	f3af 8000 	nop.w
 80068e0:	636f4361 	.word	0x636f4361
 80068e4:	3fd287a7 	.word	0x3fd287a7
 80068e8:	8b60c8b3 	.word	0x8b60c8b3
 80068ec:	3fc68a28 	.word	0x3fc68a28
 80068f0:	509f79fb 	.word	0x509f79fb
 80068f4:	3fd34413 	.word	0x3fd34413
 80068f8:	08008645 	.word	0x08008645
 80068fc:	0800865c 	.word	0x0800865c
 8006900:	7ff00000 	.word	0x7ff00000
 8006904:	08008615 	.word	0x08008615
 8006908:	3ff80000 	.word	0x3ff80000
 800690c:	080087b0 	.word	0x080087b0
 8006910:	080086b4 	.word	0x080086b4
 8006914:	08008641 	.word	0x08008641
 8006918:	08008614 	.word	0x08008614
 800691c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006920:	6018      	str	r0, [r3, #0]
 8006922:	9b03      	ldr	r3, [sp, #12]
 8006924:	2b0e      	cmp	r3, #14
 8006926:	f200 80a1 	bhi.w	8006a6c <_dtoa_r+0x444>
 800692a:	2c00      	cmp	r4, #0
 800692c:	f000 809e 	beq.w	8006a6c <_dtoa_r+0x444>
 8006930:	2f00      	cmp	r7, #0
 8006932:	dd33      	ble.n	800699c <_dtoa_r+0x374>
 8006934:	4b9c      	ldr	r3, [pc, #624]	@ (8006ba8 <_dtoa_r+0x580>)
 8006936:	f007 020f 	and.w	r2, r7, #15
 800693a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800693e:	ed93 7b00 	vldr	d7, [r3]
 8006942:	05f8      	lsls	r0, r7, #23
 8006944:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006948:	ea4f 1427 	mov.w	r4, r7, asr #4
 800694c:	d516      	bpl.n	800697c <_dtoa_r+0x354>
 800694e:	4b97      	ldr	r3, [pc, #604]	@ (8006bac <_dtoa_r+0x584>)
 8006950:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006954:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006958:	f7f9 ff78 	bl	800084c <__aeabi_ddiv>
 800695c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006960:	f004 040f 	and.w	r4, r4, #15
 8006964:	2603      	movs	r6, #3
 8006966:	4d91      	ldr	r5, [pc, #580]	@ (8006bac <_dtoa_r+0x584>)
 8006968:	b954      	cbnz	r4, 8006980 <_dtoa_r+0x358>
 800696a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800696e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006972:	f7f9 ff6b 	bl	800084c <__aeabi_ddiv>
 8006976:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800697a:	e028      	b.n	80069ce <_dtoa_r+0x3a6>
 800697c:	2602      	movs	r6, #2
 800697e:	e7f2      	b.n	8006966 <_dtoa_r+0x33e>
 8006980:	07e1      	lsls	r1, r4, #31
 8006982:	d508      	bpl.n	8006996 <_dtoa_r+0x36e>
 8006984:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006988:	e9d5 2300 	ldrd	r2, r3, [r5]
 800698c:	f7f9 fe34 	bl	80005f8 <__aeabi_dmul>
 8006990:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006994:	3601      	adds	r6, #1
 8006996:	1064      	asrs	r4, r4, #1
 8006998:	3508      	adds	r5, #8
 800699a:	e7e5      	b.n	8006968 <_dtoa_r+0x340>
 800699c:	f000 80af 	beq.w	8006afe <_dtoa_r+0x4d6>
 80069a0:	427c      	negs	r4, r7
 80069a2:	4b81      	ldr	r3, [pc, #516]	@ (8006ba8 <_dtoa_r+0x580>)
 80069a4:	4d81      	ldr	r5, [pc, #516]	@ (8006bac <_dtoa_r+0x584>)
 80069a6:	f004 020f 	and.w	r2, r4, #15
 80069aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80069b6:	f7f9 fe1f 	bl	80005f8 <__aeabi_dmul>
 80069ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069be:	1124      	asrs	r4, r4, #4
 80069c0:	2300      	movs	r3, #0
 80069c2:	2602      	movs	r6, #2
 80069c4:	2c00      	cmp	r4, #0
 80069c6:	f040 808f 	bne.w	8006ae8 <_dtoa_r+0x4c0>
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1d3      	bne.n	8006976 <_dtoa_r+0x34e>
 80069ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80069d0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f000 8094 	beq.w	8006b02 <_dtoa_r+0x4da>
 80069da:	4b75      	ldr	r3, [pc, #468]	@ (8006bb0 <_dtoa_r+0x588>)
 80069dc:	2200      	movs	r2, #0
 80069de:	4620      	mov	r0, r4
 80069e0:	4629      	mov	r1, r5
 80069e2:	f7fa f87b 	bl	8000adc <__aeabi_dcmplt>
 80069e6:	2800      	cmp	r0, #0
 80069e8:	f000 808b 	beq.w	8006b02 <_dtoa_r+0x4da>
 80069ec:	9b03      	ldr	r3, [sp, #12]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	f000 8087 	beq.w	8006b02 <_dtoa_r+0x4da>
 80069f4:	f1bb 0f00 	cmp.w	fp, #0
 80069f8:	dd34      	ble.n	8006a64 <_dtoa_r+0x43c>
 80069fa:	4620      	mov	r0, r4
 80069fc:	4b6d      	ldr	r3, [pc, #436]	@ (8006bb4 <_dtoa_r+0x58c>)
 80069fe:	2200      	movs	r2, #0
 8006a00:	4629      	mov	r1, r5
 8006a02:	f7f9 fdf9 	bl	80005f8 <__aeabi_dmul>
 8006a06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a0a:	f107 38ff 	add.w	r8, r7, #4294967295
 8006a0e:	3601      	adds	r6, #1
 8006a10:	465c      	mov	r4, fp
 8006a12:	4630      	mov	r0, r6
 8006a14:	f7f9 fd86 	bl	8000524 <__aeabi_i2d>
 8006a18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a1c:	f7f9 fdec 	bl	80005f8 <__aeabi_dmul>
 8006a20:	4b65      	ldr	r3, [pc, #404]	@ (8006bb8 <_dtoa_r+0x590>)
 8006a22:	2200      	movs	r2, #0
 8006a24:	f7f9 fc32 	bl	800028c <__adddf3>
 8006a28:	4605      	mov	r5, r0
 8006a2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006a2e:	2c00      	cmp	r4, #0
 8006a30:	d16a      	bne.n	8006b08 <_dtoa_r+0x4e0>
 8006a32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a36:	4b61      	ldr	r3, [pc, #388]	@ (8006bbc <_dtoa_r+0x594>)
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f7f9 fc25 	bl	8000288 <__aeabi_dsub>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	460b      	mov	r3, r1
 8006a42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006a46:	462a      	mov	r2, r5
 8006a48:	4633      	mov	r3, r6
 8006a4a:	f7fa f865 	bl	8000b18 <__aeabi_dcmpgt>
 8006a4e:	2800      	cmp	r0, #0
 8006a50:	f040 8298 	bne.w	8006f84 <_dtoa_r+0x95c>
 8006a54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a58:	462a      	mov	r2, r5
 8006a5a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006a5e:	f7fa f83d 	bl	8000adc <__aeabi_dcmplt>
 8006a62:	bb38      	cbnz	r0, 8006ab4 <_dtoa_r+0x48c>
 8006a64:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006a68:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006a6c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	f2c0 8157 	blt.w	8006d22 <_dtoa_r+0x6fa>
 8006a74:	2f0e      	cmp	r7, #14
 8006a76:	f300 8154 	bgt.w	8006d22 <_dtoa_r+0x6fa>
 8006a7a:	4b4b      	ldr	r3, [pc, #300]	@ (8006ba8 <_dtoa_r+0x580>)
 8006a7c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006a80:	ed93 7b00 	vldr	d7, [r3]
 8006a84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	ed8d 7b00 	vstr	d7, [sp]
 8006a8c:	f280 80e5 	bge.w	8006c5a <_dtoa_r+0x632>
 8006a90:	9b03      	ldr	r3, [sp, #12]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f300 80e1 	bgt.w	8006c5a <_dtoa_r+0x632>
 8006a98:	d10c      	bne.n	8006ab4 <_dtoa_r+0x48c>
 8006a9a:	4b48      	ldr	r3, [pc, #288]	@ (8006bbc <_dtoa_r+0x594>)
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	ec51 0b17 	vmov	r0, r1, d7
 8006aa2:	f7f9 fda9 	bl	80005f8 <__aeabi_dmul>
 8006aa6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006aaa:	f7fa f82b 	bl	8000b04 <__aeabi_dcmpge>
 8006aae:	2800      	cmp	r0, #0
 8006ab0:	f000 8266 	beq.w	8006f80 <_dtoa_r+0x958>
 8006ab4:	2400      	movs	r4, #0
 8006ab6:	4625      	mov	r5, r4
 8006ab8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006aba:	4656      	mov	r6, sl
 8006abc:	ea6f 0803 	mvn.w	r8, r3
 8006ac0:	2700      	movs	r7, #0
 8006ac2:	4621      	mov	r1, r4
 8006ac4:	4648      	mov	r0, r9
 8006ac6:	f000 fcbf 	bl	8007448 <_Bfree>
 8006aca:	2d00      	cmp	r5, #0
 8006acc:	f000 80bd 	beq.w	8006c4a <_dtoa_r+0x622>
 8006ad0:	b12f      	cbz	r7, 8006ade <_dtoa_r+0x4b6>
 8006ad2:	42af      	cmp	r7, r5
 8006ad4:	d003      	beq.n	8006ade <_dtoa_r+0x4b6>
 8006ad6:	4639      	mov	r1, r7
 8006ad8:	4648      	mov	r0, r9
 8006ada:	f000 fcb5 	bl	8007448 <_Bfree>
 8006ade:	4629      	mov	r1, r5
 8006ae0:	4648      	mov	r0, r9
 8006ae2:	f000 fcb1 	bl	8007448 <_Bfree>
 8006ae6:	e0b0      	b.n	8006c4a <_dtoa_r+0x622>
 8006ae8:	07e2      	lsls	r2, r4, #31
 8006aea:	d505      	bpl.n	8006af8 <_dtoa_r+0x4d0>
 8006aec:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006af0:	f7f9 fd82 	bl	80005f8 <__aeabi_dmul>
 8006af4:	3601      	adds	r6, #1
 8006af6:	2301      	movs	r3, #1
 8006af8:	1064      	asrs	r4, r4, #1
 8006afa:	3508      	adds	r5, #8
 8006afc:	e762      	b.n	80069c4 <_dtoa_r+0x39c>
 8006afe:	2602      	movs	r6, #2
 8006b00:	e765      	b.n	80069ce <_dtoa_r+0x3a6>
 8006b02:	9c03      	ldr	r4, [sp, #12]
 8006b04:	46b8      	mov	r8, r7
 8006b06:	e784      	b.n	8006a12 <_dtoa_r+0x3ea>
 8006b08:	4b27      	ldr	r3, [pc, #156]	@ (8006ba8 <_dtoa_r+0x580>)
 8006b0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006b0c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006b10:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b14:	4454      	add	r4, sl
 8006b16:	2900      	cmp	r1, #0
 8006b18:	d054      	beq.n	8006bc4 <_dtoa_r+0x59c>
 8006b1a:	4929      	ldr	r1, [pc, #164]	@ (8006bc0 <_dtoa_r+0x598>)
 8006b1c:	2000      	movs	r0, #0
 8006b1e:	f7f9 fe95 	bl	800084c <__aeabi_ddiv>
 8006b22:	4633      	mov	r3, r6
 8006b24:	462a      	mov	r2, r5
 8006b26:	f7f9 fbaf 	bl	8000288 <__aeabi_dsub>
 8006b2a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006b2e:	4656      	mov	r6, sl
 8006b30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b34:	f7fa f810 	bl	8000b58 <__aeabi_d2iz>
 8006b38:	4605      	mov	r5, r0
 8006b3a:	f7f9 fcf3 	bl	8000524 <__aeabi_i2d>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	460b      	mov	r3, r1
 8006b42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b46:	f7f9 fb9f 	bl	8000288 <__aeabi_dsub>
 8006b4a:	3530      	adds	r5, #48	@ 0x30
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	460b      	mov	r3, r1
 8006b50:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006b54:	f806 5b01 	strb.w	r5, [r6], #1
 8006b58:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006b5c:	f7f9 ffbe 	bl	8000adc <__aeabi_dcmplt>
 8006b60:	2800      	cmp	r0, #0
 8006b62:	d172      	bne.n	8006c4a <_dtoa_r+0x622>
 8006b64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b68:	4911      	ldr	r1, [pc, #68]	@ (8006bb0 <_dtoa_r+0x588>)
 8006b6a:	2000      	movs	r0, #0
 8006b6c:	f7f9 fb8c 	bl	8000288 <__aeabi_dsub>
 8006b70:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006b74:	f7f9 ffb2 	bl	8000adc <__aeabi_dcmplt>
 8006b78:	2800      	cmp	r0, #0
 8006b7a:	f040 80b4 	bne.w	8006ce6 <_dtoa_r+0x6be>
 8006b7e:	42a6      	cmp	r6, r4
 8006b80:	f43f af70 	beq.w	8006a64 <_dtoa_r+0x43c>
 8006b84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006b88:	4b0a      	ldr	r3, [pc, #40]	@ (8006bb4 <_dtoa_r+0x58c>)
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f7f9 fd34 	bl	80005f8 <__aeabi_dmul>
 8006b90:	4b08      	ldr	r3, [pc, #32]	@ (8006bb4 <_dtoa_r+0x58c>)
 8006b92:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006b96:	2200      	movs	r2, #0
 8006b98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b9c:	f7f9 fd2c 	bl	80005f8 <__aeabi_dmul>
 8006ba0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ba4:	e7c4      	b.n	8006b30 <_dtoa_r+0x508>
 8006ba6:	bf00      	nop
 8006ba8:	080087b0 	.word	0x080087b0
 8006bac:	08008788 	.word	0x08008788
 8006bb0:	3ff00000 	.word	0x3ff00000
 8006bb4:	40240000 	.word	0x40240000
 8006bb8:	401c0000 	.word	0x401c0000
 8006bbc:	40140000 	.word	0x40140000
 8006bc0:	3fe00000 	.word	0x3fe00000
 8006bc4:	4631      	mov	r1, r6
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	f7f9 fd16 	bl	80005f8 <__aeabi_dmul>
 8006bcc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006bd0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006bd2:	4656      	mov	r6, sl
 8006bd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bd8:	f7f9 ffbe 	bl	8000b58 <__aeabi_d2iz>
 8006bdc:	4605      	mov	r5, r0
 8006bde:	f7f9 fca1 	bl	8000524 <__aeabi_i2d>
 8006be2:	4602      	mov	r2, r0
 8006be4:	460b      	mov	r3, r1
 8006be6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bea:	f7f9 fb4d 	bl	8000288 <__aeabi_dsub>
 8006bee:	3530      	adds	r5, #48	@ 0x30
 8006bf0:	f806 5b01 	strb.w	r5, [r6], #1
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	42a6      	cmp	r6, r4
 8006bfa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006bfe:	f04f 0200 	mov.w	r2, #0
 8006c02:	d124      	bne.n	8006c4e <_dtoa_r+0x626>
 8006c04:	4baf      	ldr	r3, [pc, #700]	@ (8006ec4 <_dtoa_r+0x89c>)
 8006c06:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006c0a:	f7f9 fb3f 	bl	800028c <__adddf3>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	460b      	mov	r3, r1
 8006c12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c16:	f7f9 ff7f 	bl	8000b18 <__aeabi_dcmpgt>
 8006c1a:	2800      	cmp	r0, #0
 8006c1c:	d163      	bne.n	8006ce6 <_dtoa_r+0x6be>
 8006c1e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006c22:	49a8      	ldr	r1, [pc, #672]	@ (8006ec4 <_dtoa_r+0x89c>)
 8006c24:	2000      	movs	r0, #0
 8006c26:	f7f9 fb2f 	bl	8000288 <__aeabi_dsub>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c32:	f7f9 ff53 	bl	8000adc <__aeabi_dcmplt>
 8006c36:	2800      	cmp	r0, #0
 8006c38:	f43f af14 	beq.w	8006a64 <_dtoa_r+0x43c>
 8006c3c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006c3e:	1e73      	subs	r3, r6, #1
 8006c40:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006c42:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006c46:	2b30      	cmp	r3, #48	@ 0x30
 8006c48:	d0f8      	beq.n	8006c3c <_dtoa_r+0x614>
 8006c4a:	4647      	mov	r7, r8
 8006c4c:	e03b      	b.n	8006cc6 <_dtoa_r+0x69e>
 8006c4e:	4b9e      	ldr	r3, [pc, #632]	@ (8006ec8 <_dtoa_r+0x8a0>)
 8006c50:	f7f9 fcd2 	bl	80005f8 <__aeabi_dmul>
 8006c54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c58:	e7bc      	b.n	8006bd4 <_dtoa_r+0x5ac>
 8006c5a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006c5e:	4656      	mov	r6, sl
 8006c60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c64:	4620      	mov	r0, r4
 8006c66:	4629      	mov	r1, r5
 8006c68:	f7f9 fdf0 	bl	800084c <__aeabi_ddiv>
 8006c6c:	f7f9 ff74 	bl	8000b58 <__aeabi_d2iz>
 8006c70:	4680      	mov	r8, r0
 8006c72:	f7f9 fc57 	bl	8000524 <__aeabi_i2d>
 8006c76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c7a:	f7f9 fcbd 	bl	80005f8 <__aeabi_dmul>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	460b      	mov	r3, r1
 8006c82:	4620      	mov	r0, r4
 8006c84:	4629      	mov	r1, r5
 8006c86:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006c8a:	f7f9 fafd 	bl	8000288 <__aeabi_dsub>
 8006c8e:	f806 4b01 	strb.w	r4, [r6], #1
 8006c92:	9d03      	ldr	r5, [sp, #12]
 8006c94:	eba6 040a 	sub.w	r4, r6, sl
 8006c98:	42a5      	cmp	r5, r4
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	d133      	bne.n	8006d08 <_dtoa_r+0x6e0>
 8006ca0:	f7f9 faf4 	bl	800028c <__adddf3>
 8006ca4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ca8:	4604      	mov	r4, r0
 8006caa:	460d      	mov	r5, r1
 8006cac:	f7f9 ff34 	bl	8000b18 <__aeabi_dcmpgt>
 8006cb0:	b9c0      	cbnz	r0, 8006ce4 <_dtoa_r+0x6bc>
 8006cb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	4629      	mov	r1, r5
 8006cba:	f7f9 ff05 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cbe:	b110      	cbz	r0, 8006cc6 <_dtoa_r+0x69e>
 8006cc0:	f018 0f01 	tst.w	r8, #1
 8006cc4:	d10e      	bne.n	8006ce4 <_dtoa_r+0x6bc>
 8006cc6:	9902      	ldr	r1, [sp, #8]
 8006cc8:	4648      	mov	r0, r9
 8006cca:	f000 fbbd 	bl	8007448 <_Bfree>
 8006cce:	2300      	movs	r3, #0
 8006cd0:	7033      	strb	r3, [r6, #0]
 8006cd2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006cd4:	3701      	adds	r7, #1
 8006cd6:	601f      	str	r7, [r3, #0]
 8006cd8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	f000 824b 	beq.w	8007176 <_dtoa_r+0xb4e>
 8006ce0:	601e      	str	r6, [r3, #0]
 8006ce2:	e248      	b.n	8007176 <_dtoa_r+0xb4e>
 8006ce4:	46b8      	mov	r8, r7
 8006ce6:	4633      	mov	r3, r6
 8006ce8:	461e      	mov	r6, r3
 8006cea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cee:	2a39      	cmp	r2, #57	@ 0x39
 8006cf0:	d106      	bne.n	8006d00 <_dtoa_r+0x6d8>
 8006cf2:	459a      	cmp	sl, r3
 8006cf4:	d1f8      	bne.n	8006ce8 <_dtoa_r+0x6c0>
 8006cf6:	2230      	movs	r2, #48	@ 0x30
 8006cf8:	f108 0801 	add.w	r8, r8, #1
 8006cfc:	f88a 2000 	strb.w	r2, [sl]
 8006d00:	781a      	ldrb	r2, [r3, #0]
 8006d02:	3201      	adds	r2, #1
 8006d04:	701a      	strb	r2, [r3, #0]
 8006d06:	e7a0      	b.n	8006c4a <_dtoa_r+0x622>
 8006d08:	4b6f      	ldr	r3, [pc, #444]	@ (8006ec8 <_dtoa_r+0x8a0>)
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f7f9 fc74 	bl	80005f8 <__aeabi_dmul>
 8006d10:	2200      	movs	r2, #0
 8006d12:	2300      	movs	r3, #0
 8006d14:	4604      	mov	r4, r0
 8006d16:	460d      	mov	r5, r1
 8006d18:	f7f9 fed6 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d1c:	2800      	cmp	r0, #0
 8006d1e:	d09f      	beq.n	8006c60 <_dtoa_r+0x638>
 8006d20:	e7d1      	b.n	8006cc6 <_dtoa_r+0x69e>
 8006d22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d24:	2a00      	cmp	r2, #0
 8006d26:	f000 80ea 	beq.w	8006efe <_dtoa_r+0x8d6>
 8006d2a:	9a07      	ldr	r2, [sp, #28]
 8006d2c:	2a01      	cmp	r2, #1
 8006d2e:	f300 80cd 	bgt.w	8006ecc <_dtoa_r+0x8a4>
 8006d32:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006d34:	2a00      	cmp	r2, #0
 8006d36:	f000 80c1 	beq.w	8006ebc <_dtoa_r+0x894>
 8006d3a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006d3e:	9c08      	ldr	r4, [sp, #32]
 8006d40:	9e00      	ldr	r6, [sp, #0]
 8006d42:	9a00      	ldr	r2, [sp, #0]
 8006d44:	441a      	add	r2, r3
 8006d46:	9200      	str	r2, [sp, #0]
 8006d48:	9a06      	ldr	r2, [sp, #24]
 8006d4a:	2101      	movs	r1, #1
 8006d4c:	441a      	add	r2, r3
 8006d4e:	4648      	mov	r0, r9
 8006d50:	9206      	str	r2, [sp, #24]
 8006d52:	f000 fc2d 	bl	80075b0 <__i2b>
 8006d56:	4605      	mov	r5, r0
 8006d58:	b166      	cbz	r6, 8006d74 <_dtoa_r+0x74c>
 8006d5a:	9b06      	ldr	r3, [sp, #24]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	dd09      	ble.n	8006d74 <_dtoa_r+0x74c>
 8006d60:	42b3      	cmp	r3, r6
 8006d62:	9a00      	ldr	r2, [sp, #0]
 8006d64:	bfa8      	it	ge
 8006d66:	4633      	movge	r3, r6
 8006d68:	1ad2      	subs	r2, r2, r3
 8006d6a:	9200      	str	r2, [sp, #0]
 8006d6c:	9a06      	ldr	r2, [sp, #24]
 8006d6e:	1af6      	subs	r6, r6, r3
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	9306      	str	r3, [sp, #24]
 8006d74:	9b08      	ldr	r3, [sp, #32]
 8006d76:	b30b      	cbz	r3, 8006dbc <_dtoa_r+0x794>
 8006d78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	f000 80c6 	beq.w	8006f0c <_dtoa_r+0x8e4>
 8006d80:	2c00      	cmp	r4, #0
 8006d82:	f000 80c0 	beq.w	8006f06 <_dtoa_r+0x8de>
 8006d86:	4629      	mov	r1, r5
 8006d88:	4622      	mov	r2, r4
 8006d8a:	4648      	mov	r0, r9
 8006d8c:	f000 fcc8 	bl	8007720 <__pow5mult>
 8006d90:	9a02      	ldr	r2, [sp, #8]
 8006d92:	4601      	mov	r1, r0
 8006d94:	4605      	mov	r5, r0
 8006d96:	4648      	mov	r0, r9
 8006d98:	f000 fc20 	bl	80075dc <__multiply>
 8006d9c:	9902      	ldr	r1, [sp, #8]
 8006d9e:	4680      	mov	r8, r0
 8006da0:	4648      	mov	r0, r9
 8006da2:	f000 fb51 	bl	8007448 <_Bfree>
 8006da6:	9b08      	ldr	r3, [sp, #32]
 8006da8:	1b1b      	subs	r3, r3, r4
 8006daa:	9308      	str	r3, [sp, #32]
 8006dac:	f000 80b1 	beq.w	8006f12 <_dtoa_r+0x8ea>
 8006db0:	9a08      	ldr	r2, [sp, #32]
 8006db2:	4641      	mov	r1, r8
 8006db4:	4648      	mov	r0, r9
 8006db6:	f000 fcb3 	bl	8007720 <__pow5mult>
 8006dba:	9002      	str	r0, [sp, #8]
 8006dbc:	2101      	movs	r1, #1
 8006dbe:	4648      	mov	r0, r9
 8006dc0:	f000 fbf6 	bl	80075b0 <__i2b>
 8006dc4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006dc6:	4604      	mov	r4, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f000 81d8 	beq.w	800717e <_dtoa_r+0xb56>
 8006dce:	461a      	mov	r2, r3
 8006dd0:	4601      	mov	r1, r0
 8006dd2:	4648      	mov	r0, r9
 8006dd4:	f000 fca4 	bl	8007720 <__pow5mult>
 8006dd8:	9b07      	ldr	r3, [sp, #28]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	4604      	mov	r4, r0
 8006dde:	f300 809f 	bgt.w	8006f20 <_dtoa_r+0x8f8>
 8006de2:	9b04      	ldr	r3, [sp, #16]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f040 8097 	bne.w	8006f18 <_dtoa_r+0x8f0>
 8006dea:	9b05      	ldr	r3, [sp, #20]
 8006dec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f040 8093 	bne.w	8006f1c <_dtoa_r+0x8f4>
 8006df6:	9b05      	ldr	r3, [sp, #20]
 8006df8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006dfc:	0d1b      	lsrs	r3, r3, #20
 8006dfe:	051b      	lsls	r3, r3, #20
 8006e00:	b133      	cbz	r3, 8006e10 <_dtoa_r+0x7e8>
 8006e02:	9b00      	ldr	r3, [sp, #0]
 8006e04:	3301      	adds	r3, #1
 8006e06:	9300      	str	r3, [sp, #0]
 8006e08:	9b06      	ldr	r3, [sp, #24]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	9306      	str	r3, [sp, #24]
 8006e0e:	2301      	movs	r3, #1
 8006e10:	9308      	str	r3, [sp, #32]
 8006e12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f000 81b8 	beq.w	800718a <_dtoa_r+0xb62>
 8006e1a:	6923      	ldr	r3, [r4, #16]
 8006e1c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006e20:	6918      	ldr	r0, [r3, #16]
 8006e22:	f000 fb79 	bl	8007518 <__hi0bits>
 8006e26:	f1c0 0020 	rsb	r0, r0, #32
 8006e2a:	9b06      	ldr	r3, [sp, #24]
 8006e2c:	4418      	add	r0, r3
 8006e2e:	f010 001f 	ands.w	r0, r0, #31
 8006e32:	f000 8082 	beq.w	8006f3a <_dtoa_r+0x912>
 8006e36:	f1c0 0320 	rsb	r3, r0, #32
 8006e3a:	2b04      	cmp	r3, #4
 8006e3c:	dd73      	ble.n	8006f26 <_dtoa_r+0x8fe>
 8006e3e:	9b00      	ldr	r3, [sp, #0]
 8006e40:	f1c0 001c 	rsb	r0, r0, #28
 8006e44:	4403      	add	r3, r0
 8006e46:	9300      	str	r3, [sp, #0]
 8006e48:	9b06      	ldr	r3, [sp, #24]
 8006e4a:	4403      	add	r3, r0
 8006e4c:	4406      	add	r6, r0
 8006e4e:	9306      	str	r3, [sp, #24]
 8006e50:	9b00      	ldr	r3, [sp, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	dd05      	ble.n	8006e62 <_dtoa_r+0x83a>
 8006e56:	9902      	ldr	r1, [sp, #8]
 8006e58:	461a      	mov	r2, r3
 8006e5a:	4648      	mov	r0, r9
 8006e5c:	f000 fcba 	bl	80077d4 <__lshift>
 8006e60:	9002      	str	r0, [sp, #8]
 8006e62:	9b06      	ldr	r3, [sp, #24]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	dd05      	ble.n	8006e74 <_dtoa_r+0x84c>
 8006e68:	4621      	mov	r1, r4
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	4648      	mov	r0, r9
 8006e6e:	f000 fcb1 	bl	80077d4 <__lshift>
 8006e72:	4604      	mov	r4, r0
 8006e74:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d061      	beq.n	8006f3e <_dtoa_r+0x916>
 8006e7a:	9802      	ldr	r0, [sp, #8]
 8006e7c:	4621      	mov	r1, r4
 8006e7e:	f000 fd15 	bl	80078ac <__mcmp>
 8006e82:	2800      	cmp	r0, #0
 8006e84:	da5b      	bge.n	8006f3e <_dtoa_r+0x916>
 8006e86:	2300      	movs	r3, #0
 8006e88:	9902      	ldr	r1, [sp, #8]
 8006e8a:	220a      	movs	r2, #10
 8006e8c:	4648      	mov	r0, r9
 8006e8e:	f000 fafd 	bl	800748c <__multadd>
 8006e92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e94:	9002      	str	r0, [sp, #8]
 8006e96:	f107 38ff 	add.w	r8, r7, #4294967295
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	f000 8177 	beq.w	800718e <_dtoa_r+0xb66>
 8006ea0:	4629      	mov	r1, r5
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	220a      	movs	r2, #10
 8006ea6:	4648      	mov	r0, r9
 8006ea8:	f000 faf0 	bl	800748c <__multadd>
 8006eac:	f1bb 0f00 	cmp.w	fp, #0
 8006eb0:	4605      	mov	r5, r0
 8006eb2:	dc6f      	bgt.n	8006f94 <_dtoa_r+0x96c>
 8006eb4:	9b07      	ldr	r3, [sp, #28]
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	dc49      	bgt.n	8006f4e <_dtoa_r+0x926>
 8006eba:	e06b      	b.n	8006f94 <_dtoa_r+0x96c>
 8006ebc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006ebe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006ec2:	e73c      	b.n	8006d3e <_dtoa_r+0x716>
 8006ec4:	3fe00000 	.word	0x3fe00000
 8006ec8:	40240000 	.word	0x40240000
 8006ecc:	9b03      	ldr	r3, [sp, #12]
 8006ece:	1e5c      	subs	r4, r3, #1
 8006ed0:	9b08      	ldr	r3, [sp, #32]
 8006ed2:	42a3      	cmp	r3, r4
 8006ed4:	db09      	blt.n	8006eea <_dtoa_r+0x8c2>
 8006ed6:	1b1c      	subs	r4, r3, r4
 8006ed8:	9b03      	ldr	r3, [sp, #12]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f6bf af30 	bge.w	8006d40 <_dtoa_r+0x718>
 8006ee0:	9b00      	ldr	r3, [sp, #0]
 8006ee2:	9a03      	ldr	r2, [sp, #12]
 8006ee4:	1a9e      	subs	r6, r3, r2
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	e72b      	b.n	8006d42 <_dtoa_r+0x71a>
 8006eea:	9b08      	ldr	r3, [sp, #32]
 8006eec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006eee:	9408      	str	r4, [sp, #32]
 8006ef0:	1ae3      	subs	r3, r4, r3
 8006ef2:	441a      	add	r2, r3
 8006ef4:	9e00      	ldr	r6, [sp, #0]
 8006ef6:	9b03      	ldr	r3, [sp, #12]
 8006ef8:	920d      	str	r2, [sp, #52]	@ 0x34
 8006efa:	2400      	movs	r4, #0
 8006efc:	e721      	b.n	8006d42 <_dtoa_r+0x71a>
 8006efe:	9c08      	ldr	r4, [sp, #32]
 8006f00:	9e00      	ldr	r6, [sp, #0]
 8006f02:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006f04:	e728      	b.n	8006d58 <_dtoa_r+0x730>
 8006f06:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006f0a:	e751      	b.n	8006db0 <_dtoa_r+0x788>
 8006f0c:	9a08      	ldr	r2, [sp, #32]
 8006f0e:	9902      	ldr	r1, [sp, #8]
 8006f10:	e750      	b.n	8006db4 <_dtoa_r+0x78c>
 8006f12:	f8cd 8008 	str.w	r8, [sp, #8]
 8006f16:	e751      	b.n	8006dbc <_dtoa_r+0x794>
 8006f18:	2300      	movs	r3, #0
 8006f1a:	e779      	b.n	8006e10 <_dtoa_r+0x7e8>
 8006f1c:	9b04      	ldr	r3, [sp, #16]
 8006f1e:	e777      	b.n	8006e10 <_dtoa_r+0x7e8>
 8006f20:	2300      	movs	r3, #0
 8006f22:	9308      	str	r3, [sp, #32]
 8006f24:	e779      	b.n	8006e1a <_dtoa_r+0x7f2>
 8006f26:	d093      	beq.n	8006e50 <_dtoa_r+0x828>
 8006f28:	9a00      	ldr	r2, [sp, #0]
 8006f2a:	331c      	adds	r3, #28
 8006f2c:	441a      	add	r2, r3
 8006f2e:	9200      	str	r2, [sp, #0]
 8006f30:	9a06      	ldr	r2, [sp, #24]
 8006f32:	441a      	add	r2, r3
 8006f34:	441e      	add	r6, r3
 8006f36:	9206      	str	r2, [sp, #24]
 8006f38:	e78a      	b.n	8006e50 <_dtoa_r+0x828>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	e7f4      	b.n	8006f28 <_dtoa_r+0x900>
 8006f3e:	9b03      	ldr	r3, [sp, #12]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	46b8      	mov	r8, r7
 8006f44:	dc20      	bgt.n	8006f88 <_dtoa_r+0x960>
 8006f46:	469b      	mov	fp, r3
 8006f48:	9b07      	ldr	r3, [sp, #28]
 8006f4a:	2b02      	cmp	r3, #2
 8006f4c:	dd1e      	ble.n	8006f8c <_dtoa_r+0x964>
 8006f4e:	f1bb 0f00 	cmp.w	fp, #0
 8006f52:	f47f adb1 	bne.w	8006ab8 <_dtoa_r+0x490>
 8006f56:	4621      	mov	r1, r4
 8006f58:	465b      	mov	r3, fp
 8006f5a:	2205      	movs	r2, #5
 8006f5c:	4648      	mov	r0, r9
 8006f5e:	f000 fa95 	bl	800748c <__multadd>
 8006f62:	4601      	mov	r1, r0
 8006f64:	4604      	mov	r4, r0
 8006f66:	9802      	ldr	r0, [sp, #8]
 8006f68:	f000 fca0 	bl	80078ac <__mcmp>
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	f77f ada3 	ble.w	8006ab8 <_dtoa_r+0x490>
 8006f72:	4656      	mov	r6, sl
 8006f74:	2331      	movs	r3, #49	@ 0x31
 8006f76:	f806 3b01 	strb.w	r3, [r6], #1
 8006f7a:	f108 0801 	add.w	r8, r8, #1
 8006f7e:	e59f      	b.n	8006ac0 <_dtoa_r+0x498>
 8006f80:	9c03      	ldr	r4, [sp, #12]
 8006f82:	46b8      	mov	r8, r7
 8006f84:	4625      	mov	r5, r4
 8006f86:	e7f4      	b.n	8006f72 <_dtoa_r+0x94a>
 8006f88:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006f8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	f000 8101 	beq.w	8007196 <_dtoa_r+0xb6e>
 8006f94:	2e00      	cmp	r6, #0
 8006f96:	dd05      	ble.n	8006fa4 <_dtoa_r+0x97c>
 8006f98:	4629      	mov	r1, r5
 8006f9a:	4632      	mov	r2, r6
 8006f9c:	4648      	mov	r0, r9
 8006f9e:	f000 fc19 	bl	80077d4 <__lshift>
 8006fa2:	4605      	mov	r5, r0
 8006fa4:	9b08      	ldr	r3, [sp, #32]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d05c      	beq.n	8007064 <_dtoa_r+0xa3c>
 8006faa:	6869      	ldr	r1, [r5, #4]
 8006fac:	4648      	mov	r0, r9
 8006fae:	f000 fa0b 	bl	80073c8 <_Balloc>
 8006fb2:	4606      	mov	r6, r0
 8006fb4:	b928      	cbnz	r0, 8006fc2 <_dtoa_r+0x99a>
 8006fb6:	4b82      	ldr	r3, [pc, #520]	@ (80071c0 <_dtoa_r+0xb98>)
 8006fb8:	4602      	mov	r2, r0
 8006fba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006fbe:	f7ff bb4a 	b.w	8006656 <_dtoa_r+0x2e>
 8006fc2:	692a      	ldr	r2, [r5, #16]
 8006fc4:	3202      	adds	r2, #2
 8006fc6:	0092      	lsls	r2, r2, #2
 8006fc8:	f105 010c 	add.w	r1, r5, #12
 8006fcc:	300c      	adds	r0, #12
 8006fce:	f7ff fa94 	bl	80064fa <memcpy>
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	4631      	mov	r1, r6
 8006fd6:	4648      	mov	r0, r9
 8006fd8:	f000 fbfc 	bl	80077d4 <__lshift>
 8006fdc:	f10a 0301 	add.w	r3, sl, #1
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	eb0a 030b 	add.w	r3, sl, fp
 8006fe6:	9308      	str	r3, [sp, #32]
 8006fe8:	9b04      	ldr	r3, [sp, #16]
 8006fea:	f003 0301 	and.w	r3, r3, #1
 8006fee:	462f      	mov	r7, r5
 8006ff0:	9306      	str	r3, [sp, #24]
 8006ff2:	4605      	mov	r5, r0
 8006ff4:	9b00      	ldr	r3, [sp, #0]
 8006ff6:	9802      	ldr	r0, [sp, #8]
 8006ff8:	4621      	mov	r1, r4
 8006ffa:	f103 3bff 	add.w	fp, r3, #4294967295
 8006ffe:	f7ff fa8a 	bl	8006516 <quorem>
 8007002:	4603      	mov	r3, r0
 8007004:	3330      	adds	r3, #48	@ 0x30
 8007006:	9003      	str	r0, [sp, #12]
 8007008:	4639      	mov	r1, r7
 800700a:	9802      	ldr	r0, [sp, #8]
 800700c:	9309      	str	r3, [sp, #36]	@ 0x24
 800700e:	f000 fc4d 	bl	80078ac <__mcmp>
 8007012:	462a      	mov	r2, r5
 8007014:	9004      	str	r0, [sp, #16]
 8007016:	4621      	mov	r1, r4
 8007018:	4648      	mov	r0, r9
 800701a:	f000 fc63 	bl	80078e4 <__mdiff>
 800701e:	68c2      	ldr	r2, [r0, #12]
 8007020:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007022:	4606      	mov	r6, r0
 8007024:	bb02      	cbnz	r2, 8007068 <_dtoa_r+0xa40>
 8007026:	4601      	mov	r1, r0
 8007028:	9802      	ldr	r0, [sp, #8]
 800702a:	f000 fc3f 	bl	80078ac <__mcmp>
 800702e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007030:	4602      	mov	r2, r0
 8007032:	4631      	mov	r1, r6
 8007034:	4648      	mov	r0, r9
 8007036:	920c      	str	r2, [sp, #48]	@ 0x30
 8007038:	9309      	str	r3, [sp, #36]	@ 0x24
 800703a:	f000 fa05 	bl	8007448 <_Bfree>
 800703e:	9b07      	ldr	r3, [sp, #28]
 8007040:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007042:	9e00      	ldr	r6, [sp, #0]
 8007044:	ea42 0103 	orr.w	r1, r2, r3
 8007048:	9b06      	ldr	r3, [sp, #24]
 800704a:	4319      	orrs	r1, r3
 800704c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800704e:	d10d      	bne.n	800706c <_dtoa_r+0xa44>
 8007050:	2b39      	cmp	r3, #57	@ 0x39
 8007052:	d027      	beq.n	80070a4 <_dtoa_r+0xa7c>
 8007054:	9a04      	ldr	r2, [sp, #16]
 8007056:	2a00      	cmp	r2, #0
 8007058:	dd01      	ble.n	800705e <_dtoa_r+0xa36>
 800705a:	9b03      	ldr	r3, [sp, #12]
 800705c:	3331      	adds	r3, #49	@ 0x31
 800705e:	f88b 3000 	strb.w	r3, [fp]
 8007062:	e52e      	b.n	8006ac2 <_dtoa_r+0x49a>
 8007064:	4628      	mov	r0, r5
 8007066:	e7b9      	b.n	8006fdc <_dtoa_r+0x9b4>
 8007068:	2201      	movs	r2, #1
 800706a:	e7e2      	b.n	8007032 <_dtoa_r+0xa0a>
 800706c:	9904      	ldr	r1, [sp, #16]
 800706e:	2900      	cmp	r1, #0
 8007070:	db04      	blt.n	800707c <_dtoa_r+0xa54>
 8007072:	9807      	ldr	r0, [sp, #28]
 8007074:	4301      	orrs	r1, r0
 8007076:	9806      	ldr	r0, [sp, #24]
 8007078:	4301      	orrs	r1, r0
 800707a:	d120      	bne.n	80070be <_dtoa_r+0xa96>
 800707c:	2a00      	cmp	r2, #0
 800707e:	ddee      	ble.n	800705e <_dtoa_r+0xa36>
 8007080:	9902      	ldr	r1, [sp, #8]
 8007082:	9300      	str	r3, [sp, #0]
 8007084:	2201      	movs	r2, #1
 8007086:	4648      	mov	r0, r9
 8007088:	f000 fba4 	bl	80077d4 <__lshift>
 800708c:	4621      	mov	r1, r4
 800708e:	9002      	str	r0, [sp, #8]
 8007090:	f000 fc0c 	bl	80078ac <__mcmp>
 8007094:	2800      	cmp	r0, #0
 8007096:	9b00      	ldr	r3, [sp, #0]
 8007098:	dc02      	bgt.n	80070a0 <_dtoa_r+0xa78>
 800709a:	d1e0      	bne.n	800705e <_dtoa_r+0xa36>
 800709c:	07da      	lsls	r2, r3, #31
 800709e:	d5de      	bpl.n	800705e <_dtoa_r+0xa36>
 80070a0:	2b39      	cmp	r3, #57	@ 0x39
 80070a2:	d1da      	bne.n	800705a <_dtoa_r+0xa32>
 80070a4:	2339      	movs	r3, #57	@ 0x39
 80070a6:	f88b 3000 	strb.w	r3, [fp]
 80070aa:	4633      	mov	r3, r6
 80070ac:	461e      	mov	r6, r3
 80070ae:	3b01      	subs	r3, #1
 80070b0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80070b4:	2a39      	cmp	r2, #57	@ 0x39
 80070b6:	d04e      	beq.n	8007156 <_dtoa_r+0xb2e>
 80070b8:	3201      	adds	r2, #1
 80070ba:	701a      	strb	r2, [r3, #0]
 80070bc:	e501      	b.n	8006ac2 <_dtoa_r+0x49a>
 80070be:	2a00      	cmp	r2, #0
 80070c0:	dd03      	ble.n	80070ca <_dtoa_r+0xaa2>
 80070c2:	2b39      	cmp	r3, #57	@ 0x39
 80070c4:	d0ee      	beq.n	80070a4 <_dtoa_r+0xa7c>
 80070c6:	3301      	adds	r3, #1
 80070c8:	e7c9      	b.n	800705e <_dtoa_r+0xa36>
 80070ca:	9a00      	ldr	r2, [sp, #0]
 80070cc:	9908      	ldr	r1, [sp, #32]
 80070ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 80070d2:	428a      	cmp	r2, r1
 80070d4:	d028      	beq.n	8007128 <_dtoa_r+0xb00>
 80070d6:	9902      	ldr	r1, [sp, #8]
 80070d8:	2300      	movs	r3, #0
 80070da:	220a      	movs	r2, #10
 80070dc:	4648      	mov	r0, r9
 80070de:	f000 f9d5 	bl	800748c <__multadd>
 80070e2:	42af      	cmp	r7, r5
 80070e4:	9002      	str	r0, [sp, #8]
 80070e6:	f04f 0300 	mov.w	r3, #0
 80070ea:	f04f 020a 	mov.w	r2, #10
 80070ee:	4639      	mov	r1, r7
 80070f0:	4648      	mov	r0, r9
 80070f2:	d107      	bne.n	8007104 <_dtoa_r+0xadc>
 80070f4:	f000 f9ca 	bl	800748c <__multadd>
 80070f8:	4607      	mov	r7, r0
 80070fa:	4605      	mov	r5, r0
 80070fc:	9b00      	ldr	r3, [sp, #0]
 80070fe:	3301      	adds	r3, #1
 8007100:	9300      	str	r3, [sp, #0]
 8007102:	e777      	b.n	8006ff4 <_dtoa_r+0x9cc>
 8007104:	f000 f9c2 	bl	800748c <__multadd>
 8007108:	4629      	mov	r1, r5
 800710a:	4607      	mov	r7, r0
 800710c:	2300      	movs	r3, #0
 800710e:	220a      	movs	r2, #10
 8007110:	4648      	mov	r0, r9
 8007112:	f000 f9bb 	bl	800748c <__multadd>
 8007116:	4605      	mov	r5, r0
 8007118:	e7f0      	b.n	80070fc <_dtoa_r+0xad4>
 800711a:	f1bb 0f00 	cmp.w	fp, #0
 800711e:	bfcc      	ite	gt
 8007120:	465e      	movgt	r6, fp
 8007122:	2601      	movle	r6, #1
 8007124:	4456      	add	r6, sl
 8007126:	2700      	movs	r7, #0
 8007128:	9902      	ldr	r1, [sp, #8]
 800712a:	9300      	str	r3, [sp, #0]
 800712c:	2201      	movs	r2, #1
 800712e:	4648      	mov	r0, r9
 8007130:	f000 fb50 	bl	80077d4 <__lshift>
 8007134:	4621      	mov	r1, r4
 8007136:	9002      	str	r0, [sp, #8]
 8007138:	f000 fbb8 	bl	80078ac <__mcmp>
 800713c:	2800      	cmp	r0, #0
 800713e:	dcb4      	bgt.n	80070aa <_dtoa_r+0xa82>
 8007140:	d102      	bne.n	8007148 <_dtoa_r+0xb20>
 8007142:	9b00      	ldr	r3, [sp, #0]
 8007144:	07db      	lsls	r3, r3, #31
 8007146:	d4b0      	bmi.n	80070aa <_dtoa_r+0xa82>
 8007148:	4633      	mov	r3, r6
 800714a:	461e      	mov	r6, r3
 800714c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007150:	2a30      	cmp	r2, #48	@ 0x30
 8007152:	d0fa      	beq.n	800714a <_dtoa_r+0xb22>
 8007154:	e4b5      	b.n	8006ac2 <_dtoa_r+0x49a>
 8007156:	459a      	cmp	sl, r3
 8007158:	d1a8      	bne.n	80070ac <_dtoa_r+0xa84>
 800715a:	2331      	movs	r3, #49	@ 0x31
 800715c:	f108 0801 	add.w	r8, r8, #1
 8007160:	f88a 3000 	strb.w	r3, [sl]
 8007164:	e4ad      	b.n	8006ac2 <_dtoa_r+0x49a>
 8007166:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007168:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80071c4 <_dtoa_r+0xb9c>
 800716c:	b11b      	cbz	r3, 8007176 <_dtoa_r+0xb4e>
 800716e:	f10a 0308 	add.w	r3, sl, #8
 8007172:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007174:	6013      	str	r3, [r2, #0]
 8007176:	4650      	mov	r0, sl
 8007178:	b017      	add	sp, #92	@ 0x5c
 800717a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800717e:	9b07      	ldr	r3, [sp, #28]
 8007180:	2b01      	cmp	r3, #1
 8007182:	f77f ae2e 	ble.w	8006de2 <_dtoa_r+0x7ba>
 8007186:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007188:	9308      	str	r3, [sp, #32]
 800718a:	2001      	movs	r0, #1
 800718c:	e64d      	b.n	8006e2a <_dtoa_r+0x802>
 800718e:	f1bb 0f00 	cmp.w	fp, #0
 8007192:	f77f aed9 	ble.w	8006f48 <_dtoa_r+0x920>
 8007196:	4656      	mov	r6, sl
 8007198:	9802      	ldr	r0, [sp, #8]
 800719a:	4621      	mov	r1, r4
 800719c:	f7ff f9bb 	bl	8006516 <quorem>
 80071a0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80071a4:	f806 3b01 	strb.w	r3, [r6], #1
 80071a8:	eba6 020a 	sub.w	r2, r6, sl
 80071ac:	4593      	cmp	fp, r2
 80071ae:	ddb4      	ble.n	800711a <_dtoa_r+0xaf2>
 80071b0:	9902      	ldr	r1, [sp, #8]
 80071b2:	2300      	movs	r3, #0
 80071b4:	220a      	movs	r2, #10
 80071b6:	4648      	mov	r0, r9
 80071b8:	f000 f968 	bl	800748c <__multadd>
 80071bc:	9002      	str	r0, [sp, #8]
 80071be:	e7eb      	b.n	8007198 <_dtoa_r+0xb70>
 80071c0:	080086b4 	.word	0x080086b4
 80071c4:	08008638 	.word	0x08008638

080071c8 <_free_r>:
 80071c8:	b538      	push	{r3, r4, r5, lr}
 80071ca:	4605      	mov	r5, r0
 80071cc:	2900      	cmp	r1, #0
 80071ce:	d041      	beq.n	8007254 <_free_r+0x8c>
 80071d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071d4:	1f0c      	subs	r4, r1, #4
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	bfb8      	it	lt
 80071da:	18e4      	addlt	r4, r4, r3
 80071dc:	f000 f8e8 	bl	80073b0 <__malloc_lock>
 80071e0:	4a1d      	ldr	r2, [pc, #116]	@ (8007258 <_free_r+0x90>)
 80071e2:	6813      	ldr	r3, [r2, #0]
 80071e4:	b933      	cbnz	r3, 80071f4 <_free_r+0x2c>
 80071e6:	6063      	str	r3, [r4, #4]
 80071e8:	6014      	str	r4, [r2, #0]
 80071ea:	4628      	mov	r0, r5
 80071ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071f0:	f000 b8e4 	b.w	80073bc <__malloc_unlock>
 80071f4:	42a3      	cmp	r3, r4
 80071f6:	d908      	bls.n	800720a <_free_r+0x42>
 80071f8:	6820      	ldr	r0, [r4, #0]
 80071fa:	1821      	adds	r1, r4, r0
 80071fc:	428b      	cmp	r3, r1
 80071fe:	bf01      	itttt	eq
 8007200:	6819      	ldreq	r1, [r3, #0]
 8007202:	685b      	ldreq	r3, [r3, #4]
 8007204:	1809      	addeq	r1, r1, r0
 8007206:	6021      	streq	r1, [r4, #0]
 8007208:	e7ed      	b.n	80071e6 <_free_r+0x1e>
 800720a:	461a      	mov	r2, r3
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	b10b      	cbz	r3, 8007214 <_free_r+0x4c>
 8007210:	42a3      	cmp	r3, r4
 8007212:	d9fa      	bls.n	800720a <_free_r+0x42>
 8007214:	6811      	ldr	r1, [r2, #0]
 8007216:	1850      	adds	r0, r2, r1
 8007218:	42a0      	cmp	r0, r4
 800721a:	d10b      	bne.n	8007234 <_free_r+0x6c>
 800721c:	6820      	ldr	r0, [r4, #0]
 800721e:	4401      	add	r1, r0
 8007220:	1850      	adds	r0, r2, r1
 8007222:	4283      	cmp	r3, r0
 8007224:	6011      	str	r1, [r2, #0]
 8007226:	d1e0      	bne.n	80071ea <_free_r+0x22>
 8007228:	6818      	ldr	r0, [r3, #0]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	6053      	str	r3, [r2, #4]
 800722e:	4408      	add	r0, r1
 8007230:	6010      	str	r0, [r2, #0]
 8007232:	e7da      	b.n	80071ea <_free_r+0x22>
 8007234:	d902      	bls.n	800723c <_free_r+0x74>
 8007236:	230c      	movs	r3, #12
 8007238:	602b      	str	r3, [r5, #0]
 800723a:	e7d6      	b.n	80071ea <_free_r+0x22>
 800723c:	6820      	ldr	r0, [r4, #0]
 800723e:	1821      	adds	r1, r4, r0
 8007240:	428b      	cmp	r3, r1
 8007242:	bf04      	itt	eq
 8007244:	6819      	ldreq	r1, [r3, #0]
 8007246:	685b      	ldreq	r3, [r3, #4]
 8007248:	6063      	str	r3, [r4, #4]
 800724a:	bf04      	itt	eq
 800724c:	1809      	addeq	r1, r1, r0
 800724e:	6021      	streq	r1, [r4, #0]
 8007250:	6054      	str	r4, [r2, #4]
 8007252:	e7ca      	b.n	80071ea <_free_r+0x22>
 8007254:	bd38      	pop	{r3, r4, r5, pc}
 8007256:	bf00      	nop
 8007258:	200043e0 	.word	0x200043e0

0800725c <malloc>:
 800725c:	4b02      	ldr	r3, [pc, #8]	@ (8007268 <malloc+0xc>)
 800725e:	4601      	mov	r1, r0
 8007260:	6818      	ldr	r0, [r3, #0]
 8007262:	f000 b825 	b.w	80072b0 <_malloc_r>
 8007266:	bf00      	nop
 8007268:	2000001c 	.word	0x2000001c

0800726c <sbrk_aligned>:
 800726c:	b570      	push	{r4, r5, r6, lr}
 800726e:	4e0f      	ldr	r6, [pc, #60]	@ (80072ac <sbrk_aligned+0x40>)
 8007270:	460c      	mov	r4, r1
 8007272:	6831      	ldr	r1, [r6, #0]
 8007274:	4605      	mov	r5, r0
 8007276:	b911      	cbnz	r1, 800727e <sbrk_aligned+0x12>
 8007278:	f000 fe3e 	bl	8007ef8 <_sbrk_r>
 800727c:	6030      	str	r0, [r6, #0]
 800727e:	4621      	mov	r1, r4
 8007280:	4628      	mov	r0, r5
 8007282:	f000 fe39 	bl	8007ef8 <_sbrk_r>
 8007286:	1c43      	adds	r3, r0, #1
 8007288:	d103      	bne.n	8007292 <sbrk_aligned+0x26>
 800728a:	f04f 34ff 	mov.w	r4, #4294967295
 800728e:	4620      	mov	r0, r4
 8007290:	bd70      	pop	{r4, r5, r6, pc}
 8007292:	1cc4      	adds	r4, r0, #3
 8007294:	f024 0403 	bic.w	r4, r4, #3
 8007298:	42a0      	cmp	r0, r4
 800729a:	d0f8      	beq.n	800728e <sbrk_aligned+0x22>
 800729c:	1a21      	subs	r1, r4, r0
 800729e:	4628      	mov	r0, r5
 80072a0:	f000 fe2a 	bl	8007ef8 <_sbrk_r>
 80072a4:	3001      	adds	r0, #1
 80072a6:	d1f2      	bne.n	800728e <sbrk_aligned+0x22>
 80072a8:	e7ef      	b.n	800728a <sbrk_aligned+0x1e>
 80072aa:	bf00      	nop
 80072ac:	200043dc 	.word	0x200043dc

080072b0 <_malloc_r>:
 80072b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072b4:	1ccd      	adds	r5, r1, #3
 80072b6:	f025 0503 	bic.w	r5, r5, #3
 80072ba:	3508      	adds	r5, #8
 80072bc:	2d0c      	cmp	r5, #12
 80072be:	bf38      	it	cc
 80072c0:	250c      	movcc	r5, #12
 80072c2:	2d00      	cmp	r5, #0
 80072c4:	4606      	mov	r6, r0
 80072c6:	db01      	blt.n	80072cc <_malloc_r+0x1c>
 80072c8:	42a9      	cmp	r1, r5
 80072ca:	d904      	bls.n	80072d6 <_malloc_r+0x26>
 80072cc:	230c      	movs	r3, #12
 80072ce:	6033      	str	r3, [r6, #0]
 80072d0:	2000      	movs	r0, #0
 80072d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80073ac <_malloc_r+0xfc>
 80072da:	f000 f869 	bl	80073b0 <__malloc_lock>
 80072de:	f8d8 3000 	ldr.w	r3, [r8]
 80072e2:	461c      	mov	r4, r3
 80072e4:	bb44      	cbnz	r4, 8007338 <_malloc_r+0x88>
 80072e6:	4629      	mov	r1, r5
 80072e8:	4630      	mov	r0, r6
 80072ea:	f7ff ffbf 	bl	800726c <sbrk_aligned>
 80072ee:	1c43      	adds	r3, r0, #1
 80072f0:	4604      	mov	r4, r0
 80072f2:	d158      	bne.n	80073a6 <_malloc_r+0xf6>
 80072f4:	f8d8 4000 	ldr.w	r4, [r8]
 80072f8:	4627      	mov	r7, r4
 80072fa:	2f00      	cmp	r7, #0
 80072fc:	d143      	bne.n	8007386 <_malloc_r+0xd6>
 80072fe:	2c00      	cmp	r4, #0
 8007300:	d04b      	beq.n	800739a <_malloc_r+0xea>
 8007302:	6823      	ldr	r3, [r4, #0]
 8007304:	4639      	mov	r1, r7
 8007306:	4630      	mov	r0, r6
 8007308:	eb04 0903 	add.w	r9, r4, r3
 800730c:	f000 fdf4 	bl	8007ef8 <_sbrk_r>
 8007310:	4581      	cmp	r9, r0
 8007312:	d142      	bne.n	800739a <_malloc_r+0xea>
 8007314:	6821      	ldr	r1, [r4, #0]
 8007316:	1a6d      	subs	r5, r5, r1
 8007318:	4629      	mov	r1, r5
 800731a:	4630      	mov	r0, r6
 800731c:	f7ff ffa6 	bl	800726c <sbrk_aligned>
 8007320:	3001      	adds	r0, #1
 8007322:	d03a      	beq.n	800739a <_malloc_r+0xea>
 8007324:	6823      	ldr	r3, [r4, #0]
 8007326:	442b      	add	r3, r5
 8007328:	6023      	str	r3, [r4, #0]
 800732a:	f8d8 3000 	ldr.w	r3, [r8]
 800732e:	685a      	ldr	r2, [r3, #4]
 8007330:	bb62      	cbnz	r2, 800738c <_malloc_r+0xdc>
 8007332:	f8c8 7000 	str.w	r7, [r8]
 8007336:	e00f      	b.n	8007358 <_malloc_r+0xa8>
 8007338:	6822      	ldr	r2, [r4, #0]
 800733a:	1b52      	subs	r2, r2, r5
 800733c:	d420      	bmi.n	8007380 <_malloc_r+0xd0>
 800733e:	2a0b      	cmp	r2, #11
 8007340:	d917      	bls.n	8007372 <_malloc_r+0xc2>
 8007342:	1961      	adds	r1, r4, r5
 8007344:	42a3      	cmp	r3, r4
 8007346:	6025      	str	r5, [r4, #0]
 8007348:	bf18      	it	ne
 800734a:	6059      	strne	r1, [r3, #4]
 800734c:	6863      	ldr	r3, [r4, #4]
 800734e:	bf08      	it	eq
 8007350:	f8c8 1000 	streq.w	r1, [r8]
 8007354:	5162      	str	r2, [r4, r5]
 8007356:	604b      	str	r3, [r1, #4]
 8007358:	4630      	mov	r0, r6
 800735a:	f000 f82f 	bl	80073bc <__malloc_unlock>
 800735e:	f104 000b 	add.w	r0, r4, #11
 8007362:	1d23      	adds	r3, r4, #4
 8007364:	f020 0007 	bic.w	r0, r0, #7
 8007368:	1ac2      	subs	r2, r0, r3
 800736a:	bf1c      	itt	ne
 800736c:	1a1b      	subne	r3, r3, r0
 800736e:	50a3      	strne	r3, [r4, r2]
 8007370:	e7af      	b.n	80072d2 <_malloc_r+0x22>
 8007372:	6862      	ldr	r2, [r4, #4]
 8007374:	42a3      	cmp	r3, r4
 8007376:	bf0c      	ite	eq
 8007378:	f8c8 2000 	streq.w	r2, [r8]
 800737c:	605a      	strne	r2, [r3, #4]
 800737e:	e7eb      	b.n	8007358 <_malloc_r+0xa8>
 8007380:	4623      	mov	r3, r4
 8007382:	6864      	ldr	r4, [r4, #4]
 8007384:	e7ae      	b.n	80072e4 <_malloc_r+0x34>
 8007386:	463c      	mov	r4, r7
 8007388:	687f      	ldr	r7, [r7, #4]
 800738a:	e7b6      	b.n	80072fa <_malloc_r+0x4a>
 800738c:	461a      	mov	r2, r3
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	42a3      	cmp	r3, r4
 8007392:	d1fb      	bne.n	800738c <_malloc_r+0xdc>
 8007394:	2300      	movs	r3, #0
 8007396:	6053      	str	r3, [r2, #4]
 8007398:	e7de      	b.n	8007358 <_malloc_r+0xa8>
 800739a:	230c      	movs	r3, #12
 800739c:	6033      	str	r3, [r6, #0]
 800739e:	4630      	mov	r0, r6
 80073a0:	f000 f80c 	bl	80073bc <__malloc_unlock>
 80073a4:	e794      	b.n	80072d0 <_malloc_r+0x20>
 80073a6:	6005      	str	r5, [r0, #0]
 80073a8:	e7d6      	b.n	8007358 <_malloc_r+0xa8>
 80073aa:	bf00      	nop
 80073ac:	200043e0 	.word	0x200043e0

080073b0 <__malloc_lock>:
 80073b0:	4801      	ldr	r0, [pc, #4]	@ (80073b8 <__malloc_lock+0x8>)
 80073b2:	f7ff b8a0 	b.w	80064f6 <__retarget_lock_acquire_recursive>
 80073b6:	bf00      	nop
 80073b8:	200043d8 	.word	0x200043d8

080073bc <__malloc_unlock>:
 80073bc:	4801      	ldr	r0, [pc, #4]	@ (80073c4 <__malloc_unlock+0x8>)
 80073be:	f7ff b89b 	b.w	80064f8 <__retarget_lock_release_recursive>
 80073c2:	bf00      	nop
 80073c4:	200043d8 	.word	0x200043d8

080073c8 <_Balloc>:
 80073c8:	b570      	push	{r4, r5, r6, lr}
 80073ca:	69c6      	ldr	r6, [r0, #28]
 80073cc:	4604      	mov	r4, r0
 80073ce:	460d      	mov	r5, r1
 80073d0:	b976      	cbnz	r6, 80073f0 <_Balloc+0x28>
 80073d2:	2010      	movs	r0, #16
 80073d4:	f7ff ff42 	bl	800725c <malloc>
 80073d8:	4602      	mov	r2, r0
 80073da:	61e0      	str	r0, [r4, #28]
 80073dc:	b920      	cbnz	r0, 80073e8 <_Balloc+0x20>
 80073de:	4b18      	ldr	r3, [pc, #96]	@ (8007440 <_Balloc+0x78>)
 80073e0:	4818      	ldr	r0, [pc, #96]	@ (8007444 <_Balloc+0x7c>)
 80073e2:	216b      	movs	r1, #107	@ 0x6b
 80073e4:	f000 fd98 	bl	8007f18 <__assert_func>
 80073e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073ec:	6006      	str	r6, [r0, #0]
 80073ee:	60c6      	str	r6, [r0, #12]
 80073f0:	69e6      	ldr	r6, [r4, #28]
 80073f2:	68f3      	ldr	r3, [r6, #12]
 80073f4:	b183      	cbz	r3, 8007418 <_Balloc+0x50>
 80073f6:	69e3      	ldr	r3, [r4, #28]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80073fe:	b9b8      	cbnz	r0, 8007430 <_Balloc+0x68>
 8007400:	2101      	movs	r1, #1
 8007402:	fa01 f605 	lsl.w	r6, r1, r5
 8007406:	1d72      	adds	r2, r6, #5
 8007408:	0092      	lsls	r2, r2, #2
 800740a:	4620      	mov	r0, r4
 800740c:	f000 fda2 	bl	8007f54 <_calloc_r>
 8007410:	b160      	cbz	r0, 800742c <_Balloc+0x64>
 8007412:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007416:	e00e      	b.n	8007436 <_Balloc+0x6e>
 8007418:	2221      	movs	r2, #33	@ 0x21
 800741a:	2104      	movs	r1, #4
 800741c:	4620      	mov	r0, r4
 800741e:	f000 fd99 	bl	8007f54 <_calloc_r>
 8007422:	69e3      	ldr	r3, [r4, #28]
 8007424:	60f0      	str	r0, [r6, #12]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d1e4      	bne.n	80073f6 <_Balloc+0x2e>
 800742c:	2000      	movs	r0, #0
 800742e:	bd70      	pop	{r4, r5, r6, pc}
 8007430:	6802      	ldr	r2, [r0, #0]
 8007432:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007436:	2300      	movs	r3, #0
 8007438:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800743c:	e7f7      	b.n	800742e <_Balloc+0x66>
 800743e:	bf00      	nop
 8007440:	08008645 	.word	0x08008645
 8007444:	080086c5 	.word	0x080086c5

08007448 <_Bfree>:
 8007448:	b570      	push	{r4, r5, r6, lr}
 800744a:	69c6      	ldr	r6, [r0, #28]
 800744c:	4605      	mov	r5, r0
 800744e:	460c      	mov	r4, r1
 8007450:	b976      	cbnz	r6, 8007470 <_Bfree+0x28>
 8007452:	2010      	movs	r0, #16
 8007454:	f7ff ff02 	bl	800725c <malloc>
 8007458:	4602      	mov	r2, r0
 800745a:	61e8      	str	r0, [r5, #28]
 800745c:	b920      	cbnz	r0, 8007468 <_Bfree+0x20>
 800745e:	4b09      	ldr	r3, [pc, #36]	@ (8007484 <_Bfree+0x3c>)
 8007460:	4809      	ldr	r0, [pc, #36]	@ (8007488 <_Bfree+0x40>)
 8007462:	218f      	movs	r1, #143	@ 0x8f
 8007464:	f000 fd58 	bl	8007f18 <__assert_func>
 8007468:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800746c:	6006      	str	r6, [r0, #0]
 800746e:	60c6      	str	r6, [r0, #12]
 8007470:	b13c      	cbz	r4, 8007482 <_Bfree+0x3a>
 8007472:	69eb      	ldr	r3, [r5, #28]
 8007474:	6862      	ldr	r2, [r4, #4]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800747c:	6021      	str	r1, [r4, #0]
 800747e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007482:	bd70      	pop	{r4, r5, r6, pc}
 8007484:	08008645 	.word	0x08008645
 8007488:	080086c5 	.word	0x080086c5

0800748c <__multadd>:
 800748c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007490:	690d      	ldr	r5, [r1, #16]
 8007492:	4607      	mov	r7, r0
 8007494:	460c      	mov	r4, r1
 8007496:	461e      	mov	r6, r3
 8007498:	f101 0c14 	add.w	ip, r1, #20
 800749c:	2000      	movs	r0, #0
 800749e:	f8dc 3000 	ldr.w	r3, [ip]
 80074a2:	b299      	uxth	r1, r3
 80074a4:	fb02 6101 	mla	r1, r2, r1, r6
 80074a8:	0c1e      	lsrs	r6, r3, #16
 80074aa:	0c0b      	lsrs	r3, r1, #16
 80074ac:	fb02 3306 	mla	r3, r2, r6, r3
 80074b0:	b289      	uxth	r1, r1
 80074b2:	3001      	adds	r0, #1
 80074b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80074b8:	4285      	cmp	r5, r0
 80074ba:	f84c 1b04 	str.w	r1, [ip], #4
 80074be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80074c2:	dcec      	bgt.n	800749e <__multadd+0x12>
 80074c4:	b30e      	cbz	r6, 800750a <__multadd+0x7e>
 80074c6:	68a3      	ldr	r3, [r4, #8]
 80074c8:	42ab      	cmp	r3, r5
 80074ca:	dc19      	bgt.n	8007500 <__multadd+0x74>
 80074cc:	6861      	ldr	r1, [r4, #4]
 80074ce:	4638      	mov	r0, r7
 80074d0:	3101      	adds	r1, #1
 80074d2:	f7ff ff79 	bl	80073c8 <_Balloc>
 80074d6:	4680      	mov	r8, r0
 80074d8:	b928      	cbnz	r0, 80074e6 <__multadd+0x5a>
 80074da:	4602      	mov	r2, r0
 80074dc:	4b0c      	ldr	r3, [pc, #48]	@ (8007510 <__multadd+0x84>)
 80074de:	480d      	ldr	r0, [pc, #52]	@ (8007514 <__multadd+0x88>)
 80074e0:	21ba      	movs	r1, #186	@ 0xba
 80074e2:	f000 fd19 	bl	8007f18 <__assert_func>
 80074e6:	6922      	ldr	r2, [r4, #16]
 80074e8:	3202      	adds	r2, #2
 80074ea:	f104 010c 	add.w	r1, r4, #12
 80074ee:	0092      	lsls	r2, r2, #2
 80074f0:	300c      	adds	r0, #12
 80074f2:	f7ff f802 	bl	80064fa <memcpy>
 80074f6:	4621      	mov	r1, r4
 80074f8:	4638      	mov	r0, r7
 80074fa:	f7ff ffa5 	bl	8007448 <_Bfree>
 80074fe:	4644      	mov	r4, r8
 8007500:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007504:	3501      	adds	r5, #1
 8007506:	615e      	str	r6, [r3, #20]
 8007508:	6125      	str	r5, [r4, #16]
 800750a:	4620      	mov	r0, r4
 800750c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007510:	080086b4 	.word	0x080086b4
 8007514:	080086c5 	.word	0x080086c5

08007518 <__hi0bits>:
 8007518:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800751c:	4603      	mov	r3, r0
 800751e:	bf36      	itet	cc
 8007520:	0403      	lslcc	r3, r0, #16
 8007522:	2000      	movcs	r0, #0
 8007524:	2010      	movcc	r0, #16
 8007526:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800752a:	bf3c      	itt	cc
 800752c:	021b      	lslcc	r3, r3, #8
 800752e:	3008      	addcc	r0, #8
 8007530:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007534:	bf3c      	itt	cc
 8007536:	011b      	lslcc	r3, r3, #4
 8007538:	3004      	addcc	r0, #4
 800753a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800753e:	bf3c      	itt	cc
 8007540:	009b      	lslcc	r3, r3, #2
 8007542:	3002      	addcc	r0, #2
 8007544:	2b00      	cmp	r3, #0
 8007546:	db05      	blt.n	8007554 <__hi0bits+0x3c>
 8007548:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800754c:	f100 0001 	add.w	r0, r0, #1
 8007550:	bf08      	it	eq
 8007552:	2020      	moveq	r0, #32
 8007554:	4770      	bx	lr

08007556 <__lo0bits>:
 8007556:	6803      	ldr	r3, [r0, #0]
 8007558:	4602      	mov	r2, r0
 800755a:	f013 0007 	ands.w	r0, r3, #7
 800755e:	d00b      	beq.n	8007578 <__lo0bits+0x22>
 8007560:	07d9      	lsls	r1, r3, #31
 8007562:	d421      	bmi.n	80075a8 <__lo0bits+0x52>
 8007564:	0798      	lsls	r0, r3, #30
 8007566:	bf49      	itett	mi
 8007568:	085b      	lsrmi	r3, r3, #1
 800756a:	089b      	lsrpl	r3, r3, #2
 800756c:	2001      	movmi	r0, #1
 800756e:	6013      	strmi	r3, [r2, #0]
 8007570:	bf5c      	itt	pl
 8007572:	6013      	strpl	r3, [r2, #0]
 8007574:	2002      	movpl	r0, #2
 8007576:	4770      	bx	lr
 8007578:	b299      	uxth	r1, r3
 800757a:	b909      	cbnz	r1, 8007580 <__lo0bits+0x2a>
 800757c:	0c1b      	lsrs	r3, r3, #16
 800757e:	2010      	movs	r0, #16
 8007580:	b2d9      	uxtb	r1, r3
 8007582:	b909      	cbnz	r1, 8007588 <__lo0bits+0x32>
 8007584:	3008      	adds	r0, #8
 8007586:	0a1b      	lsrs	r3, r3, #8
 8007588:	0719      	lsls	r1, r3, #28
 800758a:	bf04      	itt	eq
 800758c:	091b      	lsreq	r3, r3, #4
 800758e:	3004      	addeq	r0, #4
 8007590:	0799      	lsls	r1, r3, #30
 8007592:	bf04      	itt	eq
 8007594:	089b      	lsreq	r3, r3, #2
 8007596:	3002      	addeq	r0, #2
 8007598:	07d9      	lsls	r1, r3, #31
 800759a:	d403      	bmi.n	80075a4 <__lo0bits+0x4e>
 800759c:	085b      	lsrs	r3, r3, #1
 800759e:	f100 0001 	add.w	r0, r0, #1
 80075a2:	d003      	beq.n	80075ac <__lo0bits+0x56>
 80075a4:	6013      	str	r3, [r2, #0]
 80075a6:	4770      	bx	lr
 80075a8:	2000      	movs	r0, #0
 80075aa:	4770      	bx	lr
 80075ac:	2020      	movs	r0, #32
 80075ae:	4770      	bx	lr

080075b0 <__i2b>:
 80075b0:	b510      	push	{r4, lr}
 80075b2:	460c      	mov	r4, r1
 80075b4:	2101      	movs	r1, #1
 80075b6:	f7ff ff07 	bl	80073c8 <_Balloc>
 80075ba:	4602      	mov	r2, r0
 80075bc:	b928      	cbnz	r0, 80075ca <__i2b+0x1a>
 80075be:	4b05      	ldr	r3, [pc, #20]	@ (80075d4 <__i2b+0x24>)
 80075c0:	4805      	ldr	r0, [pc, #20]	@ (80075d8 <__i2b+0x28>)
 80075c2:	f240 1145 	movw	r1, #325	@ 0x145
 80075c6:	f000 fca7 	bl	8007f18 <__assert_func>
 80075ca:	2301      	movs	r3, #1
 80075cc:	6144      	str	r4, [r0, #20]
 80075ce:	6103      	str	r3, [r0, #16]
 80075d0:	bd10      	pop	{r4, pc}
 80075d2:	bf00      	nop
 80075d4:	080086b4 	.word	0x080086b4
 80075d8:	080086c5 	.word	0x080086c5

080075dc <__multiply>:
 80075dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e0:	4617      	mov	r7, r2
 80075e2:	690a      	ldr	r2, [r1, #16]
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	bfa8      	it	ge
 80075ea:	463b      	movge	r3, r7
 80075ec:	4689      	mov	r9, r1
 80075ee:	bfa4      	itt	ge
 80075f0:	460f      	movge	r7, r1
 80075f2:	4699      	movge	r9, r3
 80075f4:	693d      	ldr	r5, [r7, #16]
 80075f6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	6879      	ldr	r1, [r7, #4]
 80075fe:	eb05 060a 	add.w	r6, r5, sl
 8007602:	42b3      	cmp	r3, r6
 8007604:	b085      	sub	sp, #20
 8007606:	bfb8      	it	lt
 8007608:	3101      	addlt	r1, #1
 800760a:	f7ff fedd 	bl	80073c8 <_Balloc>
 800760e:	b930      	cbnz	r0, 800761e <__multiply+0x42>
 8007610:	4602      	mov	r2, r0
 8007612:	4b41      	ldr	r3, [pc, #260]	@ (8007718 <__multiply+0x13c>)
 8007614:	4841      	ldr	r0, [pc, #260]	@ (800771c <__multiply+0x140>)
 8007616:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800761a:	f000 fc7d 	bl	8007f18 <__assert_func>
 800761e:	f100 0414 	add.w	r4, r0, #20
 8007622:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007626:	4623      	mov	r3, r4
 8007628:	2200      	movs	r2, #0
 800762a:	4573      	cmp	r3, lr
 800762c:	d320      	bcc.n	8007670 <__multiply+0x94>
 800762e:	f107 0814 	add.w	r8, r7, #20
 8007632:	f109 0114 	add.w	r1, r9, #20
 8007636:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800763a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800763e:	9302      	str	r3, [sp, #8]
 8007640:	1beb      	subs	r3, r5, r7
 8007642:	3b15      	subs	r3, #21
 8007644:	f023 0303 	bic.w	r3, r3, #3
 8007648:	3304      	adds	r3, #4
 800764a:	3715      	adds	r7, #21
 800764c:	42bd      	cmp	r5, r7
 800764e:	bf38      	it	cc
 8007650:	2304      	movcc	r3, #4
 8007652:	9301      	str	r3, [sp, #4]
 8007654:	9b02      	ldr	r3, [sp, #8]
 8007656:	9103      	str	r1, [sp, #12]
 8007658:	428b      	cmp	r3, r1
 800765a:	d80c      	bhi.n	8007676 <__multiply+0x9a>
 800765c:	2e00      	cmp	r6, #0
 800765e:	dd03      	ble.n	8007668 <__multiply+0x8c>
 8007660:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007664:	2b00      	cmp	r3, #0
 8007666:	d055      	beq.n	8007714 <__multiply+0x138>
 8007668:	6106      	str	r6, [r0, #16]
 800766a:	b005      	add	sp, #20
 800766c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007670:	f843 2b04 	str.w	r2, [r3], #4
 8007674:	e7d9      	b.n	800762a <__multiply+0x4e>
 8007676:	f8b1 a000 	ldrh.w	sl, [r1]
 800767a:	f1ba 0f00 	cmp.w	sl, #0
 800767e:	d01f      	beq.n	80076c0 <__multiply+0xe4>
 8007680:	46c4      	mov	ip, r8
 8007682:	46a1      	mov	r9, r4
 8007684:	2700      	movs	r7, #0
 8007686:	f85c 2b04 	ldr.w	r2, [ip], #4
 800768a:	f8d9 3000 	ldr.w	r3, [r9]
 800768e:	fa1f fb82 	uxth.w	fp, r2
 8007692:	b29b      	uxth	r3, r3
 8007694:	fb0a 330b 	mla	r3, sl, fp, r3
 8007698:	443b      	add	r3, r7
 800769a:	f8d9 7000 	ldr.w	r7, [r9]
 800769e:	0c12      	lsrs	r2, r2, #16
 80076a0:	0c3f      	lsrs	r7, r7, #16
 80076a2:	fb0a 7202 	mla	r2, sl, r2, r7
 80076a6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076b0:	4565      	cmp	r5, ip
 80076b2:	f849 3b04 	str.w	r3, [r9], #4
 80076b6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80076ba:	d8e4      	bhi.n	8007686 <__multiply+0xaa>
 80076bc:	9b01      	ldr	r3, [sp, #4]
 80076be:	50e7      	str	r7, [r4, r3]
 80076c0:	9b03      	ldr	r3, [sp, #12]
 80076c2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80076c6:	3104      	adds	r1, #4
 80076c8:	f1b9 0f00 	cmp.w	r9, #0
 80076cc:	d020      	beq.n	8007710 <__multiply+0x134>
 80076ce:	6823      	ldr	r3, [r4, #0]
 80076d0:	4647      	mov	r7, r8
 80076d2:	46a4      	mov	ip, r4
 80076d4:	f04f 0a00 	mov.w	sl, #0
 80076d8:	f8b7 b000 	ldrh.w	fp, [r7]
 80076dc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80076e0:	fb09 220b 	mla	r2, r9, fp, r2
 80076e4:	4452      	add	r2, sl
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076ec:	f84c 3b04 	str.w	r3, [ip], #4
 80076f0:	f857 3b04 	ldr.w	r3, [r7], #4
 80076f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80076f8:	f8bc 3000 	ldrh.w	r3, [ip]
 80076fc:	fb09 330a 	mla	r3, r9, sl, r3
 8007700:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007704:	42bd      	cmp	r5, r7
 8007706:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800770a:	d8e5      	bhi.n	80076d8 <__multiply+0xfc>
 800770c:	9a01      	ldr	r2, [sp, #4]
 800770e:	50a3      	str	r3, [r4, r2]
 8007710:	3404      	adds	r4, #4
 8007712:	e79f      	b.n	8007654 <__multiply+0x78>
 8007714:	3e01      	subs	r6, #1
 8007716:	e7a1      	b.n	800765c <__multiply+0x80>
 8007718:	080086b4 	.word	0x080086b4
 800771c:	080086c5 	.word	0x080086c5

08007720 <__pow5mult>:
 8007720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007724:	4615      	mov	r5, r2
 8007726:	f012 0203 	ands.w	r2, r2, #3
 800772a:	4607      	mov	r7, r0
 800772c:	460e      	mov	r6, r1
 800772e:	d007      	beq.n	8007740 <__pow5mult+0x20>
 8007730:	4c25      	ldr	r4, [pc, #148]	@ (80077c8 <__pow5mult+0xa8>)
 8007732:	3a01      	subs	r2, #1
 8007734:	2300      	movs	r3, #0
 8007736:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800773a:	f7ff fea7 	bl	800748c <__multadd>
 800773e:	4606      	mov	r6, r0
 8007740:	10ad      	asrs	r5, r5, #2
 8007742:	d03d      	beq.n	80077c0 <__pow5mult+0xa0>
 8007744:	69fc      	ldr	r4, [r7, #28]
 8007746:	b97c      	cbnz	r4, 8007768 <__pow5mult+0x48>
 8007748:	2010      	movs	r0, #16
 800774a:	f7ff fd87 	bl	800725c <malloc>
 800774e:	4602      	mov	r2, r0
 8007750:	61f8      	str	r0, [r7, #28]
 8007752:	b928      	cbnz	r0, 8007760 <__pow5mult+0x40>
 8007754:	4b1d      	ldr	r3, [pc, #116]	@ (80077cc <__pow5mult+0xac>)
 8007756:	481e      	ldr	r0, [pc, #120]	@ (80077d0 <__pow5mult+0xb0>)
 8007758:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800775c:	f000 fbdc 	bl	8007f18 <__assert_func>
 8007760:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007764:	6004      	str	r4, [r0, #0]
 8007766:	60c4      	str	r4, [r0, #12]
 8007768:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800776c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007770:	b94c      	cbnz	r4, 8007786 <__pow5mult+0x66>
 8007772:	f240 2171 	movw	r1, #625	@ 0x271
 8007776:	4638      	mov	r0, r7
 8007778:	f7ff ff1a 	bl	80075b0 <__i2b>
 800777c:	2300      	movs	r3, #0
 800777e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007782:	4604      	mov	r4, r0
 8007784:	6003      	str	r3, [r0, #0]
 8007786:	f04f 0900 	mov.w	r9, #0
 800778a:	07eb      	lsls	r3, r5, #31
 800778c:	d50a      	bpl.n	80077a4 <__pow5mult+0x84>
 800778e:	4631      	mov	r1, r6
 8007790:	4622      	mov	r2, r4
 8007792:	4638      	mov	r0, r7
 8007794:	f7ff ff22 	bl	80075dc <__multiply>
 8007798:	4631      	mov	r1, r6
 800779a:	4680      	mov	r8, r0
 800779c:	4638      	mov	r0, r7
 800779e:	f7ff fe53 	bl	8007448 <_Bfree>
 80077a2:	4646      	mov	r6, r8
 80077a4:	106d      	asrs	r5, r5, #1
 80077a6:	d00b      	beq.n	80077c0 <__pow5mult+0xa0>
 80077a8:	6820      	ldr	r0, [r4, #0]
 80077aa:	b938      	cbnz	r0, 80077bc <__pow5mult+0x9c>
 80077ac:	4622      	mov	r2, r4
 80077ae:	4621      	mov	r1, r4
 80077b0:	4638      	mov	r0, r7
 80077b2:	f7ff ff13 	bl	80075dc <__multiply>
 80077b6:	6020      	str	r0, [r4, #0]
 80077b8:	f8c0 9000 	str.w	r9, [r0]
 80077bc:	4604      	mov	r4, r0
 80077be:	e7e4      	b.n	800778a <__pow5mult+0x6a>
 80077c0:	4630      	mov	r0, r6
 80077c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077c6:	bf00      	nop
 80077c8:	08008778 	.word	0x08008778
 80077cc:	08008645 	.word	0x08008645
 80077d0:	080086c5 	.word	0x080086c5

080077d4 <__lshift>:
 80077d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077d8:	460c      	mov	r4, r1
 80077da:	6849      	ldr	r1, [r1, #4]
 80077dc:	6923      	ldr	r3, [r4, #16]
 80077de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80077e2:	68a3      	ldr	r3, [r4, #8]
 80077e4:	4607      	mov	r7, r0
 80077e6:	4691      	mov	r9, r2
 80077e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80077ec:	f108 0601 	add.w	r6, r8, #1
 80077f0:	42b3      	cmp	r3, r6
 80077f2:	db0b      	blt.n	800780c <__lshift+0x38>
 80077f4:	4638      	mov	r0, r7
 80077f6:	f7ff fde7 	bl	80073c8 <_Balloc>
 80077fa:	4605      	mov	r5, r0
 80077fc:	b948      	cbnz	r0, 8007812 <__lshift+0x3e>
 80077fe:	4602      	mov	r2, r0
 8007800:	4b28      	ldr	r3, [pc, #160]	@ (80078a4 <__lshift+0xd0>)
 8007802:	4829      	ldr	r0, [pc, #164]	@ (80078a8 <__lshift+0xd4>)
 8007804:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007808:	f000 fb86 	bl	8007f18 <__assert_func>
 800780c:	3101      	adds	r1, #1
 800780e:	005b      	lsls	r3, r3, #1
 8007810:	e7ee      	b.n	80077f0 <__lshift+0x1c>
 8007812:	2300      	movs	r3, #0
 8007814:	f100 0114 	add.w	r1, r0, #20
 8007818:	f100 0210 	add.w	r2, r0, #16
 800781c:	4618      	mov	r0, r3
 800781e:	4553      	cmp	r3, sl
 8007820:	db33      	blt.n	800788a <__lshift+0xb6>
 8007822:	6920      	ldr	r0, [r4, #16]
 8007824:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007828:	f104 0314 	add.w	r3, r4, #20
 800782c:	f019 091f 	ands.w	r9, r9, #31
 8007830:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007834:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007838:	d02b      	beq.n	8007892 <__lshift+0xbe>
 800783a:	f1c9 0e20 	rsb	lr, r9, #32
 800783e:	468a      	mov	sl, r1
 8007840:	2200      	movs	r2, #0
 8007842:	6818      	ldr	r0, [r3, #0]
 8007844:	fa00 f009 	lsl.w	r0, r0, r9
 8007848:	4310      	orrs	r0, r2
 800784a:	f84a 0b04 	str.w	r0, [sl], #4
 800784e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007852:	459c      	cmp	ip, r3
 8007854:	fa22 f20e 	lsr.w	r2, r2, lr
 8007858:	d8f3      	bhi.n	8007842 <__lshift+0x6e>
 800785a:	ebac 0304 	sub.w	r3, ip, r4
 800785e:	3b15      	subs	r3, #21
 8007860:	f023 0303 	bic.w	r3, r3, #3
 8007864:	3304      	adds	r3, #4
 8007866:	f104 0015 	add.w	r0, r4, #21
 800786a:	4560      	cmp	r0, ip
 800786c:	bf88      	it	hi
 800786e:	2304      	movhi	r3, #4
 8007870:	50ca      	str	r2, [r1, r3]
 8007872:	b10a      	cbz	r2, 8007878 <__lshift+0xa4>
 8007874:	f108 0602 	add.w	r6, r8, #2
 8007878:	3e01      	subs	r6, #1
 800787a:	4638      	mov	r0, r7
 800787c:	612e      	str	r6, [r5, #16]
 800787e:	4621      	mov	r1, r4
 8007880:	f7ff fde2 	bl	8007448 <_Bfree>
 8007884:	4628      	mov	r0, r5
 8007886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800788a:	f842 0f04 	str.w	r0, [r2, #4]!
 800788e:	3301      	adds	r3, #1
 8007890:	e7c5      	b.n	800781e <__lshift+0x4a>
 8007892:	3904      	subs	r1, #4
 8007894:	f853 2b04 	ldr.w	r2, [r3], #4
 8007898:	f841 2f04 	str.w	r2, [r1, #4]!
 800789c:	459c      	cmp	ip, r3
 800789e:	d8f9      	bhi.n	8007894 <__lshift+0xc0>
 80078a0:	e7ea      	b.n	8007878 <__lshift+0xa4>
 80078a2:	bf00      	nop
 80078a4:	080086b4 	.word	0x080086b4
 80078a8:	080086c5 	.word	0x080086c5

080078ac <__mcmp>:
 80078ac:	690a      	ldr	r2, [r1, #16]
 80078ae:	4603      	mov	r3, r0
 80078b0:	6900      	ldr	r0, [r0, #16]
 80078b2:	1a80      	subs	r0, r0, r2
 80078b4:	b530      	push	{r4, r5, lr}
 80078b6:	d10e      	bne.n	80078d6 <__mcmp+0x2a>
 80078b8:	3314      	adds	r3, #20
 80078ba:	3114      	adds	r1, #20
 80078bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80078c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80078c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80078c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80078cc:	4295      	cmp	r5, r2
 80078ce:	d003      	beq.n	80078d8 <__mcmp+0x2c>
 80078d0:	d205      	bcs.n	80078de <__mcmp+0x32>
 80078d2:	f04f 30ff 	mov.w	r0, #4294967295
 80078d6:	bd30      	pop	{r4, r5, pc}
 80078d8:	42a3      	cmp	r3, r4
 80078da:	d3f3      	bcc.n	80078c4 <__mcmp+0x18>
 80078dc:	e7fb      	b.n	80078d6 <__mcmp+0x2a>
 80078de:	2001      	movs	r0, #1
 80078e0:	e7f9      	b.n	80078d6 <__mcmp+0x2a>
	...

080078e4 <__mdiff>:
 80078e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078e8:	4689      	mov	r9, r1
 80078ea:	4606      	mov	r6, r0
 80078ec:	4611      	mov	r1, r2
 80078ee:	4648      	mov	r0, r9
 80078f0:	4614      	mov	r4, r2
 80078f2:	f7ff ffdb 	bl	80078ac <__mcmp>
 80078f6:	1e05      	subs	r5, r0, #0
 80078f8:	d112      	bne.n	8007920 <__mdiff+0x3c>
 80078fa:	4629      	mov	r1, r5
 80078fc:	4630      	mov	r0, r6
 80078fe:	f7ff fd63 	bl	80073c8 <_Balloc>
 8007902:	4602      	mov	r2, r0
 8007904:	b928      	cbnz	r0, 8007912 <__mdiff+0x2e>
 8007906:	4b3f      	ldr	r3, [pc, #252]	@ (8007a04 <__mdiff+0x120>)
 8007908:	f240 2137 	movw	r1, #567	@ 0x237
 800790c:	483e      	ldr	r0, [pc, #248]	@ (8007a08 <__mdiff+0x124>)
 800790e:	f000 fb03 	bl	8007f18 <__assert_func>
 8007912:	2301      	movs	r3, #1
 8007914:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007918:	4610      	mov	r0, r2
 800791a:	b003      	add	sp, #12
 800791c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007920:	bfbc      	itt	lt
 8007922:	464b      	movlt	r3, r9
 8007924:	46a1      	movlt	r9, r4
 8007926:	4630      	mov	r0, r6
 8007928:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800792c:	bfba      	itte	lt
 800792e:	461c      	movlt	r4, r3
 8007930:	2501      	movlt	r5, #1
 8007932:	2500      	movge	r5, #0
 8007934:	f7ff fd48 	bl	80073c8 <_Balloc>
 8007938:	4602      	mov	r2, r0
 800793a:	b918      	cbnz	r0, 8007944 <__mdiff+0x60>
 800793c:	4b31      	ldr	r3, [pc, #196]	@ (8007a04 <__mdiff+0x120>)
 800793e:	f240 2145 	movw	r1, #581	@ 0x245
 8007942:	e7e3      	b.n	800790c <__mdiff+0x28>
 8007944:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007948:	6926      	ldr	r6, [r4, #16]
 800794a:	60c5      	str	r5, [r0, #12]
 800794c:	f109 0310 	add.w	r3, r9, #16
 8007950:	f109 0514 	add.w	r5, r9, #20
 8007954:	f104 0e14 	add.w	lr, r4, #20
 8007958:	f100 0b14 	add.w	fp, r0, #20
 800795c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007960:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007964:	9301      	str	r3, [sp, #4]
 8007966:	46d9      	mov	r9, fp
 8007968:	f04f 0c00 	mov.w	ip, #0
 800796c:	9b01      	ldr	r3, [sp, #4]
 800796e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007972:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007976:	9301      	str	r3, [sp, #4]
 8007978:	fa1f f38a 	uxth.w	r3, sl
 800797c:	4619      	mov	r1, r3
 800797e:	b283      	uxth	r3, r0
 8007980:	1acb      	subs	r3, r1, r3
 8007982:	0c00      	lsrs	r0, r0, #16
 8007984:	4463      	add	r3, ip
 8007986:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800798a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800798e:	b29b      	uxth	r3, r3
 8007990:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007994:	4576      	cmp	r6, lr
 8007996:	f849 3b04 	str.w	r3, [r9], #4
 800799a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800799e:	d8e5      	bhi.n	800796c <__mdiff+0x88>
 80079a0:	1b33      	subs	r3, r6, r4
 80079a2:	3b15      	subs	r3, #21
 80079a4:	f023 0303 	bic.w	r3, r3, #3
 80079a8:	3415      	adds	r4, #21
 80079aa:	3304      	adds	r3, #4
 80079ac:	42a6      	cmp	r6, r4
 80079ae:	bf38      	it	cc
 80079b0:	2304      	movcc	r3, #4
 80079b2:	441d      	add	r5, r3
 80079b4:	445b      	add	r3, fp
 80079b6:	461e      	mov	r6, r3
 80079b8:	462c      	mov	r4, r5
 80079ba:	4544      	cmp	r4, r8
 80079bc:	d30e      	bcc.n	80079dc <__mdiff+0xf8>
 80079be:	f108 0103 	add.w	r1, r8, #3
 80079c2:	1b49      	subs	r1, r1, r5
 80079c4:	f021 0103 	bic.w	r1, r1, #3
 80079c8:	3d03      	subs	r5, #3
 80079ca:	45a8      	cmp	r8, r5
 80079cc:	bf38      	it	cc
 80079ce:	2100      	movcc	r1, #0
 80079d0:	440b      	add	r3, r1
 80079d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80079d6:	b191      	cbz	r1, 80079fe <__mdiff+0x11a>
 80079d8:	6117      	str	r7, [r2, #16]
 80079da:	e79d      	b.n	8007918 <__mdiff+0x34>
 80079dc:	f854 1b04 	ldr.w	r1, [r4], #4
 80079e0:	46e6      	mov	lr, ip
 80079e2:	0c08      	lsrs	r0, r1, #16
 80079e4:	fa1c fc81 	uxtah	ip, ip, r1
 80079e8:	4471      	add	r1, lr
 80079ea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80079ee:	b289      	uxth	r1, r1
 80079f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80079f4:	f846 1b04 	str.w	r1, [r6], #4
 80079f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80079fc:	e7dd      	b.n	80079ba <__mdiff+0xd6>
 80079fe:	3f01      	subs	r7, #1
 8007a00:	e7e7      	b.n	80079d2 <__mdiff+0xee>
 8007a02:	bf00      	nop
 8007a04:	080086b4 	.word	0x080086b4
 8007a08:	080086c5 	.word	0x080086c5

08007a0c <__d2b>:
 8007a0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007a10:	460f      	mov	r7, r1
 8007a12:	2101      	movs	r1, #1
 8007a14:	ec59 8b10 	vmov	r8, r9, d0
 8007a18:	4616      	mov	r6, r2
 8007a1a:	f7ff fcd5 	bl	80073c8 <_Balloc>
 8007a1e:	4604      	mov	r4, r0
 8007a20:	b930      	cbnz	r0, 8007a30 <__d2b+0x24>
 8007a22:	4602      	mov	r2, r0
 8007a24:	4b23      	ldr	r3, [pc, #140]	@ (8007ab4 <__d2b+0xa8>)
 8007a26:	4824      	ldr	r0, [pc, #144]	@ (8007ab8 <__d2b+0xac>)
 8007a28:	f240 310f 	movw	r1, #783	@ 0x30f
 8007a2c:	f000 fa74 	bl	8007f18 <__assert_func>
 8007a30:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007a34:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a38:	b10d      	cbz	r5, 8007a3e <__d2b+0x32>
 8007a3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a3e:	9301      	str	r3, [sp, #4]
 8007a40:	f1b8 0300 	subs.w	r3, r8, #0
 8007a44:	d023      	beq.n	8007a8e <__d2b+0x82>
 8007a46:	4668      	mov	r0, sp
 8007a48:	9300      	str	r3, [sp, #0]
 8007a4a:	f7ff fd84 	bl	8007556 <__lo0bits>
 8007a4e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007a52:	b1d0      	cbz	r0, 8007a8a <__d2b+0x7e>
 8007a54:	f1c0 0320 	rsb	r3, r0, #32
 8007a58:	fa02 f303 	lsl.w	r3, r2, r3
 8007a5c:	430b      	orrs	r3, r1
 8007a5e:	40c2      	lsrs	r2, r0
 8007a60:	6163      	str	r3, [r4, #20]
 8007a62:	9201      	str	r2, [sp, #4]
 8007a64:	9b01      	ldr	r3, [sp, #4]
 8007a66:	61a3      	str	r3, [r4, #24]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	bf0c      	ite	eq
 8007a6c:	2201      	moveq	r2, #1
 8007a6e:	2202      	movne	r2, #2
 8007a70:	6122      	str	r2, [r4, #16]
 8007a72:	b1a5      	cbz	r5, 8007a9e <__d2b+0x92>
 8007a74:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007a78:	4405      	add	r5, r0
 8007a7a:	603d      	str	r5, [r7, #0]
 8007a7c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007a80:	6030      	str	r0, [r6, #0]
 8007a82:	4620      	mov	r0, r4
 8007a84:	b003      	add	sp, #12
 8007a86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a8a:	6161      	str	r1, [r4, #20]
 8007a8c:	e7ea      	b.n	8007a64 <__d2b+0x58>
 8007a8e:	a801      	add	r0, sp, #4
 8007a90:	f7ff fd61 	bl	8007556 <__lo0bits>
 8007a94:	9b01      	ldr	r3, [sp, #4]
 8007a96:	6163      	str	r3, [r4, #20]
 8007a98:	3020      	adds	r0, #32
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	e7e8      	b.n	8007a70 <__d2b+0x64>
 8007a9e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007aa2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007aa6:	6038      	str	r0, [r7, #0]
 8007aa8:	6918      	ldr	r0, [r3, #16]
 8007aaa:	f7ff fd35 	bl	8007518 <__hi0bits>
 8007aae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007ab2:	e7e5      	b.n	8007a80 <__d2b+0x74>
 8007ab4:	080086b4 	.word	0x080086b4
 8007ab8:	080086c5 	.word	0x080086c5

08007abc <__ssputs_r>:
 8007abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ac0:	688e      	ldr	r6, [r1, #8]
 8007ac2:	461f      	mov	r7, r3
 8007ac4:	42be      	cmp	r6, r7
 8007ac6:	680b      	ldr	r3, [r1, #0]
 8007ac8:	4682      	mov	sl, r0
 8007aca:	460c      	mov	r4, r1
 8007acc:	4690      	mov	r8, r2
 8007ace:	d82d      	bhi.n	8007b2c <__ssputs_r+0x70>
 8007ad0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ad4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007ad8:	d026      	beq.n	8007b28 <__ssputs_r+0x6c>
 8007ada:	6965      	ldr	r5, [r4, #20]
 8007adc:	6909      	ldr	r1, [r1, #16]
 8007ade:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ae2:	eba3 0901 	sub.w	r9, r3, r1
 8007ae6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007aea:	1c7b      	adds	r3, r7, #1
 8007aec:	444b      	add	r3, r9
 8007aee:	106d      	asrs	r5, r5, #1
 8007af0:	429d      	cmp	r5, r3
 8007af2:	bf38      	it	cc
 8007af4:	461d      	movcc	r5, r3
 8007af6:	0553      	lsls	r3, r2, #21
 8007af8:	d527      	bpl.n	8007b4a <__ssputs_r+0x8e>
 8007afa:	4629      	mov	r1, r5
 8007afc:	f7ff fbd8 	bl	80072b0 <_malloc_r>
 8007b00:	4606      	mov	r6, r0
 8007b02:	b360      	cbz	r0, 8007b5e <__ssputs_r+0xa2>
 8007b04:	6921      	ldr	r1, [r4, #16]
 8007b06:	464a      	mov	r2, r9
 8007b08:	f7fe fcf7 	bl	80064fa <memcpy>
 8007b0c:	89a3      	ldrh	r3, [r4, #12]
 8007b0e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007b12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b16:	81a3      	strh	r3, [r4, #12]
 8007b18:	6126      	str	r6, [r4, #16]
 8007b1a:	6165      	str	r5, [r4, #20]
 8007b1c:	444e      	add	r6, r9
 8007b1e:	eba5 0509 	sub.w	r5, r5, r9
 8007b22:	6026      	str	r6, [r4, #0]
 8007b24:	60a5      	str	r5, [r4, #8]
 8007b26:	463e      	mov	r6, r7
 8007b28:	42be      	cmp	r6, r7
 8007b2a:	d900      	bls.n	8007b2e <__ssputs_r+0x72>
 8007b2c:	463e      	mov	r6, r7
 8007b2e:	6820      	ldr	r0, [r4, #0]
 8007b30:	4632      	mov	r2, r6
 8007b32:	4641      	mov	r1, r8
 8007b34:	f000 f9c6 	bl	8007ec4 <memmove>
 8007b38:	68a3      	ldr	r3, [r4, #8]
 8007b3a:	1b9b      	subs	r3, r3, r6
 8007b3c:	60a3      	str	r3, [r4, #8]
 8007b3e:	6823      	ldr	r3, [r4, #0]
 8007b40:	4433      	add	r3, r6
 8007b42:	6023      	str	r3, [r4, #0]
 8007b44:	2000      	movs	r0, #0
 8007b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b4a:	462a      	mov	r2, r5
 8007b4c:	f000 fa28 	bl	8007fa0 <_realloc_r>
 8007b50:	4606      	mov	r6, r0
 8007b52:	2800      	cmp	r0, #0
 8007b54:	d1e0      	bne.n	8007b18 <__ssputs_r+0x5c>
 8007b56:	6921      	ldr	r1, [r4, #16]
 8007b58:	4650      	mov	r0, sl
 8007b5a:	f7ff fb35 	bl	80071c8 <_free_r>
 8007b5e:	230c      	movs	r3, #12
 8007b60:	f8ca 3000 	str.w	r3, [sl]
 8007b64:	89a3      	ldrh	r3, [r4, #12]
 8007b66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b6a:	81a3      	strh	r3, [r4, #12]
 8007b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b70:	e7e9      	b.n	8007b46 <__ssputs_r+0x8a>
	...

08007b74 <_svfiprintf_r>:
 8007b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b78:	4698      	mov	r8, r3
 8007b7a:	898b      	ldrh	r3, [r1, #12]
 8007b7c:	061b      	lsls	r3, r3, #24
 8007b7e:	b09d      	sub	sp, #116	@ 0x74
 8007b80:	4607      	mov	r7, r0
 8007b82:	460d      	mov	r5, r1
 8007b84:	4614      	mov	r4, r2
 8007b86:	d510      	bpl.n	8007baa <_svfiprintf_r+0x36>
 8007b88:	690b      	ldr	r3, [r1, #16]
 8007b8a:	b973      	cbnz	r3, 8007baa <_svfiprintf_r+0x36>
 8007b8c:	2140      	movs	r1, #64	@ 0x40
 8007b8e:	f7ff fb8f 	bl	80072b0 <_malloc_r>
 8007b92:	6028      	str	r0, [r5, #0]
 8007b94:	6128      	str	r0, [r5, #16]
 8007b96:	b930      	cbnz	r0, 8007ba6 <_svfiprintf_r+0x32>
 8007b98:	230c      	movs	r3, #12
 8007b9a:	603b      	str	r3, [r7, #0]
 8007b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba0:	b01d      	add	sp, #116	@ 0x74
 8007ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ba6:	2340      	movs	r3, #64	@ 0x40
 8007ba8:	616b      	str	r3, [r5, #20]
 8007baa:	2300      	movs	r3, #0
 8007bac:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bae:	2320      	movs	r3, #32
 8007bb0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007bb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007bb8:	2330      	movs	r3, #48	@ 0x30
 8007bba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007d58 <_svfiprintf_r+0x1e4>
 8007bbe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007bc2:	f04f 0901 	mov.w	r9, #1
 8007bc6:	4623      	mov	r3, r4
 8007bc8:	469a      	mov	sl, r3
 8007bca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bce:	b10a      	cbz	r2, 8007bd4 <_svfiprintf_r+0x60>
 8007bd0:	2a25      	cmp	r2, #37	@ 0x25
 8007bd2:	d1f9      	bne.n	8007bc8 <_svfiprintf_r+0x54>
 8007bd4:	ebba 0b04 	subs.w	fp, sl, r4
 8007bd8:	d00b      	beq.n	8007bf2 <_svfiprintf_r+0x7e>
 8007bda:	465b      	mov	r3, fp
 8007bdc:	4622      	mov	r2, r4
 8007bde:	4629      	mov	r1, r5
 8007be0:	4638      	mov	r0, r7
 8007be2:	f7ff ff6b 	bl	8007abc <__ssputs_r>
 8007be6:	3001      	adds	r0, #1
 8007be8:	f000 80a7 	beq.w	8007d3a <_svfiprintf_r+0x1c6>
 8007bec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007bee:	445a      	add	r2, fp
 8007bf0:	9209      	str	r2, [sp, #36]	@ 0x24
 8007bf2:	f89a 3000 	ldrb.w	r3, [sl]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f000 809f 	beq.w	8007d3a <_svfiprintf_r+0x1c6>
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8007c02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c06:	f10a 0a01 	add.w	sl, sl, #1
 8007c0a:	9304      	str	r3, [sp, #16]
 8007c0c:	9307      	str	r3, [sp, #28]
 8007c0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007c12:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c14:	4654      	mov	r4, sl
 8007c16:	2205      	movs	r2, #5
 8007c18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c1c:	484e      	ldr	r0, [pc, #312]	@ (8007d58 <_svfiprintf_r+0x1e4>)
 8007c1e:	f7f8 fad7 	bl	80001d0 <memchr>
 8007c22:	9a04      	ldr	r2, [sp, #16]
 8007c24:	b9d8      	cbnz	r0, 8007c5e <_svfiprintf_r+0xea>
 8007c26:	06d0      	lsls	r0, r2, #27
 8007c28:	bf44      	itt	mi
 8007c2a:	2320      	movmi	r3, #32
 8007c2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c30:	0711      	lsls	r1, r2, #28
 8007c32:	bf44      	itt	mi
 8007c34:	232b      	movmi	r3, #43	@ 0x2b
 8007c36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c3a:	f89a 3000 	ldrb.w	r3, [sl]
 8007c3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c40:	d015      	beq.n	8007c6e <_svfiprintf_r+0xfa>
 8007c42:	9a07      	ldr	r2, [sp, #28]
 8007c44:	4654      	mov	r4, sl
 8007c46:	2000      	movs	r0, #0
 8007c48:	f04f 0c0a 	mov.w	ip, #10
 8007c4c:	4621      	mov	r1, r4
 8007c4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c52:	3b30      	subs	r3, #48	@ 0x30
 8007c54:	2b09      	cmp	r3, #9
 8007c56:	d94b      	bls.n	8007cf0 <_svfiprintf_r+0x17c>
 8007c58:	b1b0      	cbz	r0, 8007c88 <_svfiprintf_r+0x114>
 8007c5a:	9207      	str	r2, [sp, #28]
 8007c5c:	e014      	b.n	8007c88 <_svfiprintf_r+0x114>
 8007c5e:	eba0 0308 	sub.w	r3, r0, r8
 8007c62:	fa09 f303 	lsl.w	r3, r9, r3
 8007c66:	4313      	orrs	r3, r2
 8007c68:	9304      	str	r3, [sp, #16]
 8007c6a:	46a2      	mov	sl, r4
 8007c6c:	e7d2      	b.n	8007c14 <_svfiprintf_r+0xa0>
 8007c6e:	9b03      	ldr	r3, [sp, #12]
 8007c70:	1d19      	adds	r1, r3, #4
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	9103      	str	r1, [sp, #12]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	bfbb      	ittet	lt
 8007c7a:	425b      	neglt	r3, r3
 8007c7c:	f042 0202 	orrlt.w	r2, r2, #2
 8007c80:	9307      	strge	r3, [sp, #28]
 8007c82:	9307      	strlt	r3, [sp, #28]
 8007c84:	bfb8      	it	lt
 8007c86:	9204      	strlt	r2, [sp, #16]
 8007c88:	7823      	ldrb	r3, [r4, #0]
 8007c8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c8c:	d10a      	bne.n	8007ca4 <_svfiprintf_r+0x130>
 8007c8e:	7863      	ldrb	r3, [r4, #1]
 8007c90:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c92:	d132      	bne.n	8007cfa <_svfiprintf_r+0x186>
 8007c94:	9b03      	ldr	r3, [sp, #12]
 8007c96:	1d1a      	adds	r2, r3, #4
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	9203      	str	r2, [sp, #12]
 8007c9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007ca0:	3402      	adds	r4, #2
 8007ca2:	9305      	str	r3, [sp, #20]
 8007ca4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007d68 <_svfiprintf_r+0x1f4>
 8007ca8:	7821      	ldrb	r1, [r4, #0]
 8007caa:	2203      	movs	r2, #3
 8007cac:	4650      	mov	r0, sl
 8007cae:	f7f8 fa8f 	bl	80001d0 <memchr>
 8007cb2:	b138      	cbz	r0, 8007cc4 <_svfiprintf_r+0x150>
 8007cb4:	9b04      	ldr	r3, [sp, #16]
 8007cb6:	eba0 000a 	sub.w	r0, r0, sl
 8007cba:	2240      	movs	r2, #64	@ 0x40
 8007cbc:	4082      	lsls	r2, r0
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	3401      	adds	r4, #1
 8007cc2:	9304      	str	r3, [sp, #16]
 8007cc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cc8:	4824      	ldr	r0, [pc, #144]	@ (8007d5c <_svfiprintf_r+0x1e8>)
 8007cca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007cce:	2206      	movs	r2, #6
 8007cd0:	f7f8 fa7e 	bl	80001d0 <memchr>
 8007cd4:	2800      	cmp	r0, #0
 8007cd6:	d036      	beq.n	8007d46 <_svfiprintf_r+0x1d2>
 8007cd8:	4b21      	ldr	r3, [pc, #132]	@ (8007d60 <_svfiprintf_r+0x1ec>)
 8007cda:	bb1b      	cbnz	r3, 8007d24 <_svfiprintf_r+0x1b0>
 8007cdc:	9b03      	ldr	r3, [sp, #12]
 8007cde:	3307      	adds	r3, #7
 8007ce0:	f023 0307 	bic.w	r3, r3, #7
 8007ce4:	3308      	adds	r3, #8
 8007ce6:	9303      	str	r3, [sp, #12]
 8007ce8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cea:	4433      	add	r3, r6
 8007cec:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cee:	e76a      	b.n	8007bc6 <_svfiprintf_r+0x52>
 8007cf0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cf4:	460c      	mov	r4, r1
 8007cf6:	2001      	movs	r0, #1
 8007cf8:	e7a8      	b.n	8007c4c <_svfiprintf_r+0xd8>
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	3401      	adds	r4, #1
 8007cfe:	9305      	str	r3, [sp, #20]
 8007d00:	4619      	mov	r1, r3
 8007d02:	f04f 0c0a 	mov.w	ip, #10
 8007d06:	4620      	mov	r0, r4
 8007d08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d0c:	3a30      	subs	r2, #48	@ 0x30
 8007d0e:	2a09      	cmp	r2, #9
 8007d10:	d903      	bls.n	8007d1a <_svfiprintf_r+0x1a6>
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d0c6      	beq.n	8007ca4 <_svfiprintf_r+0x130>
 8007d16:	9105      	str	r1, [sp, #20]
 8007d18:	e7c4      	b.n	8007ca4 <_svfiprintf_r+0x130>
 8007d1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d1e:	4604      	mov	r4, r0
 8007d20:	2301      	movs	r3, #1
 8007d22:	e7f0      	b.n	8007d06 <_svfiprintf_r+0x192>
 8007d24:	ab03      	add	r3, sp, #12
 8007d26:	9300      	str	r3, [sp, #0]
 8007d28:	462a      	mov	r2, r5
 8007d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8007d64 <_svfiprintf_r+0x1f0>)
 8007d2c:	a904      	add	r1, sp, #16
 8007d2e:	4638      	mov	r0, r7
 8007d30:	f7fd fe28 	bl	8005984 <_printf_float>
 8007d34:	1c42      	adds	r2, r0, #1
 8007d36:	4606      	mov	r6, r0
 8007d38:	d1d6      	bne.n	8007ce8 <_svfiprintf_r+0x174>
 8007d3a:	89ab      	ldrh	r3, [r5, #12]
 8007d3c:	065b      	lsls	r3, r3, #25
 8007d3e:	f53f af2d 	bmi.w	8007b9c <_svfiprintf_r+0x28>
 8007d42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d44:	e72c      	b.n	8007ba0 <_svfiprintf_r+0x2c>
 8007d46:	ab03      	add	r3, sp, #12
 8007d48:	9300      	str	r3, [sp, #0]
 8007d4a:	462a      	mov	r2, r5
 8007d4c:	4b05      	ldr	r3, [pc, #20]	@ (8007d64 <_svfiprintf_r+0x1f0>)
 8007d4e:	a904      	add	r1, sp, #16
 8007d50:	4638      	mov	r0, r7
 8007d52:	f7fe f8af 	bl	8005eb4 <_printf_i>
 8007d56:	e7ed      	b.n	8007d34 <_svfiprintf_r+0x1c0>
 8007d58:	0800871e 	.word	0x0800871e
 8007d5c:	08008728 	.word	0x08008728
 8007d60:	08005985 	.word	0x08005985
 8007d64:	08007abd 	.word	0x08007abd
 8007d68:	08008724 	.word	0x08008724

08007d6c <__sflush_r>:
 8007d6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d74:	0716      	lsls	r6, r2, #28
 8007d76:	4605      	mov	r5, r0
 8007d78:	460c      	mov	r4, r1
 8007d7a:	d454      	bmi.n	8007e26 <__sflush_r+0xba>
 8007d7c:	684b      	ldr	r3, [r1, #4]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	dc02      	bgt.n	8007d88 <__sflush_r+0x1c>
 8007d82:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	dd48      	ble.n	8007e1a <__sflush_r+0xae>
 8007d88:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007d8a:	2e00      	cmp	r6, #0
 8007d8c:	d045      	beq.n	8007e1a <__sflush_r+0xae>
 8007d8e:	2300      	movs	r3, #0
 8007d90:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007d94:	682f      	ldr	r7, [r5, #0]
 8007d96:	6a21      	ldr	r1, [r4, #32]
 8007d98:	602b      	str	r3, [r5, #0]
 8007d9a:	d030      	beq.n	8007dfe <__sflush_r+0x92>
 8007d9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007d9e:	89a3      	ldrh	r3, [r4, #12]
 8007da0:	0759      	lsls	r1, r3, #29
 8007da2:	d505      	bpl.n	8007db0 <__sflush_r+0x44>
 8007da4:	6863      	ldr	r3, [r4, #4]
 8007da6:	1ad2      	subs	r2, r2, r3
 8007da8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007daa:	b10b      	cbz	r3, 8007db0 <__sflush_r+0x44>
 8007dac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007dae:	1ad2      	subs	r2, r2, r3
 8007db0:	2300      	movs	r3, #0
 8007db2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007db4:	6a21      	ldr	r1, [r4, #32]
 8007db6:	4628      	mov	r0, r5
 8007db8:	47b0      	blx	r6
 8007dba:	1c43      	adds	r3, r0, #1
 8007dbc:	89a3      	ldrh	r3, [r4, #12]
 8007dbe:	d106      	bne.n	8007dce <__sflush_r+0x62>
 8007dc0:	6829      	ldr	r1, [r5, #0]
 8007dc2:	291d      	cmp	r1, #29
 8007dc4:	d82b      	bhi.n	8007e1e <__sflush_r+0xb2>
 8007dc6:	4a2a      	ldr	r2, [pc, #168]	@ (8007e70 <__sflush_r+0x104>)
 8007dc8:	40ca      	lsrs	r2, r1
 8007dca:	07d6      	lsls	r6, r2, #31
 8007dcc:	d527      	bpl.n	8007e1e <__sflush_r+0xb2>
 8007dce:	2200      	movs	r2, #0
 8007dd0:	6062      	str	r2, [r4, #4]
 8007dd2:	04d9      	lsls	r1, r3, #19
 8007dd4:	6922      	ldr	r2, [r4, #16]
 8007dd6:	6022      	str	r2, [r4, #0]
 8007dd8:	d504      	bpl.n	8007de4 <__sflush_r+0x78>
 8007dda:	1c42      	adds	r2, r0, #1
 8007ddc:	d101      	bne.n	8007de2 <__sflush_r+0x76>
 8007dde:	682b      	ldr	r3, [r5, #0]
 8007de0:	b903      	cbnz	r3, 8007de4 <__sflush_r+0x78>
 8007de2:	6560      	str	r0, [r4, #84]	@ 0x54
 8007de4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007de6:	602f      	str	r7, [r5, #0]
 8007de8:	b1b9      	cbz	r1, 8007e1a <__sflush_r+0xae>
 8007dea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007dee:	4299      	cmp	r1, r3
 8007df0:	d002      	beq.n	8007df8 <__sflush_r+0x8c>
 8007df2:	4628      	mov	r0, r5
 8007df4:	f7ff f9e8 	bl	80071c8 <_free_r>
 8007df8:	2300      	movs	r3, #0
 8007dfa:	6363      	str	r3, [r4, #52]	@ 0x34
 8007dfc:	e00d      	b.n	8007e1a <__sflush_r+0xae>
 8007dfe:	2301      	movs	r3, #1
 8007e00:	4628      	mov	r0, r5
 8007e02:	47b0      	blx	r6
 8007e04:	4602      	mov	r2, r0
 8007e06:	1c50      	adds	r0, r2, #1
 8007e08:	d1c9      	bne.n	8007d9e <__sflush_r+0x32>
 8007e0a:	682b      	ldr	r3, [r5, #0]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d0c6      	beq.n	8007d9e <__sflush_r+0x32>
 8007e10:	2b1d      	cmp	r3, #29
 8007e12:	d001      	beq.n	8007e18 <__sflush_r+0xac>
 8007e14:	2b16      	cmp	r3, #22
 8007e16:	d11e      	bne.n	8007e56 <__sflush_r+0xea>
 8007e18:	602f      	str	r7, [r5, #0]
 8007e1a:	2000      	movs	r0, #0
 8007e1c:	e022      	b.n	8007e64 <__sflush_r+0xf8>
 8007e1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e22:	b21b      	sxth	r3, r3
 8007e24:	e01b      	b.n	8007e5e <__sflush_r+0xf2>
 8007e26:	690f      	ldr	r7, [r1, #16]
 8007e28:	2f00      	cmp	r7, #0
 8007e2a:	d0f6      	beq.n	8007e1a <__sflush_r+0xae>
 8007e2c:	0793      	lsls	r3, r2, #30
 8007e2e:	680e      	ldr	r6, [r1, #0]
 8007e30:	bf08      	it	eq
 8007e32:	694b      	ldreq	r3, [r1, #20]
 8007e34:	600f      	str	r7, [r1, #0]
 8007e36:	bf18      	it	ne
 8007e38:	2300      	movne	r3, #0
 8007e3a:	eba6 0807 	sub.w	r8, r6, r7
 8007e3e:	608b      	str	r3, [r1, #8]
 8007e40:	f1b8 0f00 	cmp.w	r8, #0
 8007e44:	dde9      	ble.n	8007e1a <__sflush_r+0xae>
 8007e46:	6a21      	ldr	r1, [r4, #32]
 8007e48:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007e4a:	4643      	mov	r3, r8
 8007e4c:	463a      	mov	r2, r7
 8007e4e:	4628      	mov	r0, r5
 8007e50:	47b0      	blx	r6
 8007e52:	2800      	cmp	r0, #0
 8007e54:	dc08      	bgt.n	8007e68 <__sflush_r+0xfc>
 8007e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e5e:	81a3      	strh	r3, [r4, #12]
 8007e60:	f04f 30ff 	mov.w	r0, #4294967295
 8007e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e68:	4407      	add	r7, r0
 8007e6a:	eba8 0800 	sub.w	r8, r8, r0
 8007e6e:	e7e7      	b.n	8007e40 <__sflush_r+0xd4>
 8007e70:	20400001 	.word	0x20400001

08007e74 <_fflush_r>:
 8007e74:	b538      	push	{r3, r4, r5, lr}
 8007e76:	690b      	ldr	r3, [r1, #16]
 8007e78:	4605      	mov	r5, r0
 8007e7a:	460c      	mov	r4, r1
 8007e7c:	b913      	cbnz	r3, 8007e84 <_fflush_r+0x10>
 8007e7e:	2500      	movs	r5, #0
 8007e80:	4628      	mov	r0, r5
 8007e82:	bd38      	pop	{r3, r4, r5, pc}
 8007e84:	b118      	cbz	r0, 8007e8e <_fflush_r+0x1a>
 8007e86:	6a03      	ldr	r3, [r0, #32]
 8007e88:	b90b      	cbnz	r3, 8007e8e <_fflush_r+0x1a>
 8007e8a:	f7fe f9bd 	bl	8006208 <__sinit>
 8007e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d0f3      	beq.n	8007e7e <_fflush_r+0xa>
 8007e96:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007e98:	07d0      	lsls	r0, r2, #31
 8007e9a:	d404      	bmi.n	8007ea6 <_fflush_r+0x32>
 8007e9c:	0599      	lsls	r1, r3, #22
 8007e9e:	d402      	bmi.n	8007ea6 <_fflush_r+0x32>
 8007ea0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ea2:	f7fe fb28 	bl	80064f6 <__retarget_lock_acquire_recursive>
 8007ea6:	4628      	mov	r0, r5
 8007ea8:	4621      	mov	r1, r4
 8007eaa:	f7ff ff5f 	bl	8007d6c <__sflush_r>
 8007eae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007eb0:	07da      	lsls	r2, r3, #31
 8007eb2:	4605      	mov	r5, r0
 8007eb4:	d4e4      	bmi.n	8007e80 <_fflush_r+0xc>
 8007eb6:	89a3      	ldrh	r3, [r4, #12]
 8007eb8:	059b      	lsls	r3, r3, #22
 8007eba:	d4e1      	bmi.n	8007e80 <_fflush_r+0xc>
 8007ebc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ebe:	f7fe fb1b 	bl	80064f8 <__retarget_lock_release_recursive>
 8007ec2:	e7dd      	b.n	8007e80 <_fflush_r+0xc>

08007ec4 <memmove>:
 8007ec4:	4288      	cmp	r0, r1
 8007ec6:	b510      	push	{r4, lr}
 8007ec8:	eb01 0402 	add.w	r4, r1, r2
 8007ecc:	d902      	bls.n	8007ed4 <memmove+0x10>
 8007ece:	4284      	cmp	r4, r0
 8007ed0:	4623      	mov	r3, r4
 8007ed2:	d807      	bhi.n	8007ee4 <memmove+0x20>
 8007ed4:	1e43      	subs	r3, r0, #1
 8007ed6:	42a1      	cmp	r1, r4
 8007ed8:	d008      	beq.n	8007eec <memmove+0x28>
 8007eda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ede:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ee2:	e7f8      	b.n	8007ed6 <memmove+0x12>
 8007ee4:	4402      	add	r2, r0
 8007ee6:	4601      	mov	r1, r0
 8007ee8:	428a      	cmp	r2, r1
 8007eea:	d100      	bne.n	8007eee <memmove+0x2a>
 8007eec:	bd10      	pop	{r4, pc}
 8007eee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ef2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ef6:	e7f7      	b.n	8007ee8 <memmove+0x24>

08007ef8 <_sbrk_r>:
 8007ef8:	b538      	push	{r3, r4, r5, lr}
 8007efa:	4d06      	ldr	r5, [pc, #24]	@ (8007f14 <_sbrk_r+0x1c>)
 8007efc:	2300      	movs	r3, #0
 8007efe:	4604      	mov	r4, r0
 8007f00:	4608      	mov	r0, r1
 8007f02:	602b      	str	r3, [r5, #0]
 8007f04:	f7f9 fd98 	bl	8001a38 <_sbrk>
 8007f08:	1c43      	adds	r3, r0, #1
 8007f0a:	d102      	bne.n	8007f12 <_sbrk_r+0x1a>
 8007f0c:	682b      	ldr	r3, [r5, #0]
 8007f0e:	b103      	cbz	r3, 8007f12 <_sbrk_r+0x1a>
 8007f10:	6023      	str	r3, [r4, #0]
 8007f12:	bd38      	pop	{r3, r4, r5, pc}
 8007f14:	200043d4 	.word	0x200043d4

08007f18 <__assert_func>:
 8007f18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f1a:	4614      	mov	r4, r2
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	4b09      	ldr	r3, [pc, #36]	@ (8007f44 <__assert_func+0x2c>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4605      	mov	r5, r0
 8007f24:	68d8      	ldr	r0, [r3, #12]
 8007f26:	b14c      	cbz	r4, 8007f3c <__assert_func+0x24>
 8007f28:	4b07      	ldr	r3, [pc, #28]	@ (8007f48 <__assert_func+0x30>)
 8007f2a:	9100      	str	r1, [sp, #0]
 8007f2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f30:	4906      	ldr	r1, [pc, #24]	@ (8007f4c <__assert_func+0x34>)
 8007f32:	462b      	mov	r3, r5
 8007f34:	f000 f870 	bl	8008018 <fiprintf>
 8007f38:	f000 f880 	bl	800803c <abort>
 8007f3c:	4b04      	ldr	r3, [pc, #16]	@ (8007f50 <__assert_func+0x38>)
 8007f3e:	461c      	mov	r4, r3
 8007f40:	e7f3      	b.n	8007f2a <__assert_func+0x12>
 8007f42:	bf00      	nop
 8007f44:	2000001c 	.word	0x2000001c
 8007f48:	08008739 	.word	0x08008739
 8007f4c:	08008746 	.word	0x08008746
 8007f50:	08008774 	.word	0x08008774

08007f54 <_calloc_r>:
 8007f54:	b570      	push	{r4, r5, r6, lr}
 8007f56:	fba1 5402 	umull	r5, r4, r1, r2
 8007f5a:	b934      	cbnz	r4, 8007f6a <_calloc_r+0x16>
 8007f5c:	4629      	mov	r1, r5
 8007f5e:	f7ff f9a7 	bl	80072b0 <_malloc_r>
 8007f62:	4606      	mov	r6, r0
 8007f64:	b928      	cbnz	r0, 8007f72 <_calloc_r+0x1e>
 8007f66:	4630      	mov	r0, r6
 8007f68:	bd70      	pop	{r4, r5, r6, pc}
 8007f6a:	220c      	movs	r2, #12
 8007f6c:	6002      	str	r2, [r0, #0]
 8007f6e:	2600      	movs	r6, #0
 8007f70:	e7f9      	b.n	8007f66 <_calloc_r+0x12>
 8007f72:	462a      	mov	r2, r5
 8007f74:	4621      	mov	r1, r4
 8007f76:	f7fe f9e2 	bl	800633e <memset>
 8007f7a:	e7f4      	b.n	8007f66 <_calloc_r+0x12>

08007f7c <__ascii_mbtowc>:
 8007f7c:	b082      	sub	sp, #8
 8007f7e:	b901      	cbnz	r1, 8007f82 <__ascii_mbtowc+0x6>
 8007f80:	a901      	add	r1, sp, #4
 8007f82:	b142      	cbz	r2, 8007f96 <__ascii_mbtowc+0x1a>
 8007f84:	b14b      	cbz	r3, 8007f9a <__ascii_mbtowc+0x1e>
 8007f86:	7813      	ldrb	r3, [r2, #0]
 8007f88:	600b      	str	r3, [r1, #0]
 8007f8a:	7812      	ldrb	r2, [r2, #0]
 8007f8c:	1e10      	subs	r0, r2, #0
 8007f8e:	bf18      	it	ne
 8007f90:	2001      	movne	r0, #1
 8007f92:	b002      	add	sp, #8
 8007f94:	4770      	bx	lr
 8007f96:	4610      	mov	r0, r2
 8007f98:	e7fb      	b.n	8007f92 <__ascii_mbtowc+0x16>
 8007f9a:	f06f 0001 	mvn.w	r0, #1
 8007f9e:	e7f8      	b.n	8007f92 <__ascii_mbtowc+0x16>

08007fa0 <_realloc_r>:
 8007fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fa4:	4607      	mov	r7, r0
 8007fa6:	4614      	mov	r4, r2
 8007fa8:	460d      	mov	r5, r1
 8007faa:	b921      	cbnz	r1, 8007fb6 <_realloc_r+0x16>
 8007fac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fb0:	4611      	mov	r1, r2
 8007fb2:	f7ff b97d 	b.w	80072b0 <_malloc_r>
 8007fb6:	b92a      	cbnz	r2, 8007fc4 <_realloc_r+0x24>
 8007fb8:	f7ff f906 	bl	80071c8 <_free_r>
 8007fbc:	4625      	mov	r5, r4
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fc4:	f000 f841 	bl	800804a <_malloc_usable_size_r>
 8007fc8:	4284      	cmp	r4, r0
 8007fca:	4606      	mov	r6, r0
 8007fcc:	d802      	bhi.n	8007fd4 <_realloc_r+0x34>
 8007fce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007fd2:	d8f4      	bhi.n	8007fbe <_realloc_r+0x1e>
 8007fd4:	4621      	mov	r1, r4
 8007fd6:	4638      	mov	r0, r7
 8007fd8:	f7ff f96a 	bl	80072b0 <_malloc_r>
 8007fdc:	4680      	mov	r8, r0
 8007fde:	b908      	cbnz	r0, 8007fe4 <_realloc_r+0x44>
 8007fe0:	4645      	mov	r5, r8
 8007fe2:	e7ec      	b.n	8007fbe <_realloc_r+0x1e>
 8007fe4:	42b4      	cmp	r4, r6
 8007fe6:	4622      	mov	r2, r4
 8007fe8:	4629      	mov	r1, r5
 8007fea:	bf28      	it	cs
 8007fec:	4632      	movcs	r2, r6
 8007fee:	f7fe fa84 	bl	80064fa <memcpy>
 8007ff2:	4629      	mov	r1, r5
 8007ff4:	4638      	mov	r0, r7
 8007ff6:	f7ff f8e7 	bl	80071c8 <_free_r>
 8007ffa:	e7f1      	b.n	8007fe0 <_realloc_r+0x40>

08007ffc <__ascii_wctomb>:
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	4608      	mov	r0, r1
 8008000:	b141      	cbz	r1, 8008014 <__ascii_wctomb+0x18>
 8008002:	2aff      	cmp	r2, #255	@ 0xff
 8008004:	d904      	bls.n	8008010 <__ascii_wctomb+0x14>
 8008006:	228a      	movs	r2, #138	@ 0x8a
 8008008:	601a      	str	r2, [r3, #0]
 800800a:	f04f 30ff 	mov.w	r0, #4294967295
 800800e:	4770      	bx	lr
 8008010:	700a      	strb	r2, [r1, #0]
 8008012:	2001      	movs	r0, #1
 8008014:	4770      	bx	lr
	...

08008018 <fiprintf>:
 8008018:	b40e      	push	{r1, r2, r3}
 800801a:	b503      	push	{r0, r1, lr}
 800801c:	4601      	mov	r1, r0
 800801e:	ab03      	add	r3, sp, #12
 8008020:	4805      	ldr	r0, [pc, #20]	@ (8008038 <fiprintf+0x20>)
 8008022:	f853 2b04 	ldr.w	r2, [r3], #4
 8008026:	6800      	ldr	r0, [r0, #0]
 8008028:	9301      	str	r3, [sp, #4]
 800802a:	f000 f83f 	bl	80080ac <_vfiprintf_r>
 800802e:	b002      	add	sp, #8
 8008030:	f85d eb04 	ldr.w	lr, [sp], #4
 8008034:	b003      	add	sp, #12
 8008036:	4770      	bx	lr
 8008038:	2000001c 	.word	0x2000001c

0800803c <abort>:
 800803c:	b508      	push	{r3, lr}
 800803e:	2006      	movs	r0, #6
 8008040:	f000 fa08 	bl	8008454 <raise>
 8008044:	2001      	movs	r0, #1
 8008046:	f7f9 fc7f 	bl	8001948 <_exit>

0800804a <_malloc_usable_size_r>:
 800804a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800804e:	1f18      	subs	r0, r3, #4
 8008050:	2b00      	cmp	r3, #0
 8008052:	bfbc      	itt	lt
 8008054:	580b      	ldrlt	r3, [r1, r0]
 8008056:	18c0      	addlt	r0, r0, r3
 8008058:	4770      	bx	lr

0800805a <__sfputc_r>:
 800805a:	6893      	ldr	r3, [r2, #8]
 800805c:	3b01      	subs	r3, #1
 800805e:	2b00      	cmp	r3, #0
 8008060:	b410      	push	{r4}
 8008062:	6093      	str	r3, [r2, #8]
 8008064:	da08      	bge.n	8008078 <__sfputc_r+0x1e>
 8008066:	6994      	ldr	r4, [r2, #24]
 8008068:	42a3      	cmp	r3, r4
 800806a:	db01      	blt.n	8008070 <__sfputc_r+0x16>
 800806c:	290a      	cmp	r1, #10
 800806e:	d103      	bne.n	8008078 <__sfputc_r+0x1e>
 8008070:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008074:	f000 b932 	b.w	80082dc <__swbuf_r>
 8008078:	6813      	ldr	r3, [r2, #0]
 800807a:	1c58      	adds	r0, r3, #1
 800807c:	6010      	str	r0, [r2, #0]
 800807e:	7019      	strb	r1, [r3, #0]
 8008080:	4608      	mov	r0, r1
 8008082:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008086:	4770      	bx	lr

08008088 <__sfputs_r>:
 8008088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800808a:	4606      	mov	r6, r0
 800808c:	460f      	mov	r7, r1
 800808e:	4614      	mov	r4, r2
 8008090:	18d5      	adds	r5, r2, r3
 8008092:	42ac      	cmp	r4, r5
 8008094:	d101      	bne.n	800809a <__sfputs_r+0x12>
 8008096:	2000      	movs	r0, #0
 8008098:	e007      	b.n	80080aa <__sfputs_r+0x22>
 800809a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800809e:	463a      	mov	r2, r7
 80080a0:	4630      	mov	r0, r6
 80080a2:	f7ff ffda 	bl	800805a <__sfputc_r>
 80080a6:	1c43      	adds	r3, r0, #1
 80080a8:	d1f3      	bne.n	8008092 <__sfputs_r+0xa>
 80080aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080080ac <_vfiprintf_r>:
 80080ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b0:	460d      	mov	r5, r1
 80080b2:	b09d      	sub	sp, #116	@ 0x74
 80080b4:	4614      	mov	r4, r2
 80080b6:	4698      	mov	r8, r3
 80080b8:	4606      	mov	r6, r0
 80080ba:	b118      	cbz	r0, 80080c4 <_vfiprintf_r+0x18>
 80080bc:	6a03      	ldr	r3, [r0, #32]
 80080be:	b90b      	cbnz	r3, 80080c4 <_vfiprintf_r+0x18>
 80080c0:	f7fe f8a2 	bl	8006208 <__sinit>
 80080c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80080c6:	07d9      	lsls	r1, r3, #31
 80080c8:	d405      	bmi.n	80080d6 <_vfiprintf_r+0x2a>
 80080ca:	89ab      	ldrh	r3, [r5, #12]
 80080cc:	059a      	lsls	r2, r3, #22
 80080ce:	d402      	bmi.n	80080d6 <_vfiprintf_r+0x2a>
 80080d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80080d2:	f7fe fa10 	bl	80064f6 <__retarget_lock_acquire_recursive>
 80080d6:	89ab      	ldrh	r3, [r5, #12]
 80080d8:	071b      	lsls	r3, r3, #28
 80080da:	d501      	bpl.n	80080e0 <_vfiprintf_r+0x34>
 80080dc:	692b      	ldr	r3, [r5, #16]
 80080de:	b99b      	cbnz	r3, 8008108 <_vfiprintf_r+0x5c>
 80080e0:	4629      	mov	r1, r5
 80080e2:	4630      	mov	r0, r6
 80080e4:	f000 f938 	bl	8008358 <__swsetup_r>
 80080e8:	b170      	cbz	r0, 8008108 <_vfiprintf_r+0x5c>
 80080ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80080ec:	07dc      	lsls	r4, r3, #31
 80080ee:	d504      	bpl.n	80080fa <_vfiprintf_r+0x4e>
 80080f0:	f04f 30ff 	mov.w	r0, #4294967295
 80080f4:	b01d      	add	sp, #116	@ 0x74
 80080f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080fa:	89ab      	ldrh	r3, [r5, #12]
 80080fc:	0598      	lsls	r0, r3, #22
 80080fe:	d4f7      	bmi.n	80080f0 <_vfiprintf_r+0x44>
 8008100:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008102:	f7fe f9f9 	bl	80064f8 <__retarget_lock_release_recursive>
 8008106:	e7f3      	b.n	80080f0 <_vfiprintf_r+0x44>
 8008108:	2300      	movs	r3, #0
 800810a:	9309      	str	r3, [sp, #36]	@ 0x24
 800810c:	2320      	movs	r3, #32
 800810e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008112:	f8cd 800c 	str.w	r8, [sp, #12]
 8008116:	2330      	movs	r3, #48	@ 0x30
 8008118:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80082c8 <_vfiprintf_r+0x21c>
 800811c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008120:	f04f 0901 	mov.w	r9, #1
 8008124:	4623      	mov	r3, r4
 8008126:	469a      	mov	sl, r3
 8008128:	f813 2b01 	ldrb.w	r2, [r3], #1
 800812c:	b10a      	cbz	r2, 8008132 <_vfiprintf_r+0x86>
 800812e:	2a25      	cmp	r2, #37	@ 0x25
 8008130:	d1f9      	bne.n	8008126 <_vfiprintf_r+0x7a>
 8008132:	ebba 0b04 	subs.w	fp, sl, r4
 8008136:	d00b      	beq.n	8008150 <_vfiprintf_r+0xa4>
 8008138:	465b      	mov	r3, fp
 800813a:	4622      	mov	r2, r4
 800813c:	4629      	mov	r1, r5
 800813e:	4630      	mov	r0, r6
 8008140:	f7ff ffa2 	bl	8008088 <__sfputs_r>
 8008144:	3001      	adds	r0, #1
 8008146:	f000 80a7 	beq.w	8008298 <_vfiprintf_r+0x1ec>
 800814a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800814c:	445a      	add	r2, fp
 800814e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008150:	f89a 3000 	ldrb.w	r3, [sl]
 8008154:	2b00      	cmp	r3, #0
 8008156:	f000 809f 	beq.w	8008298 <_vfiprintf_r+0x1ec>
 800815a:	2300      	movs	r3, #0
 800815c:	f04f 32ff 	mov.w	r2, #4294967295
 8008160:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008164:	f10a 0a01 	add.w	sl, sl, #1
 8008168:	9304      	str	r3, [sp, #16]
 800816a:	9307      	str	r3, [sp, #28]
 800816c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008170:	931a      	str	r3, [sp, #104]	@ 0x68
 8008172:	4654      	mov	r4, sl
 8008174:	2205      	movs	r2, #5
 8008176:	f814 1b01 	ldrb.w	r1, [r4], #1
 800817a:	4853      	ldr	r0, [pc, #332]	@ (80082c8 <_vfiprintf_r+0x21c>)
 800817c:	f7f8 f828 	bl	80001d0 <memchr>
 8008180:	9a04      	ldr	r2, [sp, #16]
 8008182:	b9d8      	cbnz	r0, 80081bc <_vfiprintf_r+0x110>
 8008184:	06d1      	lsls	r1, r2, #27
 8008186:	bf44      	itt	mi
 8008188:	2320      	movmi	r3, #32
 800818a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800818e:	0713      	lsls	r3, r2, #28
 8008190:	bf44      	itt	mi
 8008192:	232b      	movmi	r3, #43	@ 0x2b
 8008194:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008198:	f89a 3000 	ldrb.w	r3, [sl]
 800819c:	2b2a      	cmp	r3, #42	@ 0x2a
 800819e:	d015      	beq.n	80081cc <_vfiprintf_r+0x120>
 80081a0:	9a07      	ldr	r2, [sp, #28]
 80081a2:	4654      	mov	r4, sl
 80081a4:	2000      	movs	r0, #0
 80081a6:	f04f 0c0a 	mov.w	ip, #10
 80081aa:	4621      	mov	r1, r4
 80081ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081b0:	3b30      	subs	r3, #48	@ 0x30
 80081b2:	2b09      	cmp	r3, #9
 80081b4:	d94b      	bls.n	800824e <_vfiprintf_r+0x1a2>
 80081b6:	b1b0      	cbz	r0, 80081e6 <_vfiprintf_r+0x13a>
 80081b8:	9207      	str	r2, [sp, #28]
 80081ba:	e014      	b.n	80081e6 <_vfiprintf_r+0x13a>
 80081bc:	eba0 0308 	sub.w	r3, r0, r8
 80081c0:	fa09 f303 	lsl.w	r3, r9, r3
 80081c4:	4313      	orrs	r3, r2
 80081c6:	9304      	str	r3, [sp, #16]
 80081c8:	46a2      	mov	sl, r4
 80081ca:	e7d2      	b.n	8008172 <_vfiprintf_r+0xc6>
 80081cc:	9b03      	ldr	r3, [sp, #12]
 80081ce:	1d19      	adds	r1, r3, #4
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	9103      	str	r1, [sp, #12]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	bfbb      	ittet	lt
 80081d8:	425b      	neglt	r3, r3
 80081da:	f042 0202 	orrlt.w	r2, r2, #2
 80081de:	9307      	strge	r3, [sp, #28]
 80081e0:	9307      	strlt	r3, [sp, #28]
 80081e2:	bfb8      	it	lt
 80081e4:	9204      	strlt	r2, [sp, #16]
 80081e6:	7823      	ldrb	r3, [r4, #0]
 80081e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80081ea:	d10a      	bne.n	8008202 <_vfiprintf_r+0x156>
 80081ec:	7863      	ldrb	r3, [r4, #1]
 80081ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80081f0:	d132      	bne.n	8008258 <_vfiprintf_r+0x1ac>
 80081f2:	9b03      	ldr	r3, [sp, #12]
 80081f4:	1d1a      	adds	r2, r3, #4
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	9203      	str	r2, [sp, #12]
 80081fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80081fe:	3402      	adds	r4, #2
 8008200:	9305      	str	r3, [sp, #20]
 8008202:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80082d8 <_vfiprintf_r+0x22c>
 8008206:	7821      	ldrb	r1, [r4, #0]
 8008208:	2203      	movs	r2, #3
 800820a:	4650      	mov	r0, sl
 800820c:	f7f7 ffe0 	bl	80001d0 <memchr>
 8008210:	b138      	cbz	r0, 8008222 <_vfiprintf_r+0x176>
 8008212:	9b04      	ldr	r3, [sp, #16]
 8008214:	eba0 000a 	sub.w	r0, r0, sl
 8008218:	2240      	movs	r2, #64	@ 0x40
 800821a:	4082      	lsls	r2, r0
 800821c:	4313      	orrs	r3, r2
 800821e:	3401      	adds	r4, #1
 8008220:	9304      	str	r3, [sp, #16]
 8008222:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008226:	4829      	ldr	r0, [pc, #164]	@ (80082cc <_vfiprintf_r+0x220>)
 8008228:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800822c:	2206      	movs	r2, #6
 800822e:	f7f7 ffcf 	bl	80001d0 <memchr>
 8008232:	2800      	cmp	r0, #0
 8008234:	d03f      	beq.n	80082b6 <_vfiprintf_r+0x20a>
 8008236:	4b26      	ldr	r3, [pc, #152]	@ (80082d0 <_vfiprintf_r+0x224>)
 8008238:	bb1b      	cbnz	r3, 8008282 <_vfiprintf_r+0x1d6>
 800823a:	9b03      	ldr	r3, [sp, #12]
 800823c:	3307      	adds	r3, #7
 800823e:	f023 0307 	bic.w	r3, r3, #7
 8008242:	3308      	adds	r3, #8
 8008244:	9303      	str	r3, [sp, #12]
 8008246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008248:	443b      	add	r3, r7
 800824a:	9309      	str	r3, [sp, #36]	@ 0x24
 800824c:	e76a      	b.n	8008124 <_vfiprintf_r+0x78>
 800824e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008252:	460c      	mov	r4, r1
 8008254:	2001      	movs	r0, #1
 8008256:	e7a8      	b.n	80081aa <_vfiprintf_r+0xfe>
 8008258:	2300      	movs	r3, #0
 800825a:	3401      	adds	r4, #1
 800825c:	9305      	str	r3, [sp, #20]
 800825e:	4619      	mov	r1, r3
 8008260:	f04f 0c0a 	mov.w	ip, #10
 8008264:	4620      	mov	r0, r4
 8008266:	f810 2b01 	ldrb.w	r2, [r0], #1
 800826a:	3a30      	subs	r2, #48	@ 0x30
 800826c:	2a09      	cmp	r2, #9
 800826e:	d903      	bls.n	8008278 <_vfiprintf_r+0x1cc>
 8008270:	2b00      	cmp	r3, #0
 8008272:	d0c6      	beq.n	8008202 <_vfiprintf_r+0x156>
 8008274:	9105      	str	r1, [sp, #20]
 8008276:	e7c4      	b.n	8008202 <_vfiprintf_r+0x156>
 8008278:	fb0c 2101 	mla	r1, ip, r1, r2
 800827c:	4604      	mov	r4, r0
 800827e:	2301      	movs	r3, #1
 8008280:	e7f0      	b.n	8008264 <_vfiprintf_r+0x1b8>
 8008282:	ab03      	add	r3, sp, #12
 8008284:	9300      	str	r3, [sp, #0]
 8008286:	462a      	mov	r2, r5
 8008288:	4b12      	ldr	r3, [pc, #72]	@ (80082d4 <_vfiprintf_r+0x228>)
 800828a:	a904      	add	r1, sp, #16
 800828c:	4630      	mov	r0, r6
 800828e:	f7fd fb79 	bl	8005984 <_printf_float>
 8008292:	4607      	mov	r7, r0
 8008294:	1c78      	adds	r0, r7, #1
 8008296:	d1d6      	bne.n	8008246 <_vfiprintf_r+0x19a>
 8008298:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800829a:	07d9      	lsls	r1, r3, #31
 800829c:	d405      	bmi.n	80082aa <_vfiprintf_r+0x1fe>
 800829e:	89ab      	ldrh	r3, [r5, #12]
 80082a0:	059a      	lsls	r2, r3, #22
 80082a2:	d402      	bmi.n	80082aa <_vfiprintf_r+0x1fe>
 80082a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80082a6:	f7fe f927 	bl	80064f8 <__retarget_lock_release_recursive>
 80082aa:	89ab      	ldrh	r3, [r5, #12]
 80082ac:	065b      	lsls	r3, r3, #25
 80082ae:	f53f af1f 	bmi.w	80080f0 <_vfiprintf_r+0x44>
 80082b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80082b4:	e71e      	b.n	80080f4 <_vfiprintf_r+0x48>
 80082b6:	ab03      	add	r3, sp, #12
 80082b8:	9300      	str	r3, [sp, #0]
 80082ba:	462a      	mov	r2, r5
 80082bc:	4b05      	ldr	r3, [pc, #20]	@ (80082d4 <_vfiprintf_r+0x228>)
 80082be:	a904      	add	r1, sp, #16
 80082c0:	4630      	mov	r0, r6
 80082c2:	f7fd fdf7 	bl	8005eb4 <_printf_i>
 80082c6:	e7e4      	b.n	8008292 <_vfiprintf_r+0x1e6>
 80082c8:	0800871e 	.word	0x0800871e
 80082cc:	08008728 	.word	0x08008728
 80082d0:	08005985 	.word	0x08005985
 80082d4:	08008089 	.word	0x08008089
 80082d8:	08008724 	.word	0x08008724

080082dc <__swbuf_r>:
 80082dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082de:	460e      	mov	r6, r1
 80082e0:	4614      	mov	r4, r2
 80082e2:	4605      	mov	r5, r0
 80082e4:	b118      	cbz	r0, 80082ee <__swbuf_r+0x12>
 80082e6:	6a03      	ldr	r3, [r0, #32]
 80082e8:	b90b      	cbnz	r3, 80082ee <__swbuf_r+0x12>
 80082ea:	f7fd ff8d 	bl	8006208 <__sinit>
 80082ee:	69a3      	ldr	r3, [r4, #24]
 80082f0:	60a3      	str	r3, [r4, #8]
 80082f2:	89a3      	ldrh	r3, [r4, #12]
 80082f4:	071a      	lsls	r2, r3, #28
 80082f6:	d501      	bpl.n	80082fc <__swbuf_r+0x20>
 80082f8:	6923      	ldr	r3, [r4, #16]
 80082fa:	b943      	cbnz	r3, 800830e <__swbuf_r+0x32>
 80082fc:	4621      	mov	r1, r4
 80082fe:	4628      	mov	r0, r5
 8008300:	f000 f82a 	bl	8008358 <__swsetup_r>
 8008304:	b118      	cbz	r0, 800830e <__swbuf_r+0x32>
 8008306:	f04f 37ff 	mov.w	r7, #4294967295
 800830a:	4638      	mov	r0, r7
 800830c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800830e:	6823      	ldr	r3, [r4, #0]
 8008310:	6922      	ldr	r2, [r4, #16]
 8008312:	1a98      	subs	r0, r3, r2
 8008314:	6963      	ldr	r3, [r4, #20]
 8008316:	b2f6      	uxtb	r6, r6
 8008318:	4283      	cmp	r3, r0
 800831a:	4637      	mov	r7, r6
 800831c:	dc05      	bgt.n	800832a <__swbuf_r+0x4e>
 800831e:	4621      	mov	r1, r4
 8008320:	4628      	mov	r0, r5
 8008322:	f7ff fda7 	bl	8007e74 <_fflush_r>
 8008326:	2800      	cmp	r0, #0
 8008328:	d1ed      	bne.n	8008306 <__swbuf_r+0x2a>
 800832a:	68a3      	ldr	r3, [r4, #8]
 800832c:	3b01      	subs	r3, #1
 800832e:	60a3      	str	r3, [r4, #8]
 8008330:	6823      	ldr	r3, [r4, #0]
 8008332:	1c5a      	adds	r2, r3, #1
 8008334:	6022      	str	r2, [r4, #0]
 8008336:	701e      	strb	r6, [r3, #0]
 8008338:	6962      	ldr	r2, [r4, #20]
 800833a:	1c43      	adds	r3, r0, #1
 800833c:	429a      	cmp	r2, r3
 800833e:	d004      	beq.n	800834a <__swbuf_r+0x6e>
 8008340:	89a3      	ldrh	r3, [r4, #12]
 8008342:	07db      	lsls	r3, r3, #31
 8008344:	d5e1      	bpl.n	800830a <__swbuf_r+0x2e>
 8008346:	2e0a      	cmp	r6, #10
 8008348:	d1df      	bne.n	800830a <__swbuf_r+0x2e>
 800834a:	4621      	mov	r1, r4
 800834c:	4628      	mov	r0, r5
 800834e:	f7ff fd91 	bl	8007e74 <_fflush_r>
 8008352:	2800      	cmp	r0, #0
 8008354:	d0d9      	beq.n	800830a <__swbuf_r+0x2e>
 8008356:	e7d6      	b.n	8008306 <__swbuf_r+0x2a>

08008358 <__swsetup_r>:
 8008358:	b538      	push	{r3, r4, r5, lr}
 800835a:	4b29      	ldr	r3, [pc, #164]	@ (8008400 <__swsetup_r+0xa8>)
 800835c:	4605      	mov	r5, r0
 800835e:	6818      	ldr	r0, [r3, #0]
 8008360:	460c      	mov	r4, r1
 8008362:	b118      	cbz	r0, 800836c <__swsetup_r+0x14>
 8008364:	6a03      	ldr	r3, [r0, #32]
 8008366:	b90b      	cbnz	r3, 800836c <__swsetup_r+0x14>
 8008368:	f7fd ff4e 	bl	8006208 <__sinit>
 800836c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008370:	0719      	lsls	r1, r3, #28
 8008372:	d422      	bmi.n	80083ba <__swsetup_r+0x62>
 8008374:	06da      	lsls	r2, r3, #27
 8008376:	d407      	bmi.n	8008388 <__swsetup_r+0x30>
 8008378:	2209      	movs	r2, #9
 800837a:	602a      	str	r2, [r5, #0]
 800837c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008380:	81a3      	strh	r3, [r4, #12]
 8008382:	f04f 30ff 	mov.w	r0, #4294967295
 8008386:	e033      	b.n	80083f0 <__swsetup_r+0x98>
 8008388:	0758      	lsls	r0, r3, #29
 800838a:	d512      	bpl.n	80083b2 <__swsetup_r+0x5a>
 800838c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800838e:	b141      	cbz	r1, 80083a2 <__swsetup_r+0x4a>
 8008390:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008394:	4299      	cmp	r1, r3
 8008396:	d002      	beq.n	800839e <__swsetup_r+0x46>
 8008398:	4628      	mov	r0, r5
 800839a:	f7fe ff15 	bl	80071c8 <_free_r>
 800839e:	2300      	movs	r3, #0
 80083a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80083a2:	89a3      	ldrh	r3, [r4, #12]
 80083a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80083a8:	81a3      	strh	r3, [r4, #12]
 80083aa:	2300      	movs	r3, #0
 80083ac:	6063      	str	r3, [r4, #4]
 80083ae:	6923      	ldr	r3, [r4, #16]
 80083b0:	6023      	str	r3, [r4, #0]
 80083b2:	89a3      	ldrh	r3, [r4, #12]
 80083b4:	f043 0308 	orr.w	r3, r3, #8
 80083b8:	81a3      	strh	r3, [r4, #12]
 80083ba:	6923      	ldr	r3, [r4, #16]
 80083bc:	b94b      	cbnz	r3, 80083d2 <__swsetup_r+0x7a>
 80083be:	89a3      	ldrh	r3, [r4, #12]
 80083c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80083c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083c8:	d003      	beq.n	80083d2 <__swsetup_r+0x7a>
 80083ca:	4621      	mov	r1, r4
 80083cc:	4628      	mov	r0, r5
 80083ce:	f000 f883 	bl	80084d8 <__smakebuf_r>
 80083d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083d6:	f013 0201 	ands.w	r2, r3, #1
 80083da:	d00a      	beq.n	80083f2 <__swsetup_r+0x9a>
 80083dc:	2200      	movs	r2, #0
 80083de:	60a2      	str	r2, [r4, #8]
 80083e0:	6962      	ldr	r2, [r4, #20]
 80083e2:	4252      	negs	r2, r2
 80083e4:	61a2      	str	r2, [r4, #24]
 80083e6:	6922      	ldr	r2, [r4, #16]
 80083e8:	b942      	cbnz	r2, 80083fc <__swsetup_r+0xa4>
 80083ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80083ee:	d1c5      	bne.n	800837c <__swsetup_r+0x24>
 80083f0:	bd38      	pop	{r3, r4, r5, pc}
 80083f2:	0799      	lsls	r1, r3, #30
 80083f4:	bf58      	it	pl
 80083f6:	6962      	ldrpl	r2, [r4, #20]
 80083f8:	60a2      	str	r2, [r4, #8]
 80083fa:	e7f4      	b.n	80083e6 <__swsetup_r+0x8e>
 80083fc:	2000      	movs	r0, #0
 80083fe:	e7f7      	b.n	80083f0 <__swsetup_r+0x98>
 8008400:	2000001c 	.word	0x2000001c

08008404 <_raise_r>:
 8008404:	291f      	cmp	r1, #31
 8008406:	b538      	push	{r3, r4, r5, lr}
 8008408:	4605      	mov	r5, r0
 800840a:	460c      	mov	r4, r1
 800840c:	d904      	bls.n	8008418 <_raise_r+0x14>
 800840e:	2316      	movs	r3, #22
 8008410:	6003      	str	r3, [r0, #0]
 8008412:	f04f 30ff 	mov.w	r0, #4294967295
 8008416:	bd38      	pop	{r3, r4, r5, pc}
 8008418:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800841a:	b112      	cbz	r2, 8008422 <_raise_r+0x1e>
 800841c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008420:	b94b      	cbnz	r3, 8008436 <_raise_r+0x32>
 8008422:	4628      	mov	r0, r5
 8008424:	f000 f830 	bl	8008488 <_getpid_r>
 8008428:	4622      	mov	r2, r4
 800842a:	4601      	mov	r1, r0
 800842c:	4628      	mov	r0, r5
 800842e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008432:	f000 b817 	b.w	8008464 <_kill_r>
 8008436:	2b01      	cmp	r3, #1
 8008438:	d00a      	beq.n	8008450 <_raise_r+0x4c>
 800843a:	1c59      	adds	r1, r3, #1
 800843c:	d103      	bne.n	8008446 <_raise_r+0x42>
 800843e:	2316      	movs	r3, #22
 8008440:	6003      	str	r3, [r0, #0]
 8008442:	2001      	movs	r0, #1
 8008444:	e7e7      	b.n	8008416 <_raise_r+0x12>
 8008446:	2100      	movs	r1, #0
 8008448:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800844c:	4620      	mov	r0, r4
 800844e:	4798      	blx	r3
 8008450:	2000      	movs	r0, #0
 8008452:	e7e0      	b.n	8008416 <_raise_r+0x12>

08008454 <raise>:
 8008454:	4b02      	ldr	r3, [pc, #8]	@ (8008460 <raise+0xc>)
 8008456:	4601      	mov	r1, r0
 8008458:	6818      	ldr	r0, [r3, #0]
 800845a:	f7ff bfd3 	b.w	8008404 <_raise_r>
 800845e:	bf00      	nop
 8008460:	2000001c 	.word	0x2000001c

08008464 <_kill_r>:
 8008464:	b538      	push	{r3, r4, r5, lr}
 8008466:	4d07      	ldr	r5, [pc, #28]	@ (8008484 <_kill_r+0x20>)
 8008468:	2300      	movs	r3, #0
 800846a:	4604      	mov	r4, r0
 800846c:	4608      	mov	r0, r1
 800846e:	4611      	mov	r1, r2
 8008470:	602b      	str	r3, [r5, #0]
 8008472:	f7f9 fa59 	bl	8001928 <_kill>
 8008476:	1c43      	adds	r3, r0, #1
 8008478:	d102      	bne.n	8008480 <_kill_r+0x1c>
 800847a:	682b      	ldr	r3, [r5, #0]
 800847c:	b103      	cbz	r3, 8008480 <_kill_r+0x1c>
 800847e:	6023      	str	r3, [r4, #0]
 8008480:	bd38      	pop	{r3, r4, r5, pc}
 8008482:	bf00      	nop
 8008484:	200043d4 	.word	0x200043d4

08008488 <_getpid_r>:
 8008488:	f7f9 ba46 	b.w	8001918 <_getpid>

0800848c <__swhatbuf_r>:
 800848c:	b570      	push	{r4, r5, r6, lr}
 800848e:	460c      	mov	r4, r1
 8008490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008494:	2900      	cmp	r1, #0
 8008496:	b096      	sub	sp, #88	@ 0x58
 8008498:	4615      	mov	r5, r2
 800849a:	461e      	mov	r6, r3
 800849c:	da0d      	bge.n	80084ba <__swhatbuf_r+0x2e>
 800849e:	89a3      	ldrh	r3, [r4, #12]
 80084a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80084a4:	f04f 0100 	mov.w	r1, #0
 80084a8:	bf14      	ite	ne
 80084aa:	2340      	movne	r3, #64	@ 0x40
 80084ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80084b0:	2000      	movs	r0, #0
 80084b2:	6031      	str	r1, [r6, #0]
 80084b4:	602b      	str	r3, [r5, #0]
 80084b6:	b016      	add	sp, #88	@ 0x58
 80084b8:	bd70      	pop	{r4, r5, r6, pc}
 80084ba:	466a      	mov	r2, sp
 80084bc:	f000 f848 	bl	8008550 <_fstat_r>
 80084c0:	2800      	cmp	r0, #0
 80084c2:	dbec      	blt.n	800849e <__swhatbuf_r+0x12>
 80084c4:	9901      	ldr	r1, [sp, #4]
 80084c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80084ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80084ce:	4259      	negs	r1, r3
 80084d0:	4159      	adcs	r1, r3
 80084d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80084d6:	e7eb      	b.n	80084b0 <__swhatbuf_r+0x24>

080084d8 <__smakebuf_r>:
 80084d8:	898b      	ldrh	r3, [r1, #12]
 80084da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084dc:	079d      	lsls	r5, r3, #30
 80084de:	4606      	mov	r6, r0
 80084e0:	460c      	mov	r4, r1
 80084e2:	d507      	bpl.n	80084f4 <__smakebuf_r+0x1c>
 80084e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80084e8:	6023      	str	r3, [r4, #0]
 80084ea:	6123      	str	r3, [r4, #16]
 80084ec:	2301      	movs	r3, #1
 80084ee:	6163      	str	r3, [r4, #20]
 80084f0:	b003      	add	sp, #12
 80084f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084f4:	ab01      	add	r3, sp, #4
 80084f6:	466a      	mov	r2, sp
 80084f8:	f7ff ffc8 	bl	800848c <__swhatbuf_r>
 80084fc:	9f00      	ldr	r7, [sp, #0]
 80084fe:	4605      	mov	r5, r0
 8008500:	4639      	mov	r1, r7
 8008502:	4630      	mov	r0, r6
 8008504:	f7fe fed4 	bl	80072b0 <_malloc_r>
 8008508:	b948      	cbnz	r0, 800851e <__smakebuf_r+0x46>
 800850a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800850e:	059a      	lsls	r2, r3, #22
 8008510:	d4ee      	bmi.n	80084f0 <__smakebuf_r+0x18>
 8008512:	f023 0303 	bic.w	r3, r3, #3
 8008516:	f043 0302 	orr.w	r3, r3, #2
 800851a:	81a3      	strh	r3, [r4, #12]
 800851c:	e7e2      	b.n	80084e4 <__smakebuf_r+0xc>
 800851e:	89a3      	ldrh	r3, [r4, #12]
 8008520:	6020      	str	r0, [r4, #0]
 8008522:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008526:	81a3      	strh	r3, [r4, #12]
 8008528:	9b01      	ldr	r3, [sp, #4]
 800852a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800852e:	b15b      	cbz	r3, 8008548 <__smakebuf_r+0x70>
 8008530:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008534:	4630      	mov	r0, r6
 8008536:	f000 f81d 	bl	8008574 <_isatty_r>
 800853a:	b128      	cbz	r0, 8008548 <__smakebuf_r+0x70>
 800853c:	89a3      	ldrh	r3, [r4, #12]
 800853e:	f023 0303 	bic.w	r3, r3, #3
 8008542:	f043 0301 	orr.w	r3, r3, #1
 8008546:	81a3      	strh	r3, [r4, #12]
 8008548:	89a3      	ldrh	r3, [r4, #12]
 800854a:	431d      	orrs	r5, r3
 800854c:	81a5      	strh	r5, [r4, #12]
 800854e:	e7cf      	b.n	80084f0 <__smakebuf_r+0x18>

08008550 <_fstat_r>:
 8008550:	b538      	push	{r3, r4, r5, lr}
 8008552:	4d07      	ldr	r5, [pc, #28]	@ (8008570 <_fstat_r+0x20>)
 8008554:	2300      	movs	r3, #0
 8008556:	4604      	mov	r4, r0
 8008558:	4608      	mov	r0, r1
 800855a:	4611      	mov	r1, r2
 800855c:	602b      	str	r3, [r5, #0]
 800855e:	f7f9 fa43 	bl	80019e8 <_fstat>
 8008562:	1c43      	adds	r3, r0, #1
 8008564:	d102      	bne.n	800856c <_fstat_r+0x1c>
 8008566:	682b      	ldr	r3, [r5, #0]
 8008568:	b103      	cbz	r3, 800856c <_fstat_r+0x1c>
 800856a:	6023      	str	r3, [r4, #0]
 800856c:	bd38      	pop	{r3, r4, r5, pc}
 800856e:	bf00      	nop
 8008570:	200043d4 	.word	0x200043d4

08008574 <_isatty_r>:
 8008574:	b538      	push	{r3, r4, r5, lr}
 8008576:	4d06      	ldr	r5, [pc, #24]	@ (8008590 <_isatty_r+0x1c>)
 8008578:	2300      	movs	r3, #0
 800857a:	4604      	mov	r4, r0
 800857c:	4608      	mov	r0, r1
 800857e:	602b      	str	r3, [r5, #0]
 8008580:	f7f9 fa42 	bl	8001a08 <_isatty>
 8008584:	1c43      	adds	r3, r0, #1
 8008586:	d102      	bne.n	800858e <_isatty_r+0x1a>
 8008588:	682b      	ldr	r3, [r5, #0]
 800858a:	b103      	cbz	r3, 800858e <_isatty_r+0x1a>
 800858c:	6023      	str	r3, [r4, #0]
 800858e:	bd38      	pop	{r3, r4, r5, pc}
 8008590:	200043d4 	.word	0x200043d4

08008594 <_init>:
 8008594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008596:	bf00      	nop
 8008598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800859a:	bc08      	pop	{r3}
 800859c:	469e      	mov	lr, r3
 800859e:	4770      	bx	lr

080085a0 <_fini>:
 80085a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085a2:	bf00      	nop
 80085a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085a6:	bc08      	pop	{r3}
 80085a8:	469e      	mov	lr, r3
 80085aa:	4770      	bx	lr
